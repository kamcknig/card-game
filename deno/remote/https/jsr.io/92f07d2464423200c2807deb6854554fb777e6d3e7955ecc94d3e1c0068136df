import { rest as restToolkit } from '../../function/rest.ts';

/**
 * Creates a function that transforms the arguments of the provided function `func`.
 * The transformed arguments are passed to `func` such that the arguments starting from a specified index
 * are grouped into an array, while the previous arguments are passed as individual elements.
 *
 * @template F - The type of the function being transformed.
 * @param {F} func - The function whose arguments are to be transformed.
 * @param {number} [start=func.length - 1] - The index from which to start grouping the remaining arguments into an array.
 *                                            Defaults to `func.length - 1`, grouping all arguments after the last parameter.
 * @returns {(...args: any[]) => ReturnType<F>} A new function that, when called, returns the result of calling `func` with the transformed arguments.
 *
 * The transformed arguments are:
 * - The first `start` arguments as individual elements.
 * - The remaining arguments from index `start` onward grouped into an array.
 * @example
 * function fn(a, b, c) {
 *   return [a, b, c];
 * }
 *
 * // Using default start index (func.length - 1, which is 2 in this case)
 * const transformedFn = rest(fn);
 * console.log(transformedFn(1, 2, 3, 4)); // [1, 2, [3, 4]]
 *
 * // Using start index 1
 * const transformedFnWithStart = rest(fn, 1);
 * console.log(transformedFnWithStart(1, 2, 3, 4)); // [1, [2, 3, 4]]
 *
 * // With fewer arguments than the start index
 * console.log(transformedFn(1)); // [1, undefined, []]
 */
export function rest<F extends (...args: any[]) => any>(
  func: F,
  start = func.length - 1
): (...args: any[]) => ReturnType<F> {
  start = Number.parseInt(start as any, 10);

  if (Number.isNaN(start) || start < 0) {
    start = func.length - 1;
  }

  return restToolkit(func, start);
}

// denoCacheMetadata={"headers":{"x-guploader-uploadid":"ABgVH8-PV2tib8rDazT6ONflnwLbJM1lP1gCUYoqZ9icU8rrLaz-Tfb7zJ1onG-pSAcJLeEnvZmc738","x-robots-tag":"noindex","content-length":"1850","x-content-type-options":"nosniff","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","x-goog-storage-class":"STANDARD","x-jsr-cache-status":"revalidated","x-goog-stored-content-encoding":"identity","via":"1.1 google","accept-ranges":"bytes","x-goog-stored-content-length":"1850","x-goog-metageneration":"1","etag":"\"ecdcf47bd295e0e714b4101e9131202f\"","access-control-allow-origin":"*","server":"UploadServer","date":"Thu, 26 Jun 2025 21:45:35 GMT","x-goog-generation":"1741509575557513","cache-control":"public, max-age=31536000, immutable","x-goog-hash":"crc32c=juMjNQ==,md5=7Nz0e9KV4OcUtBAekTEgLw==","x-jsr-cache-id":"ATL","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","expires":"Fri, 26 Jun 2026 21:45:35 GMT","access-control-expose-headers":"*","cross-origin-resource-policy":"cross-origin","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","age":"0","content-type":"text/typescript"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/function/rest.ts","time":1750974334}