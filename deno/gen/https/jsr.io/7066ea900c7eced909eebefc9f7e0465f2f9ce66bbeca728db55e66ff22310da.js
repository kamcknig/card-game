import { isIterateeCall } from '../_internal/isIterateeCall.ts';
import { toFinite } from '../util/toFinite.ts';
/**
 * Returns an array of numbers from `start` (inclusive) to `end` (exclusive), incrementing by `step`.
 *
 * @param {number} start - The starting number of the range (inclusive).
 * @param {number} end - The end number of the range (exclusive).
 * @param {number} step - The step value for the range.
 * @returns {number[]} An array of numbers from `start` (inclusive) to `end` (exclusive) with the specified `step`.
 *
 * @example
 * // Returns [0, 1, 2, 3]
 * range(4);
 *
 * @example
 * // Returns [0, -1, -2, -3]
 * range(0, -4, -1);
 */ export function range(start, end, step) {
  // Enables use as an iteratee for methods like `_.map`.
  if (step && typeof step !== 'number' && isIterateeCall(start, end, step)) {
    end = step = undefined;
  }
  start = toFinite(start);
  if (end === undefined) {
    end = start;
    start = 0;
  } else {
    end = toFinite(end);
  }
  step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
  const length = Math.max(Math.ceil((end - start) / (step || 1)), 0);
  const result = new Array(length);
  for(let index = 0; index < length; index++){
    result[index] = start;
    start += step;
  }
  return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvbWF0aC9yYW5nZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0l0ZXJhdGVlQ2FsbCB9IGZyb20gJy4uL19pbnRlcm5hbC9pc0l0ZXJhdGVlQ2FsbC50cyc7XG5pbXBvcnQgeyB0b0Zpbml0ZSB9IGZyb20gJy4uL3V0aWwvdG9GaW5pdGUudHMnO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIGAwYCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSwgaW5jcmVtZW50aW5nIGJ5IGAxYC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIC0gVGhlIGVuZCBudW1iZXIgb2YgdGhlIHJhbmdlIChleGNsdXNpdmUpLlxuICogQHJldHVybnMge251bWJlcltdfSBBbiBhcnJheSBvZiBudW1iZXJzIGZyb20gYDBgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpIHdpdGggYSBzdGVwIG9mIGAxYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmV0dXJucyBbMCwgMSwgMiwgM11cbiAqIHJhbmdlKDQpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZ2UoZW5kOiBudW1iZXIpOiBudW1iZXJbXTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpLCBpbmNyZW1lbnRpbmcgYnkgYDFgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIFRoZSBzdGFydGluZyBudW1iZXIgb2YgdGhlIHJhbmdlIChpbmNsdXNpdmUpLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCAtIFRoZSBlbmQgbnVtYmVyIG9mIHRoZSByYW5nZSAoZXhjbHVzaXZlKS5cbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gQW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSkgd2l0aCBhIHN0ZXAgb2YgYDFgLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXR1cm5zIFsxLCAyLCAzXVxuICogcmFuZ2UoMSwgNCk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZShzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IG51bWJlcltdO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSksIGluY3JlbWVudGluZyBieSBgc3RlcGAuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gVGhlIHN0YXJ0aW5nIG51bWJlciBvZiB0aGUgcmFuZ2UgKGluY2x1c2l2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIC0gVGhlIGVuZCBudW1iZXIgb2YgdGhlIHJhbmdlIChleGNsdXNpdmUpLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgLSBUaGUgc3RlcCB2YWx1ZSBmb3IgdGhlIHJhbmdlLlxuICogQHJldHVybnMge251bWJlcltdfSBBbiBhcnJheSBvZiBudW1iZXJzIGZyb20gYHN0YXJ0YCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSB3aXRoIHRoZSBzcGVjaWZpZWQgYHN0ZXBgLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXR1cm5zIFswLCA1LCAxMCwgMTVdXG4gKiByYW5nZSgwLCAyMCwgNSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZShzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciwgc3RlcDogbnVtYmVyKTogbnVtYmVyW107XG5cbi8qKlxuICogRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgLSBUaGUgY3VycmVudCBpdGVyYXRlZSB2YWx1ZS5cbiAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IGluZGV4IC0gVGhlIGl0ZXJhdGlvbiBpbmRleC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBndWFyZCAtIFRoZSBpdGVyYXRlZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IEFuIGFycmF5IG9mIG51bWJlcnMgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpIHdpdGggdGhlIHNwZWNpZmllZCBgc3RlcGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZShlbmQ6IG51bWJlciwgaW5kZXg6IFByb3BlcnR5S2V5LCBndWFyZDogb2JqZWN0KTogbnVtYmVyW107XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBudW1iZXJzIGZyb20gYHN0YXJ0YCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSwgaW5jcmVtZW50aW5nIGJ5IGBzdGVwYC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBUaGUgc3RhcnRpbmcgbnVtYmVyIG9mIHRoZSByYW5nZSAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgLSBUaGUgZW5kIG51bWJlciBvZiB0aGUgcmFuZ2UgKGV4Y2x1c2l2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RlcCAtIFRoZSBzdGVwIHZhbHVlIGZvciB0aGUgcmFuZ2UuXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IEFuIGFycmF5IG9mIG51bWJlcnMgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpIHdpdGggdGhlIHNwZWNpZmllZCBgc3RlcGAuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJldHVybnMgWzAsIDEsIDIsIDNdXG4gKiByYW5nZSg0KTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmV0dXJucyBbMCwgLTEsIC0yLCAtM11cbiAqIHJhbmdlKDAsIC00LCAtMSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZShzdGFydDogbnVtYmVyLCBlbmQ/OiBQcm9wZXJ0eUtleSwgc3RlcD86IGFueSk6IG51bWJlcltdIHtcbiAgLy8gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICB9XG4gIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSBzdGFydDtcbiAgICBzdGFydCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgfVxuICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuXG4gIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKTtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICByZXN1bHRbaW5kZXhdID0gc3RhcnQ7XG4gICAgc3RhcnQgKz0gc3RlcDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsY0FBYyxRQUFRLGlDQUFpQztBQUNoRSxTQUFTLFFBQVEsUUFBUSxzQkFBc0I7QUFtRC9DOzs7Ozs7Ozs7Ozs7Ozs7Q0FlQyxHQUNELE9BQU8sU0FBUyxNQUFNLEtBQWEsRUFBRSxHQUFpQixFQUFFLElBQVU7RUFDaEUsdURBQXVEO0VBQ3ZELElBQUksUUFBUSxPQUFPLFNBQVMsWUFBWSxlQUFlLE9BQU8sS0FBSyxPQUFPO0lBQ3hFLE1BQU0sT0FBTztFQUNmO0VBQ0EsUUFBUSxTQUFTO0VBQ2pCLElBQUksUUFBUSxXQUFXO0lBQ3JCLE1BQU07SUFDTixRQUFRO0VBQ1YsT0FBTztJQUNMLE1BQU0sU0FBUztFQUNqQjtFQUNBLE9BQU8sU0FBUyxZQUFhLFFBQVEsTUFBTSxJQUFJLENBQUMsSUFBSyxTQUFTO0VBRTlELE1BQU0sU0FBUyxLQUFLLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUk7RUFDaEUsTUFBTSxTQUFTLElBQUksTUFBTTtFQUN6QixJQUFLLElBQUksUUFBUSxHQUFHLFFBQVEsUUFBUSxRQUFTO0lBQzNDLE1BQU0sQ0FBQyxNQUFNLEdBQUc7SUFDaEIsU0FBUztFQUNYO0VBQ0EsT0FBTztBQUNUIn0=
// denoCacheMetadata=2755132599664261098,1962744339426014111