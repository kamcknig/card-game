import { last } from './last.ts';
import { intersectionWith as intersectionWithToolkit } from '../../array/intersectionWith.ts';
import { uniq as uniqToolkit } from './uniq.ts';
import { eq } from '../util/eq.ts';
/**
 * Returns the intersection of multiple arrays based on a custom equality function.
 *
 * @template T - The type of elements in the arrays
 * @param {ArrayLike<T> | null | undefined} firstArr - The first array to compare
 * @param {...(ArrayLike<T> | null | undefined | ((x: T, y: T) => boolean))} otherArrs - Additional arrays and optional equality function
 * @returns {T[]} Elements from first array that match in all arrays
 *
 * @example
 * const arr1 = [{id: 1}, {id: 2}];
 * const arr2 = [{id: 2}, {id: 3}];
 * const result = intersectionWith(arr1, arr2, (a, b) => a.id === b.id);
 * // result is [{id: 2}]
 */ export function intersectionWith(firstArr, ...otherArrs) {
  console.log(firstArr);
  if (firstArr == null) {
    return [];
  }
  const _comparator = last(otherArrs);
  let comparator = eq;
  let uniq = uniqToolkit;
  if (typeof _comparator === 'function') {
    comparator = _comparator;
    uniq = uniqPreserve0;
    otherArrs.pop();
  }
  let result = uniq(Array.from(firstArr));
  for(let i = 0; i < otherArrs.length; ++i){
    const otherArr = otherArrs[i];
    if (otherArr == null) {
      return [];
    }
    result = intersectionWithToolkit(result, Array.from(otherArr), comparator);
  }
  return result;
}
/**
 * This function is to preserve the sign of `-0`, which is a behavior in lodash.
 */ function uniqPreserve0(arr) {
  const result = [];
  const added = new Set();
  for(let i = 0; i < arr.length; i++){
    const item = arr[i];
    if (added.has(item)) {
      continue;
    }
    result.push(item);
    added.add(item);
  }
  return result;
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=2507723417281417828,14755211049451088194