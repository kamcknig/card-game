import { identity } from '../../function/identity.ts';
import { isNil } from '../../predicate/isNil.ts';

/**
 * Creates a new object that reverses the keys and values of the given object, similar to the invert.
 *
 * The `iteratee` function specifies how the values are reversed into keys. If no `iteratee` function is provided, the values are used as keys as-is.
 *
 * The values of the new object are arrays of keys that correspond to the value returned by the `iteratee` function.
 *
 * @param {Record<K, V>} object - The object to iterate over.
 * @param {(value: V) => string} [iteratee] - Optional. A function that generates a key based on each value in the object.
 * If not provided, the function defaults to using the value as a string.
 *
 * @returns {Record<string, K[]>} An object where the keys are generated by the iteratee, and the values
 * are arrays of property names (keys) from the input object that correspond to those keys.
 *
 * @example
 * const obj = { a: 1, b: 2, c: 1 };
 * const result = invertBy(obj);
 * // result => { '1': ['a', 'c'], '2': ['b'] }
 *
 * @example
 * const obj = { a: 1, b: 2, c: 1 };
 * const result = invertBy(obj, value => `group${value}`);
 * // result => { 'group1': ['a', 'c'], 'group2': ['b'] }
 */
export function invertBy<K extends PropertyKey, V>(
  object: Record<K, V>,
  iteratee?: (value: V) => string
): Record<string, K[]> {
  const result = {} as Record<string, K[]>;

  if (isNil(object)) {
    return result;
  }

  if (iteratee == null) {
    iteratee = identity as (value: V) => string;
  }

  const keys = Object.keys(object);

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i] as K;

    const value = object[key];
    const valueStr = iteratee(value);

    if (Array.isArray(result[valueStr])) {
      result[valueStr].push(key);
    } else {
      result[valueStr] = [key];
    }
  }

  return result;
}

// denoCacheMetadata={"headers":{"x-robots-tag":"noindex","access-control-expose-headers":"*","x-goog-stored-content-encoding":"identity","x-goog-stored-content-length":"1892","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","server":"UploadServer","via":"1.1 google","accept-ranges":"bytes","etag":"\"55971382b0b539b86b856d29a573e5bb\"","content-type":"text/typescript","x-guploader-uploadid":"ABgVH8_4fBSxTzTf0JEsdCqQCAbCT94MEC0B8rgZqeQXS4Ts_028ggtDr842WXFiC9WYNtl9MKObRHg","x-goog-metageneration":"1","x-goog-hash":"crc32c=F3VzCA==,md5=VZcTgrC1ObhrhW0ppXPluw==","x-goog-storage-class":"STANDARD","expires":"Fri, 26 Jun 2026 21:45:35 GMT","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","age":"0","x-jsr-cache-id":"ATL","cache-control":"public, max-age=31536000, immutable","x-jsr-cache-status":"revalidated","cross-origin-resource-policy":"cross-origin","x-goog-generation":"1741509575354328","date":"Thu, 26 Jun 2025 21:45:35 GMT","content-length":"1892","access-control-allow-origin":"*"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/object/invertBy.ts","time":1750974334}