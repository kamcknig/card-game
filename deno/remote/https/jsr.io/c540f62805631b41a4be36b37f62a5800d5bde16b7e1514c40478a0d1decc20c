import { Semaphore } from './semaphore.ts';

/**
 * A Mutex (mutual exclusion lock) for async functions.
 * It allows only one async task to access a critical section at a time.
 *
 * @example
 * const mutex = new Mutex();
 *
 * async function criticalSection() {
 *   await mutex.acquire();
 *   try {
 *     // This code section cannot be executed simultaneously
 *   } finally {
 *     mutex.release();
 *   }
 * }
 *
 * criticalSection();
 * criticalSection(); // This call will wait until the first call releases the mutex.
 */
export class Mutex {
  private semaphore = new Semaphore(1);

  /**
   * Checks if the mutex is currently locked.
   * @returns {boolean} True if the mutex is locked, false otherwise.
   *
   * @example
   * const mutex = new Mutex();
   * console.log(mutex.isLocked); // false
   * await mutex.acquire();
   * console.log(mutex.isLocked); // true
   * mutex.release();
   * console.log(mutex.isLocked); // false
   */
  get isLocked(): boolean {
    return this.semaphore.available === 0;
  }

  /**
   * Acquires the mutex, blocking if necessary until it is available.
   * @returns {Promise<void>} A promise that resolves when the mutex is acquired.
   *
   * @example
   * const mutex = new Mutex();
   * await mutex.acquire();
   * try {
   *   // This code section cannot be executed simultaneously
   * } finally {
   *   mutex.release();
   * }
   */
  async acquire(): Promise<void> {
    return this.semaphore.acquire();
  }

  /**
   * Releases the mutex, allowing another waiting task to proceed.
   *
   * @example
   * const mutex = new Mutex();
   * await mutex.acquire();
   * try {
   *   // This code section cannot be executed simultaneously
   * } finally {
   *   mutex.release(); // Allows another waiting task to proceed.
   * }
   */
  release(): void {
    this.semaphore.release();
  }
}

// denoCacheMetadata={"headers":{"content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","content-length":"1847","etag":"\"c4bcf2e2dc4dec0e19343da063504963\"","access-control-allow-origin":"*","x-content-type-options":"nosniff","access-control-expose-headers":"*","cross-origin-resource-policy":"cross-origin","x-guploader-uploadid":"ABgVH8-KnSdUIw56mJeh7Vi6tqEbYOoXHTMg8lhZhscSrLKgindrnb2uAdb3JtFye6sehD9u7y7HrKk","cache-control":"public, max-age=31536000, immutable","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","via":"1.1 google","date":"Thu, 26 Jun 2025 21:45:36 GMT","x-robots-tag":"noindex","x-goog-storage-class":"STANDARD","x-goog-generation":"1741509575617564","server":"UploadServer","x-jsr-cache-id":"ATL","x-goog-hash":"crc32c=kUSR0Q==,md5=xLzy4txN7A4ZND2gY1BJYw==","x-goog-stored-content-length":"1847","age":"0","x-jsr-cache-status":"revalidated","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","content-type":"text/typescript","x-goog-metageneration":"1","accept-ranges":"bytes","x-goog-stored-content-encoding":"identity","expires":"Fri, 26 Jun 2026 21:45:36 GMT"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/promise/mutex.ts","time":1750974334}