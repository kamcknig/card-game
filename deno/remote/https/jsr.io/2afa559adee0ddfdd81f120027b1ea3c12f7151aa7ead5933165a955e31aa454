import { isArrayLike } from '../predicate/isArrayLike.ts';

/**
 * Flattens an array up to the specified depth.
 *
 * @template T - The type of elements within the array.
 * @template D - The depth to which the array should be flattened.
 * @param {ArrayLike<T> | null | undefined} value - The object to flatten.
 * @param {D} depth - The depth level specifying how deep a nested array structure should be flattened. Defaults to 1.
 * @returns {Array<FlatArray<T[], D>> | []} A new array that has been flattened.
 *
 * @example
 * const arr = flatten([1, [2, 3], [4, [5, 6]]], 1);
 * // Returns: [1, 2, 3, 4, [5, 6]]
 *
 * const arr = flatten([1, [2, 3], [4, [5, 6]]], 2);
 * // Returns: [1, 2, 3, 4, 5, 6]
 */
export function flatten<T, D extends number = 1>(
  value: ArrayLike<T> | null | undefined,
  depth = 1 as D
): Array<FlatArray<T[], D>> | [] {
  const result: Array<FlatArray<T[], D>> = [];
  const flooredDepth = Math.floor(depth);

  if (!isArrayLike(value)) {
    return result;
  }

  const recursive = (arr: readonly T[], currentDepth: number) => {
    for (let i = 0; i < arr.length; i++) {
      const item = arr[i];
      if (
        currentDepth < flooredDepth &&
        (Array.isArray(item) ||
          Boolean(item?.[Symbol.isConcatSpreadable as keyof object]) ||
          (item !== null && typeof item === 'object' && Object.prototype.toString.call(item) === '[object Arguments]'))
      ) {
        if (Array.isArray(item)) {
          recursive(item, currentDepth + 1);
        } else {
          recursive(Array.from(item as T[]), currentDepth + 1);
        }
      } else {
        result.push(item as FlatArray<T[], D>);
      }
    }
  };

  recursive(Array.from(value), 0);

  return result;
}

// denoCacheMetadata={"headers":{"x-jsr-cache-status":"revalidated","via":"1.1 google","cross-origin-resource-policy":"cross-origin","x-goog-stored-content-encoding":"identity","expires":"Fri, 26 Jun 2026 21:45:35 GMT","x-goog-storage-class":"STANDARD","x-goog-stored-content-length":"1728","content-length":"1728","access-control-allow-origin":"*","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","access-control-expose-headers":"*","x-goog-generation":"1741509575427446","etag":"\"44336d647233e7bbcc057432f470bdb2\"","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","age":"0","date":"Thu, 26 Jun 2025 21:45:35 GMT","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-hash":"crc32c=eF89Sw==,md5=RDNtZHIz57vMBXQy9HC9sg==","x-goog-metageneration":"1","x-guploader-uploadid":"ABgVH8-USHu7R0GVglt7hoIR1hAYx5tjgEl_IFnkotMhVLRFxxKtahq1Ck6cQCf0W2ZCCkt3Rw2c1tY","x-content-type-options":"nosniff","x-robots-tag":"noindex","server":"UploadServer","accept-ranges":"bytes","cache-control":"public, max-age=31536000, immutable","content-type":"text/typescript","x-jsr-cache-id":"ATL"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/array/flatten.ts","time":1750974334}