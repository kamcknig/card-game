import { toArray } from '../_internal/toArray.ts';
import { property } from '../object/property.ts';
import { matches } from '../predicate/matches.ts';
import { matchesProperty } from '../predicate/matchesProperty.ts';
/**
 * Finds the index of the first item in an array that has a specific property, where the property name is provided as a PropertyKey.
 *
 * @template T
 * @param {ArrayLike<T> | null | undefined} arr - The array to search through.
 * @param {((item: T, index: number, arr: any) => unknown) | Partial<T> | [keyof T, unknown] | PropertyKey} doesMatch - The property name to check.
 * @param {number} [fromIndex=arr.length - 1] - The index to start the search from, defaults to the last index of the array.
 * @returns {number} - The index of the first item that has the specified property, or `undefined` if no match is found.
 *
 * @example
 * // Using a property name
 * const items = [{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }];
 * const result = findLastIndex(items, 'name');
 * console.log(result); // 1
 */ export function findLastIndex(arr, doesMatch, fromIndex = arr ? arr.length - 1 : 0) {
  if (!arr) {
    return -1;
  }
  if (fromIndex < 0) {
    fromIndex = Math.max(arr.length + fromIndex, 0);
  } else {
    fromIndex = Math.min(fromIndex, arr.length - 1);
  }
  const subArray = toArray(arr).slice(0, fromIndex + 1);
  switch(typeof doesMatch){
    case 'function':
      {
        return subArray.findLastIndex(doesMatch);
      }
    case 'object':
      {
        if (Array.isArray(doesMatch) && doesMatch.length === 2) {
          const key = doesMatch[0];
          const value = doesMatch[1];
          return subArray.findLastIndex(matchesProperty(key, value));
        } else {
          return subArray.findLastIndex(matches(doesMatch));
        }
      }
    case 'number':
    case 'symbol':
    case 'string':
      {
        return subArray.findLastIndex(property(doesMatch));
      }
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=17210847429615846939,652799620751450831