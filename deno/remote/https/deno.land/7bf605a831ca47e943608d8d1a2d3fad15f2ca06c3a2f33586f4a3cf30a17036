const chars =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

// Use a lookup table to find the index.
const lookup = new Uint8Array(256);
for (let i = 0; i < chars.length; i++) {
  lookup[chars.charCodeAt(i)] = i;
}

export function encodeToBase64(arraybuffer: ArrayBuffer): string {
  const bytes = new Uint8Array(arraybuffer);
  const len = bytes.length;
  let base64 = "";

  for (let i = 0; i < len; i += 3) {
    base64 += chars[bytes[i] >> 2];
    base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
    base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
    base64 += chars[bytes[i + 2] & 63];
  }

  if (len % 3 === 2) {
    base64 = base64.substring(0, base64.length - 1) + "=";
  } else if (len % 3 === 1) {
    base64 = base64.substring(0, base64.length - 2) + "==";
  }

  return base64;
}

export function decodeFromBase64(base64: string): ArrayBuffer {
  const len = base64.length;
  let bufferLength = base64.length * 0.75,
    i,
    p = 0,
    encoded1,
    encoded2,
    encoded3,
    encoded4;

  if (base64[base64.length - 1] === "=") {
    bufferLength--;
    if (base64[base64.length - 2] === "=") {
      bufferLength--;
    }
  }

  const arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

  for (i = 0; i < len; i += 4) {
    encoded1 = lookup[base64.charCodeAt(i)];
    encoded2 = lookup[base64.charCodeAt(i + 1)];
    encoded3 = lookup[base64.charCodeAt(i + 2)];
    encoded4 = lookup[base64.charCodeAt(i + 3)];

    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
  }

  return arraybuffer;
}

// denoCacheMetadata={"headers":{"x-content-type-options":"nosniff","x-frame-options":"DENY","cross-origin-resource-policy":"same-origin","cache-control":"public, max-age=31536000, immutable","content-length":"1724","cross-origin-embedder-policy":"same-origin","strict-transport-security":"max-age=63072000; includeSubDomains; preload","accept-ranges":"bytes","access-control-allow-origin":"*","cross-origin-opener-policy":"same-origin","date":"Wed, 29 Jan 2025 15:36:35 GMT","etag":"\"05889175f923f41ce0ef1d03a52a0bfe\"","referrer-policy":"strict-origin-when-cross-origin","age":"12809340","vary":"Accept-Encoding, Origin","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","last-modified":"Thu, 09 Jan 2025 07:38:35 GMT","via":"http/2 edgeproxy-h","x-amz-cf-id":"1JFK7LcsY86-evFA3G4SEWqKO85ab9NR_U9EWdhY0T-1Kv8NWAtaMA==","content-type":"application/typescript; charset=utf-8","server":"deno/gcp-us-east4","x-amz-cf-pop":"IAD61-P1","x-amz-replication-status":"COMPLETED","x-amz-version-id":"FdMGiXut2m06OAtzdFKjReO9ES2Sy8rQ","x-amz-server-side-encryption":"AES256","server-timing":"fetchSource;dur=18","x-cache":"Hit from cloudfront"},"url":"https://deno.land/x/socket_io@0.2.1/packages/engine.io-parser/base64-arraybuffer.ts","time":1750974333}