import { InvalidStateError } from "./errors.ts";
import { readArrayReplyBody } from "./protocol/mod.ts";
import { decoder } from "./protocol/_util.ts";
class RedisSubscriptionImpl {
  executor;
  get isConnected() {
    return this.executor.connection.isConnected;
  }
  get isClosed() {
    return this.executor.connection.isClosed;
  }
  channels;
  patterns;
  constructor(executor){
    this.executor = executor;
    this.channels = Object.create(null);
    this.patterns = Object.create(null);
  }
  async psubscribe(...patterns) {
    await this.executor.exec("PSUBSCRIBE", ...patterns);
    for (const pat of patterns){
      this.patterns[pat] = true;
    }
  }
  async punsubscribe(...patterns) {
    await this.executor.exec("PUNSUBSCRIBE", ...patterns);
    for (const pat of patterns){
      delete this.patterns[pat];
    }
  }
  async subscribe(...channels) {
    await this.executor.exec("SUBSCRIBE", ...channels);
    for (const chan of channels){
      this.channels[chan] = true;
    }
  }
  async unsubscribe(...channels) {
    await this.executor.exec("UNSUBSCRIBE", ...channels);
    for (const chan of channels){
      delete this.channels[chan];
    }
  }
  receive() {
    return this.#_receive();
  }
  receiveBinary() {
    return this.#_receive(true);
  }
  async *#_receive(binary = false) {
    let forceReconnect = false;
    const connection = this.executor.connection;
    while(this.isConnected){
      try {
        let rep;
        try {
          rep = await readArrayReplyBody(connection.reader);
        } catch (err) {
          if (err instanceof Deno.errors.BadResource) {
            // Connection already closed.
            connection.close();
            break;
          }
          throw err;
        }
        const ev = rep[0];
        if (ev === "message" && rep.length === 3) {
          yield {
            channel: rep[1],
            message: binary ? rep[2] : decoder.decode(rep[2])
          };
        } else if (ev === "pmessage" && rep.length === 4) {
          yield {
            pattern: rep[1],
            channel: rep[2],
            message: binary ? rep[3] : decoder.decode(rep[3])
          };
        }
      } catch (error) {
        if (error instanceof InvalidStateError || error instanceof Deno.errors.BadResource) {
          forceReconnect = true;
        } else throw error;
      } finally{
        if (!this.isClosed && !this.isConnected || forceReconnect) {
          await connection.reconnect();
          forceReconnect = false;
          if (Object.keys(this.channels).length > 0) {
            await this.subscribe(...Object.keys(this.channels));
          }
          if (Object.keys(this.patterns).length > 0) {
            await this.psubscribe(...Object.keys(this.patterns));
          }
        }
      }
    }
  }
  close() {
    this.executor.connection.close();
  }
}
export async function subscribe(executor, ...channels) {
  const sub = new RedisSubscriptionImpl(executor);
  await sub.subscribe(...channels);
  return sub;
}
export async function psubscribe(executor, ...patterns) {
  const sub = new RedisSubscriptionImpl(executor);
  await sub.psubscribe(...patterns);
  return sub;
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=353764401278456130,4714592673048297103