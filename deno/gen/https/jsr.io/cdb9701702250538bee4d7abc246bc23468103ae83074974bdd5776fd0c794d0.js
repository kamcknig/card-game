import { flatten } from '../../array/flatten.ts';
import { flowRight as flowRightToolkit } from '../../function/flowRight.ts';
/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {Array<((...args: any[]) => any) | Array<(...args: any[]) => any>>} funcs The functions to invoke.
 * @returns {(...args: any[]) => any} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 * const double = (n: number) => n * 2;
 *
 * const combined = flowRight(double, [square, add]);
 * console.log(combined(1, 2)); // 18
 */ export function flowRight(...funcs) {
  const flattenFuncs = flatten(funcs, 1);
  if (flattenFuncs.some((func)=>typeof func !== 'function')) {
    throw new TypeError('Expected a function');
  }
  return flowRightToolkit(...flattenFuncs);
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=2380279147202787864,10489082149600615138