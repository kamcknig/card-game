import { property } from './property.ts';
import { identity } from '../../function/identity.ts';
import { mapKeys as mapKeysToolkit } from '../../object/mapKeys.ts';

/**
 * Creates a new object with the same values as the given object, but with keys generated
 * by running each own enumerable property of the object through the iteratee function.
 *
 * @template T - The type of the object.
 * @template K1 - The type of the keys in the object.
 *
 * @param {T} object - The object to iterate over.
 * @param {PropertyKey | PropertyKey[]} getNewKey - The path of the property to get to generate the new keys.
 * @returns {Record<PropertyKey, T[K1]>} - Returns the new mapped object.
 *
 * @example
 * // Example usage:
 * const obj = { a: 1, b: 2 };
 * const result = mapKeys(obj, (value, key) => key + value);
 * console.log(result); // { a1: 1, b2: 2 }
 */
export function mapKeys<T extends object>(
  object: T,
  getNewKey?: PropertyKey | readonly PropertyKey[]
): Record<PropertyKey, T[keyof T]>;

/**
 * Creates a new object with the same values as the given object, but with keys generated
 * by running each own enumerable property of the object through the iteratee function.
 *
 * @template T - The type of the object.
 * @template K1 - The type of the keys in the object.
 * @template K2 - The type of the new keys generated by the iteratee function.
 *
 * @param {T} object - The object to iterate over.
 * @param {(value: T[K1], key: K1, object: T) => K2} getNewKey - The function invoked per own enumerable property.
 * @returns {Record<K2, T[K1]>} - Returns the new mapped object.
 *
 * @example
 * // Example usage:
 * const obj = { a: 1, b: 2 };
 * const result = mapKeys(obj, (value, key) => key + value);
 * console.log(result); // { a1: 1, b2: 2 }
 */
export function mapKeys<T extends object, K1 extends keyof T, K2 extends PropertyKey>(
  object: T,
  getNewKey?: (value: T[K1], key: K1, object: T) => K2
): Record<K2, T[K1]>;

/**
 * Creates a new object with the same values as the given object, but with keys generated
 * by running each own enumerable property of the object through the iteratee function.
 *
 * @template T - The type of the object.
 * @template K1 - The type of the keys in the object.
 * @template K2 - The type of the new keys generated by the iteratee function.
 *
 * @param {T} object - The object to iterate over.
 * @param {(value: T[K1], key: K1, object: T) => K2} [getNewKey] - The function invoked per own enumerable property, or a path to generate new keys.
 * @returns {Record<K2, T[K1]>} - Returns the new mapped object.
 *
 * @example
 * // Example usage:
 * const obj = { a: 1, b: 2 };
 * const result = mapKeys(obj, (value, key) => key + value);
 * console.log(result); // { a1: 1, b2: 2 }
 */
export function mapKeys<T extends object, K extends PropertyKey>(
  object: T,
  getNewKey?: PropertyKey | readonly PropertyKey[] | ((value: T[keyof T], key: keyof T, object: T) => K)
): Record<K, T[keyof T]> {
  getNewKey = getNewKey ?? (identity as (value: T[keyof T], key: keyof T, object: T) => K);

  switch (typeof getNewKey) {
    case 'string':
    case 'symbol':
    case 'number':
    case 'object': {
      return mapKeysToolkit(object, property(getNewKey));
    }
    case 'function': {
      return mapKeysToolkit(object, getNewKey);
    }
  }
}

// denoCacheMetadata={"headers":{"x-goog-generation":"1741509575515542","x-goog-storage-class":"STANDARD","server":"UploadServer","accept-ranges":"bytes","x-robots-tag":"noindex","expires":"Fri, 26 Jun 2026 21:45:35 GMT","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","content-type":"text/typescript","content-length":"3314","x-guploader-uploadid":"ABgVH88b5KbOns3hayrZBOoDekPux3CoAROXunSyKMjjvf9uErjhVf4Gr42yUDj_cv6sMDkrp_gMOzs","date":"Thu, 26 Jun 2025 21:45:35 GMT","x-jsr-cache-id":"ATL","access-control-allow-origin":"*","cross-origin-resource-policy":"cross-origin","x-content-type-options":"nosniff","x-goog-hash":"crc32c=PvbdEw==,md5=IsF6/EUdwqc407wdIFq1ZA==","cache-control":"public, max-age=31536000, immutable","etag":"\"22c17afc451dc2a738d3bc1d205ab564\"","x-jsr-cache-status":"revalidated","x-goog-metageneration":"1","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-goog-stored-content-length":"3314","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","age":"0","x-goog-stored-content-encoding":"identity","access-control-expose-headers":"*","via":"1.1 google"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/object/mapKeys.ts","time":1750974334}