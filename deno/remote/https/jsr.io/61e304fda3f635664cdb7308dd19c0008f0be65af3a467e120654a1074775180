/**
 * Creates a function that invokes `func` with the `this` binding of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * The `bind.placeholder` value, which defaults to a `symbol`, may be used as a placeholder for partially applied arguments.
 *
 * Note: Unlike native `Function#bind`, this method doesn't set the `length` property of bound functions.
 *
 * @template F - The type of the function to bind.
 * @param {F} func - The function to bind.
 * @param {unknown} thisObj - The `this` binding of `func`.
 * @param {...any} partialArgs - The arguments to be partially applied.
 * @returns {F} - Returns the new bound function.
 *
 * @example
 * function greet(greeting, punctuation) {
 *   return greeting + ' ' + this.user + punctuation;
 * }
 * const object = { user: 'fred' };
 * let bound = bind(greet, object, 'hi');
 * bound('!');
 * // => 'hi fred!'
 *
 * bound = bind(greet, object, bind.placeholder, '!');
 * bound('hi');
 * // => 'hi fred!'
 */
export function bind<F extends (...args: any[]) => any>(func: F, thisObj?: unknown, ...partialArgs: any[]): F {
  const bound = function (this: any, ...providedArgs: any[]) {
    const args: any[] = [];

    // Populate args by merging partialArgs and providedArgs.
    // e.g.. when we call bind(func, {}, [1, bind.placeholder, 3])(2, 4);
    // we have args with [1, 2, 3, 4].
    let startIndex = 0;

    for (let i = 0; i < partialArgs.length; i++) {
      const arg = partialArgs[i];

      if (arg === bind.placeholder) {
        args.push(providedArgs[startIndex++]);
      } else {
        args.push(arg);
      }
    }

    for (let i = startIndex; i < providedArgs.length; i++) {
      args.push(providedArgs[i]);
    }

    if (this instanceof bound) {
      // @ts-expect-error - fn is a constructor
      return new func(...args);
    }

    return func.apply(thisObj, args);
  };

  return bound as any as F;
}

const bindPlaceholder: unique symbol = Symbol('bind.placeholder');
bind.placeholder = bindPlaceholder;

// denoCacheMetadata={"headers":{"date":"Thu, 26 Jun 2025 21:45:35 GMT","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","access-control-allow-origin":"*","cross-origin-resource-policy":"cross-origin","expires":"Fri, 26 Jun 2026 21:45:35 GMT","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","etag":"\"cf3d6ad88621d5647edd209d7f7826fd\"","accept-ranges":"bytes","cache-control":"public, max-age=31536000, immutable","x-goog-stored-content-length":"2011","via":"1.1 google","x-goog-stored-content-encoding":"identity","content-length":"2011","server":"UploadServer","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-jsr-cache-id":"ATL","x-robots-tag":"noindex","x-jsr-cache-status":"revalidated","x-goog-hash":"crc32c=GAiTaw==,md5=zz1q2IYh1WR+3SCdf3gm/Q==","access-control-expose-headers":"*","age":"0","x-content-type-options":"nosniff","content-type":"text/typescript","x-goog-generation":"1741509575588816","x-goog-metageneration":"1","x-goog-storage-class":"STANDARD","x-guploader-uploadid":"ABgVH8_sXxVDB0_hYIXF35r1242L7Ea1eIrWhNvJPtBqUObJFq-D0gnVbgBMn7ORfaWNbG6l83H44MQ"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/function/bind.ts","time":1750974334}