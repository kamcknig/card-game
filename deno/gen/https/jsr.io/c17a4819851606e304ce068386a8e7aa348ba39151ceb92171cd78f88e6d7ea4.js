import { remove as removeToolkit } from '../../array/remove.ts';
import { iteratee } from '../util/iteratee.ts';
/**
 * Removes elements from an array based on various criteria.
 *
 * @param {ArrayLike<T>} arr - The array to iterate over.
 * @param {(value: T, index: number, arr: ArrayLike<T>) => boolean | Partial<T> | [keyof T, unknown] | keyof T} shouldRemoveElement - The function invoked per iteration, a partial object, a property-value pair, or a key to match against each element.
 * @returns {T[]} - Returns the modified array with the specified elements removed.
 *
 * @example
 * // Using a predicate function
 * const numbers = [1, 2, 3, 4, 5];
 * remove(numbers, value => value % 2 === 0); // => [1, 3, 5]
 *
 * @example
 * // Using a partial object
 * const objects = [{ a: 1 }, { a: 2 }, { a: 3 }];
 * remove(objects, { a: 1 }); // => [{ a: 2 }, { a: 3 }]
 *
 * @example
 * // Using a property-value pair
 * const objects = [{ a: 1 }, { a: 2 }, { a: 3 }];
 * remove(objects, ['a', 1]); // => [{ a: 2 }, { a: 3 }]
 *
 * @example
 * // Using a property key
 * const objects = [{ a: 0 }, { a: 1 }];
 * remove(objects, 'a'); // => [{ a: 0 }]
 */ export function remove(arr, shouldRemoveElement) {
  return removeToolkit(arr, iteratee(shouldRemoveElement));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvYXJyYXkvcmVtb3ZlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbW92ZSBhcyByZW1vdmVUb29sa2l0IH0gZnJvbSAnLi4vLi4vYXJyYXkvcmVtb3ZlLnRzJztcbmltcG9ydCB7IGl0ZXJhdGVlIH0gZnJvbSAnLi4vdXRpbC9pdGVyYXRlZS50cyc7XG5cbi8qKlxuICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJhc2VkIG9uIGEgcHJlZGljYXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXlMaWtlPFQ+fSBhcnIgLSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHsodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGFycjogQXJyYXlMaWtlPFQ+KSA9PiBib29sZWFufSBzaG91bGRSZW1vdmVFbGVtZW50IC0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtUW119IC0gUmV0dXJucyB0aGUgbW9kaWZpZWQgYXJyYXkgd2l0aCB0aGUgc3BlY2lmaWVkIGVsZW1lbnRzIHJlbW92ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFycmF5ID0gWzEsIDIsIDNdO1xuICogcmVtb3ZlKGFycmF5LCB2YWx1ZSA9PiB2YWx1ZSAlIDIgPT09IDApOyAvLyA9PiBbMSwgM11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZTxUPihcbiAgYXJyOiBBcnJheUxpa2U8VD4sXG4gIHNob3VsZFJlbW92ZUVsZW1lbnQ6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlciwgYXJyOiBBcnJheUxpa2U8VD4pID0+IGJvb2xlYW5cbik6IFRbXTtcblxuLyoqXG4gKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYmFzZWQgb24gYSBwYXJ0aWFsIG9iamVjdCBtYXRjaC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5TGlrZTxUPn0gYXJyIC0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7UGFydGlhbDxUPn0gc2hvdWxkUmVtb3ZlRWxlbWVudCAtIFRoZSBwYXJ0aWFsIG9iamVjdCB0byBtYXRjaCBhZ2FpbnN0IGVhY2ggZWxlbWVudC5cbiAqIEByZXR1cm5zIHtUW119IC0gUmV0dXJucyB0aGUgbW9kaWZpZWQgYXJyYXkgd2l0aCB0aGUgc3BlY2lmaWVkIGVsZW1lbnRzIHJlbW92ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG9iamVjdHMgPSBbeyBhOiAxIH0sIHsgYTogMiB9LCB7IGE6IDMgfV07XG4gKiByZW1vdmUob2JqZWN0cywgeyBhOiAxIH0pOyAvLyA9PiBbeyBhOiAyIH0sIHsgYTogMyB9XVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlPFQ+KGFycjogQXJyYXlMaWtlPFQ+LCBzaG91bGRSZW1vdmVFbGVtZW50OiBQYXJ0aWFsPFQ+KTogVFtdO1xuXG4vKipcbiAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBiYXNlZCBvbiBhIHByb3BlcnR5LXZhbHVlIHBhaXIgbWF0Y2guXG4gKlxuICogQHBhcmFtIHtBcnJheUxpa2U8VD59IGFyciAtIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge1trZXlvZiBULCB1bmtub3duXX0gc2hvdWxkUmVtb3ZlRWxlbWVudCAtIFRoZSBwcm9wZXJ0eS12YWx1ZSBwYWlyIHRvIG1hdGNoIGFnYWluc3QgZWFjaCBlbGVtZW50LlxuICogQHJldHVybnMge1RbXX0gLSBSZXR1cm5zIHRoZSBtb2RpZmllZCBhcnJheSB3aXRoIHRoZSBzcGVjaWZpZWQgZWxlbWVudHMgcmVtb3ZlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgb2JqZWN0cyA9IFt7IGE6IDEgfSwgeyBhOiAyIH0sIHsgYTogMyB9XTtcbiAqIHJlbW92ZShvYmplY3RzLCBbJ2EnLCAxXSk7IC8vID0+IFt7IGE6IDIgfSwgeyBhOiAzIH1dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8VD4oYXJyOiBBcnJheUxpa2U8VD4sIHNob3VsZFJlbW92ZUVsZW1lbnQ6IFtrZXlvZiBULCB1bmtub3duXSk6IFRbXTtcblxuLyoqXG4gKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYmFzZWQgb24gYSBwcm9wZXJ0eSBrZXkuXG4gKlxuICogQHBhcmFtIHtBcnJheUxpa2U8VD59IGFyciAtIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge2tleW9mIFR9IHNob3VsZFJlbW92ZUVsZW1lbnQgLSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtYXRjaCBhZ2FpbnN0IGVhY2ggZWxlbWVudC5cbiAqIEByZXR1cm5zIHtUW119IC0gUmV0dXJucyB0aGUgbW9kaWZpZWQgYXJyYXkgd2l0aCB0aGUgc3BlY2lmaWVkIGVsZW1lbnRzIHJlbW92ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG9iamVjdHMgPSBbeyBhOiAwIH0sIHsgYTogMSB9XTtcbiAqIHJlbW92ZShvYmplY3RzLCAnYScpOyAvLyA9PiBbeyBhOiAwIH1dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmU8VCwgSyBleHRlbmRzIGtleW9mIFQ+KGFycjogQXJyYXlMaWtlPFQ+LCBzaG91bGRSZW1vdmVFbGVtZW50OiBLKTogVFtdO1xuXG4vKipcbiAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBiYXNlZCBvbiB2YXJpb3VzIGNyaXRlcmlhLlxuICpcbiAqIEBwYXJhbSB7QXJyYXlMaWtlPFQ+fSBhcnIgLSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHsodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGFycjogQXJyYXlMaWtlPFQ+KSA9PiBib29sZWFuIHwgUGFydGlhbDxUPiB8IFtrZXlvZiBULCB1bmtub3duXSB8IGtleW9mIFR9IHNob3VsZFJlbW92ZUVsZW1lbnQgLSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLCBhIHBhcnRpYWwgb2JqZWN0LCBhIHByb3BlcnR5LXZhbHVlIHBhaXIsIG9yIGEga2V5IHRvIG1hdGNoIGFnYWluc3QgZWFjaCBlbGVtZW50LlxuICogQHJldHVybnMge1RbXX0gLSBSZXR1cm5zIHRoZSBtb2RpZmllZCBhcnJheSB3aXRoIHRoZSBzcGVjaWZpZWQgZWxlbWVudHMgcmVtb3ZlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVXNpbmcgYSBwcmVkaWNhdGUgZnVuY3Rpb25cbiAqIGNvbnN0IG51bWJlcnMgPSBbMSwgMiwgMywgNCwgNV07XG4gKiByZW1vdmUobnVtYmVycywgdmFsdWUgPT4gdmFsdWUgJSAyID09PSAwKTsgLy8gPT4gWzEsIDMsIDVdXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFVzaW5nIGEgcGFydGlhbCBvYmplY3RcbiAqIGNvbnN0IG9iamVjdHMgPSBbeyBhOiAxIH0sIHsgYTogMiB9LCB7IGE6IDMgfV07XG4gKiByZW1vdmUob2JqZWN0cywgeyBhOiAxIH0pOyAvLyA9PiBbeyBhOiAyIH0sIHsgYTogMyB9XVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2luZyBhIHByb3BlcnR5LXZhbHVlIHBhaXJcbiAqIGNvbnN0IG9iamVjdHMgPSBbeyBhOiAxIH0sIHsgYTogMiB9LCB7IGE6IDMgfV07XG4gKiByZW1vdmUob2JqZWN0cywgWydhJywgMV0pOyAvLyA9PiBbeyBhOiAyIH0sIHsgYTogMyB9XVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2luZyBhIHByb3BlcnR5IGtleVxuICogY29uc3Qgb2JqZWN0cyA9IFt7IGE6IDAgfSwgeyBhOiAxIH1dO1xuICogcmVtb3ZlKG9iamVjdHMsICdhJyk7IC8vID0+IFt7IGE6IDAgfV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZTxUPihcbiAgYXJyOiBBcnJheUxpa2U8VD4sXG4gIHNob3VsZFJlbW92ZUVsZW1lbnQ6XG4gICAgfCAoKHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBhcnI6IEFycmF5TGlrZTxUPikgPT4gYm9vbGVhbilcbiAgICB8IFBhcnRpYWw8VD5cbiAgICB8IFtrZXlvZiBULCB1bmtub3duXVxuICAgIHwga2V5b2YgVFxuKTogVFtdIHtcbiAgcmV0dXJuIHJlbW92ZVRvb2xraXQoYXJyIGFzIFRbXSwgaXRlcmF0ZWUoc2hvdWxkUmVtb3ZlRWxlbWVudCkpO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsVUFBVSxhQUFhLFFBQVEsd0JBQXdCO0FBQ2hFLFNBQVMsUUFBUSxRQUFRLHNCQUFzQjtBQXlEL0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBMEJDLEdBQ0QsT0FBTyxTQUFTLE9BQ2QsR0FBaUIsRUFDakIsbUJBSVc7RUFFWCxPQUFPLGNBQWMsS0FBWSxTQUFTO0FBQzVDIn0=
// denoCacheMetadata=8834365594743342095,17240826842121722874