/**
 * Generate a random number within the given range.
 *
 * If only one argument is provided, a number between `0` and the given number is returned.
 *
 * @param {number} maximum - The upper bound (exclusive).
 * @returns {number} A random number between 0 (inclusive) and maximum (exclusive). The number can be an integer or a decimal.
 * @throws {Error} Throws an error if `maximum` is not greater than `0`.
 *
 * @example
 * const result1 = random(5); // Returns a random number between 0 and 5.
 * const result2 = random(0); // If the `maximum` is less than or equal to 0, an error is thrown.
 */ /**
 * Generate a random number within the given range.
 *
 * @param {number} minimum - The lower bound (inclusive).
 * @param {number} maximum - The upper bound (exclusive).
 * @returns {number} A random number between minimum (inclusive) and maximum (exclusive). The number can be an integer or a decimal.
 * @throws {Error} Throws an error if `maximum` is not greater than `minimum`.
 *
 * @example
 * const result1 = random(0, 5); // Returns a random number between 0 and 5.
 * const result2 = random(5, 0); // If the minimum is greater than the maximum, an error is thrown.
 * const result3 = random(5, 5); // If the minimum is equal to the maximum, an error is thrown.
 */ export function random(minimum, maximum) {
  if (maximum == null) {
    maximum = minimum;
    minimum = 0;
  }
  if (minimum >= maximum) {
    throw new Error('Invalid input: The maximum value must be greater than the minimum value.');
  }
  return Math.random() * (maximum - minimum) + minimum;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9tYXRoL3JhbmRvbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciB3aXRoaW4gdGhlIGdpdmVuIHJhbmdlLlxuICpcbiAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlciBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4aW11bSAtIFRoZSB1cHBlciBib3VuZCAoZXhjbHVzaXZlKS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIDAgKGluY2x1c2l2ZSkgYW5kIG1heGltdW0gKGV4Y2x1c2l2ZSkuIFRoZSBudW1iZXIgY2FuIGJlIGFuIGludGVnZXIgb3IgYSBkZWNpbWFsLlxuICogQHRocm93cyB7RXJyb3J9IFRocm93cyBhbiBlcnJvciBpZiBgbWF4aW11bWAgaXMgbm90IGdyZWF0ZXIgdGhhbiBgMGAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJlc3VsdDEgPSByYW5kb20oNSk7IC8vIFJldHVybnMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gMCBhbmQgNS5cbiAqIGNvbnN0IHJlc3VsdDIgPSByYW5kb20oMCk7IC8vIElmIHRoZSBgbWF4aW11bWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDAsIGFuIGVycm9yIGlzIHRocm93bi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShtYXhpbXVtOiBudW1iZXIpOiBudW1iZXI7XG5cbi8qKlxuICogR2VuZXJhdGUgYSByYW5kb20gbnVtYmVyIHdpdGhpbiB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG1pbmltdW0gLSBUaGUgbG93ZXIgYm91bmQgKGluY2x1c2l2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4aW11bSAtIFRoZSB1cHBlciBib3VuZCAoZXhjbHVzaXZlKS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIG1pbmltdW0gKGluY2x1c2l2ZSkgYW5kIG1heGltdW0gKGV4Y2x1c2l2ZSkuIFRoZSBudW1iZXIgY2FuIGJlIGFuIGludGVnZXIgb3IgYSBkZWNpbWFsLlxuICogQHRocm93cyB7RXJyb3J9IFRocm93cyBhbiBlcnJvciBpZiBgbWF4aW11bWAgaXMgbm90IGdyZWF0ZXIgdGhhbiBgbWluaW11bWAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJlc3VsdDEgPSByYW5kb20oMCwgNSk7IC8vIFJldHVybnMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gMCBhbmQgNS5cbiAqIGNvbnN0IHJlc3VsdDIgPSByYW5kb20oNSwgMCk7IC8vIElmIHRoZSBtaW5pbXVtIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4aW11bSwgYW4gZXJyb3IgaXMgdGhyb3duLlxuICogY29uc3QgcmVzdWx0MyA9IHJhbmRvbSg1LCA1KTsgLy8gSWYgdGhlIG1pbmltdW0gaXMgZXF1YWwgdG8gdGhlIG1heGltdW0sIGFuIGVycm9yIGlzIHRocm93bi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShtaW5pbXVtOiBudW1iZXIsIG1heGltdW06IG51bWJlcik6IG51bWJlcjtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgd2l0aGluIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbWluaW11bSAtIFRoZSBsb3dlciBib3VuZCAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhpbXVtIC0gVGhlIHVwcGVyIGJvdW5kIChleGNsdXNpdmUpLlxuICogQHJldHVybnMge251bWJlcn0gQSByYW5kb20gbnVtYmVyIGJldHdlZW4gbWluaW11bSAoaW5jbHVzaXZlKSBhbmQgbWF4aW11bSAoZXhjbHVzaXZlKS4gVGhlIG51bWJlciBjYW4gYmUgYW4gaW50ZWdlciBvciBhIGRlY2ltYWwuXG4gKiBAdGhyb3dzIHtFcnJvcn0gVGhyb3dzIGFuIGVycm9yIGlmIGBtYXhpbXVtYCBpcyBub3QgZ3JlYXRlciB0aGFuIGBtaW5pbXVtYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgcmVzdWx0MSA9IHJhbmRvbSgwLCA1KTsgLy8gUmV0dXJucyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1LlxuICogY29uc3QgcmVzdWx0MiA9IHJhbmRvbSg1LCAwKTsgLy8gSWYgdGhlIG1pbmltdW0gaXMgZ3JlYXRlciB0aGFuIHRoZSBtYXhpbXVtLCBhbiBlcnJvciBpcyB0aHJvd24uXG4gKiBjb25zdCByZXN1bHQzID0gcmFuZG9tKDUsIDUpOyAvLyBJZiB0aGUgbWluaW11bSBpcyBlcXVhbCB0byB0aGUgbWF4aW11bSwgYW4gZXJyb3IgaXMgdGhyb3duLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG1pbmltdW06IG51bWJlciwgbWF4aW11bT86IG51bWJlcik6IG51bWJlciB7XG4gIGlmIChtYXhpbXVtID09IG51bGwpIHtcbiAgICBtYXhpbXVtID0gbWluaW11bTtcbiAgICBtaW5pbXVtID0gMDtcbiAgfVxuXG4gIGlmIChtaW5pbXVtID49IG1heGltdW0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5wdXQ6IFRoZSBtYXhpbXVtIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBtaW5pbXVtIHZhbHVlLicpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAobWF4aW11bSAtIG1pbmltdW0pICsgbWluaW11bTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0NBWUMsR0FrQkQ7Ozs7Ozs7Ozs7OztDQVlDLEdBQ0QsT0FBTyxTQUFTLE9BQU8sT0FBZSxFQUFFLE9BQWdCO0VBQ3RELElBQUksV0FBVyxNQUFNO0lBQ25CLFVBQVU7SUFDVixVQUFVO0VBQ1o7RUFFQSxJQUFJLFdBQVcsU0FBUztJQUN0QixNQUFNLElBQUksTUFBTTtFQUNsQjtFQUVBLE9BQU8sS0FBSyxNQUFNLEtBQUssQ0FBQyxVQUFVLE9BQU8sSUFBSTtBQUMvQyJ9
// denoCacheMetadata=4983335810028259087,15474337066624674004