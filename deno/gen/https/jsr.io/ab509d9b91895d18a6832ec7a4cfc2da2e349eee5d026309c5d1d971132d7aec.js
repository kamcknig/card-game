import { property } from './property.ts';
import { identity } from '../../function/identity.ts';
import { mapValues as mapValuesToolkit } from '../../object/mapValues.ts';
/**
 * Creates a new object with the same keys as the given object, but with values generated
 * by running each own enumerable property of the object through the iteratee function.
 *
 * @template T - The type of the object.
 * @template K - The type of the keys in the object.
 * @template V - The type of the new values generated by the iteratee function.
 *
 * @param {T} object - The object to iterate over.
 * @param {(value: T[K], key: K, object: T) => V | PropertyKey | readonly PropertyKey[] | null | undefined} [getNewValue] -
 *        The function invoked per own enumerable property, or a path to generate new values.
 * @returns {Record<K, V>} - Returns the new mapped object.
 *
 * @example
 * // Example usage:
 * const obj = { a: 1, b: 2 };
 * const result = mapValues(obj, (value) => value * 2);
 * console.log(result); // { a: 2, b: 4 }
 */ export function mapValues(object, getNewValue) {
  getNewValue = getNewValue ?? identity;
  switch(typeof getNewValue){
    case 'string':
    case 'symbol':
    case 'number':
    case 'object':
      {
        return mapValuesToolkit(object, property(getNewValue));
      }
    case 'function':
      {
        return mapValuesToolkit(object, getNewValue);
      }
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvb2JqZWN0L21hcFZhbHVlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gJy4vcHJvcGVydHkudHMnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi8uLi9mdW5jdGlvbi9pZGVudGl0eS50cyc7XG5pbXBvcnQgeyBtYXBWYWx1ZXMgYXMgbWFwVmFsdWVzVG9vbGtpdCB9IGZyb20gJy4uLy4uL29iamVjdC9tYXBWYWx1ZXMudHMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyB0aGUgZ2l2ZW4gb2JqZWN0LCBidXQgd2l0aCB2YWx1ZXMgZ2VuZXJhdGVkXG4gKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgcHJvcGVydHkgb2YgdGhlIG9iamVjdCB0aHJvdWdoIHRoZSBpdGVyYXRlZSBmdW5jdGlvbi5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QuXG4gKiBAdGVtcGxhdGUgSyAtIFRoZSB0eXBlIG9mIHRoZSBrZXlzIGluIHRoZSBvYmplY3QuXG4gKiBAdGVtcGxhdGUgViAtIFRoZSB0eXBlIG9mIHRoZSBuZXcgdmFsdWVzIGdlbmVyYXRlZCBieSB0aGUgaXRlcmF0ZWUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtUfSBvYmplY3QgLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7KHZhbHVlOiBUW0tdLCBrZXk6IEssIG9iamVjdDogVCkgPT4gVn0gZ2V0TmV3VmFsdWUgLSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgb3duIGVudW1lcmFibGUgcHJvcGVydHkuXG4gKiBAcmV0dXJucyB7UmVjb3JkPEssIFY+fSAtIFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFeGFtcGxlIHVzYWdlOlxuICogY29uc3Qgb2JqID0geyBhOiAxLCBiOiAyIH07XG4gKiBjb25zdCByZXN1bHQgPSBtYXBWYWx1ZXMob2JqLCAodmFsdWUpID0+IHZhbHVlICogMik7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQpOyAvLyB7IGE6IDIsIGI6IDQgfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwVmFsdWVzPFQgZXh0ZW5kcyBvYmplY3QsIEsgZXh0ZW5kcyBrZXlvZiBULCBWPihcbiAgb2JqZWN0OiBULFxuICBnZXROZXdWYWx1ZT86IFByb3BlcnR5S2V5IHwgcmVhZG9ubHkgUHJvcGVydHlLZXlbXSB8IG51bGwgfCB1bmRlZmluZWRcbik6IFJlY29yZDxLLCBWPjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgdGhlIGdpdmVuIG9iamVjdCwgYnV0IHdpdGggdmFsdWVzIGdlbmVyYXRlZFxuICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgdGhyb3VnaCB0aGUgaXRlcmF0ZWUgZnVuY3Rpb24uXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LlxuICogQHRlbXBsYXRlIEsgLSBUaGUgdHlwZSBvZiB0aGUga2V5cyBpbiB0aGUgb2JqZWN0LlxuICogQHRlbXBsYXRlIFYgLSBUaGUgdHlwZSBvZiB0aGUgbmV3IHZhbHVlcyBnZW5lcmF0ZWQgYnkgdGhlIGl0ZXJhdGVlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7VH0gb2JqZWN0IC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0geyh2YWx1ZTogVFtLXSwga2V5OiBLLCBvYmplY3Q6IFQpID0+IFZ9IGdldE5ld1ZhbHVlIC0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIG93biBlbnVtZXJhYmxlIHByb3BlcnR5LlxuICogQHJldHVybnMge1JlY29yZDxLLCBWPn0gLSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXhhbXBsZSB1c2FnZTpcbiAqIGNvbnN0IG9iaiA9IHsgYTogMSwgYjogMiB9O1xuICogY29uc3QgcmVzdWx0ID0gbWFwVmFsdWVzKG9iaiwgKHZhbHVlKSA9PiB2YWx1ZSAqIDIpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8geyBhOiAyLCBiOiA0IH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcFZhbHVlczxUIGV4dGVuZHMgb2JqZWN0LCBLIGV4dGVuZHMga2V5b2YgVCwgVj4oXG4gIG9iamVjdDogVCxcbiAgZ2V0TmV3VmFsdWU6ICh2YWx1ZTogVFtLXSwga2V5OiBLLCBvYmplY3Q6IFQpID0+IFZcbik6IFJlY29yZDxLLCBWPjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgdGhlIGdpdmVuIG9iamVjdCwgYnV0IHdpdGggdmFsdWVzIGdlbmVyYXRlZFxuICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgdGhyb3VnaCB0aGUgaXRlcmF0ZWUgZnVuY3Rpb24uXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LlxuICogQHRlbXBsYXRlIEsgLSBUaGUgdHlwZSBvZiB0aGUga2V5cyBpbiB0aGUgb2JqZWN0LlxuICogQHRlbXBsYXRlIFYgLSBUaGUgdHlwZSBvZiB0aGUgbmV3IHZhbHVlcyBnZW5lcmF0ZWQgYnkgdGhlIGl0ZXJhdGVlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7VH0gb2JqZWN0IC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0geyh2YWx1ZTogVFtLXSwga2V5OiBLLCBvYmplY3Q6IFQpID0+IFYgfCBQcm9wZXJ0eUtleSB8IHJlYWRvbmx5IFByb3BlcnR5S2V5W10gfCBudWxsIHwgdW5kZWZpbmVkfSBbZ2V0TmV3VmFsdWVdIC1cbiAqICAgICAgICBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgb3duIGVudW1lcmFibGUgcHJvcGVydHksIG9yIGEgcGF0aCB0byBnZW5lcmF0ZSBuZXcgdmFsdWVzLlxuICogQHJldHVybnMge1JlY29yZDxLLCBWPn0gLSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXhhbXBsZSB1c2FnZTpcbiAqIGNvbnN0IG9iaiA9IHsgYTogMSwgYjogMiB9O1xuICogY29uc3QgcmVzdWx0ID0gbWFwVmFsdWVzKG9iaiwgKHZhbHVlKSA9PiB2YWx1ZSAqIDIpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8geyBhOiAyLCBiOiA0IH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcFZhbHVlczxUIGV4dGVuZHMgb2JqZWN0LCBLIGV4dGVuZHMga2V5b2YgVCwgVj4oXG4gIG9iamVjdDogVCxcbiAgZ2V0TmV3VmFsdWU/OiBQcm9wZXJ0eUtleSB8IHJlYWRvbmx5IFByb3BlcnR5S2V5W10gfCBudWxsIHwgdW5kZWZpbmVkIHwgKCh2YWx1ZTogVFtLXSwga2V5OiBLLCBvYmplY3Q6IFQpID0+IFYpXG4pOiBSZWNvcmQ8SywgVj4ge1xuICBnZXROZXdWYWx1ZSA9IGdldE5ld1ZhbHVlID8/IChpZGVudGl0eSBhcyAodmFsdWU6IFRbS10sIGtleTogSywgb2JqZWN0OiBUKSA9PiBWKTtcblxuICBzd2l0Y2ggKHR5cGVvZiBnZXROZXdWYWx1ZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ29iamVjdCc6IHtcbiAgICAgIHJldHVybiBtYXBWYWx1ZXNUb29sa2l0KG9iamVjdCwgcHJvcGVydHkoZ2V0TmV3VmFsdWUpKTtcbiAgICB9XG4gICAgY2FzZSAnZnVuY3Rpb24nOiB7XG4gICAgICByZXR1cm4gbWFwVmFsdWVzVG9vbGtpdChvYmplY3QsIGdldE5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFFBQVEsUUFBUSxnQkFBZ0I7QUFDekMsU0FBUyxRQUFRLFFBQVEsNkJBQTZCO0FBQ3RELFNBQVMsYUFBYSxnQkFBZ0IsUUFBUSw0QkFBNEI7QUFnRDFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FrQkMsR0FDRCxPQUFPLFNBQVMsVUFDZCxNQUFTLEVBQ1QsV0FBK0c7RUFFL0csY0FBYyxlQUFnQjtFQUU5QixPQUFRLE9BQU87SUFDYixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO01BQVU7UUFDYixPQUFPLGlCQUFpQixRQUFRLFNBQVM7TUFDM0M7SUFDQSxLQUFLO01BQVk7UUFDZixPQUFPLGlCQUFpQixRQUFRO01BQ2xDO0VBQ0Y7QUFDRiJ9
// denoCacheMetadata=14678582736816664987,1275256514642480324