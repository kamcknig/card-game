/**
 * Regular expression pattern to split strings into words for various case conversions
 *
 * This pattern matches sequences of characters in a string, considering the following cases:
 * - Sequences of two or more uppercase letters followed by an uppercase letter and lowercase letters or digits (for acronyms)
 * - Sequences of one uppercase letter optionally followed by lowercase letters and digits
 * - Single uppercase letters
 * - Sequences of digits
 * - Emojis and other Unicode characters
 *
 * The resulting match can be used to convert camelCase, snake_case, kebab-case, and other mixed formats into
 * a consistent format like snake case. It also supports emojis and other Unicode characters.
 *
 * @example
 * const matches = 'camelCaseHTTPRequestüöÄ'.match(CASE_SPLIT_PATTERN);
 * // matches: ['camel', 'Case', 'HTTP', 'Request', 'üöÄ']
 */
export const CASE_SPLIT_PATTERN =
  /\p{Lu}?\p{Ll}+|[0-9]+|\p{Lu}+(?!\p{Ll})|\p{Emoji_Presentation}|\p{Extended_Pictographic}|\p{L}+/gu;

/**
 * Splits `string` into an array of its words, treating spaces and punctuation marks as separators.
 *
 * @param {string} str The string to inspect.
 * @param {RegExp | string} [pattern] The pattern to match words.
 * @returns {string[]} Returns the words of `string`.
 *
 * @example
 * words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * words('camelCaseHTTPRequestüöÄ');
 * // => ['camel', 'Case', 'HTTP', 'Request', 'üöÄ']
 *
 * words('Luned√¨ 18 Set')
 * // => ['Luned√¨', '18', 'Set']
 */
export function words(str: string): string[] {
  return Array.from(str.match(CASE_SPLIT_PATTERN) ?? []);
}

// denoCacheMetadata={"headers":{"x-goog-hash":"crc32c=9kNTsA==,md5=O5n3/yqnzVM3/Y2qRu7unQ==","x-goog-storage-class":"STANDARD","x-content-type-options":"nosniff","server":"UploadServer","cache-control":"public, max-age=31536000, immutable","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","expires":"Fri, 26 Jun 2026 21:45:35 GMT","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","cross-origin-resource-policy":"cross-origin","age":"0","accept-ranges":"bytes","access-control-allow-origin":"*","x-goog-stored-content-length":"1633","x-guploader-uploadid":"ABgVH8-8mM7tWJZxoJhfD2Z2dkOU2_PPiw0WOfg2zCaFeQ4Wjn7NSUiuY43f-54bShgiRjhZg5hauH8","date":"Thu, 26 Jun 2025 21:45:35 GMT","x-jsr-cache-id":"ATL","content-length":"1633","x-goog-generation":"1741509574979561","x-goog-metageneration":"1","content-type":"text/typescript","access-control-expose-headers":"*","via":"1.1 google","x-jsr-cache-status":"revalidated","etag":"\"3b99f7ff2aa7cd5337fd8daa46eeee9d\"","x-goog-stored-content-encoding":"identity","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-robots-tag":"noindex"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/string/words.ts","time":1750974334}