import { property } from './property.ts';
import { identity } from '../../function/identity.ts';
import { mapKeys as mapKeysToolkit } from '../../object/mapKeys.ts';
/**
 * Creates a new object with the same values as the given object, but with keys generated
 * by running each own enumerable property of the object through the iteratee function.
 *
 * @template T - The type of the object.
 * @template K1 - The type of the keys in the object.
 * @template K2 - The type of the new keys generated by the iteratee function.
 *
 * @param {T} object - The object to iterate over.
 * @param {(value: T[K1], key: K1, object: T) => K2} [getNewKey] - The function invoked per own enumerable property, or a path to generate new keys.
 * @returns {Record<K2, T[K1]>} - Returns the new mapped object.
 *
 * @example
 * // Example usage:
 * const obj = { a: 1, b: 2 };
 * const result = mapKeys(obj, (value, key) => key + value);
 * console.log(result); // { a1: 1, b2: 2 }
 */ export function mapKeys(object, getNewKey) {
  getNewKey = getNewKey ?? identity;
  switch(typeof getNewKey){
    case 'string':
    case 'symbol':
    case 'number':
    case 'object':
      {
        return mapKeysToolkit(object, property(getNewKey));
      }
    case 'function':
      {
        return mapKeysToolkit(object, getNewKey);
      }
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvb2JqZWN0L21hcEtleXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICcuL3Byb3BlcnR5LnRzJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vLi4vZnVuY3Rpb24vaWRlbnRpdHkudHMnO1xuaW1wb3J0IHsgbWFwS2V5cyBhcyBtYXBLZXlzVG9vbGtpdCB9IGZyb20gJy4uLy4uL29iamVjdC9tYXBLZXlzLnRzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgZ2l2ZW4gb2JqZWN0LCBidXQgd2l0aCBrZXlzIGdlbmVyYXRlZFxuICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgdGhyb3VnaCB0aGUgaXRlcmF0ZWUgZnVuY3Rpb24uXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LlxuICogQHRlbXBsYXRlIEsxIC0gVGhlIHR5cGUgb2YgdGhlIGtleXMgaW4gdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge1R9IG9iamVjdCAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtQcm9wZXJ0eUtleSB8IFByb3BlcnR5S2V5W119IGdldE5ld0tleSAtIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQgdG8gZ2VuZXJhdGUgdGhlIG5ldyBrZXlzLlxuICogQHJldHVybnMge1JlY29yZDxQcm9wZXJ0eUtleSwgVFtLMV0+fSAtIFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFeGFtcGxlIHVzYWdlOlxuICogY29uc3Qgb2JqID0geyBhOiAxLCBiOiAyIH07XG4gKiBjb25zdCByZXN1bHQgPSBtYXBLZXlzKG9iaiwgKHZhbHVlLCBrZXkpID0+IGtleSArIHZhbHVlKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIHsgYTE6IDEsIGIyOiAyIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEtleXM8VCBleHRlbmRzIG9iamVjdD4oXG4gIG9iamVjdDogVCxcbiAgZ2V0TmV3S2V5PzogUHJvcGVydHlLZXkgfCByZWFkb25seSBQcm9wZXJ0eUtleVtdXG4pOiBSZWNvcmQ8UHJvcGVydHlLZXksIFRba2V5b2YgVF0+O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgdmFsdWVzIGFzIHRoZSBnaXZlbiBvYmplY3QsIGJ1dCB3aXRoIGtleXMgZ2VuZXJhdGVkXG4gKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgcHJvcGVydHkgb2YgdGhlIG9iamVjdCB0aHJvdWdoIHRoZSBpdGVyYXRlZSBmdW5jdGlvbi5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QuXG4gKiBAdGVtcGxhdGUgSzEgLSBUaGUgdHlwZSBvZiB0aGUga2V5cyBpbiB0aGUgb2JqZWN0LlxuICogQHRlbXBsYXRlIEsyIC0gVGhlIHR5cGUgb2YgdGhlIG5ldyBrZXlzIGdlbmVyYXRlZCBieSB0aGUgaXRlcmF0ZWUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtUfSBvYmplY3QgLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7KHZhbHVlOiBUW0sxXSwga2V5OiBLMSwgb2JqZWN0OiBUKSA9PiBLMn0gZ2V0TmV3S2V5IC0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIG93biBlbnVtZXJhYmxlIHByb3BlcnR5LlxuICogQHJldHVybnMge1JlY29yZDxLMiwgVFtLMV0+fSAtIFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFeGFtcGxlIHVzYWdlOlxuICogY29uc3Qgb2JqID0geyBhOiAxLCBiOiAyIH07XG4gKiBjb25zdCByZXN1bHQgPSBtYXBLZXlzKG9iaiwgKHZhbHVlLCBrZXkpID0+IGtleSArIHZhbHVlKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIHsgYTE6IDEsIGIyOiAyIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEtleXM8VCBleHRlbmRzIG9iamVjdCwgSzEgZXh0ZW5kcyBrZXlvZiBULCBLMiBleHRlbmRzIFByb3BlcnR5S2V5PihcbiAgb2JqZWN0OiBULFxuICBnZXROZXdLZXk/OiAodmFsdWU6IFRbSzFdLCBrZXk6IEsxLCBvYmplY3Q6IFQpID0+IEsyXG4pOiBSZWNvcmQ8SzIsIFRbSzFdPjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGUgZ2l2ZW4gb2JqZWN0LCBidXQgd2l0aCBrZXlzIGdlbmVyYXRlZFxuICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgdGhyb3VnaCB0aGUgaXRlcmF0ZWUgZnVuY3Rpb24uXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LlxuICogQHRlbXBsYXRlIEsxIC0gVGhlIHR5cGUgb2YgdGhlIGtleXMgaW4gdGhlIG9iamVjdC5cbiAqIEB0ZW1wbGF0ZSBLMiAtIFRoZSB0eXBlIG9mIHRoZSBuZXcga2V5cyBnZW5lcmF0ZWQgYnkgdGhlIGl0ZXJhdGVlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7VH0gb2JqZWN0IC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0geyh2YWx1ZTogVFtLMV0sIGtleTogSzEsIG9iamVjdDogVCkgPT4gSzJ9IFtnZXROZXdLZXldIC0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIG93biBlbnVtZXJhYmxlIHByb3BlcnR5LCBvciBhIHBhdGggdG8gZ2VuZXJhdGUgbmV3IGtleXMuXG4gKiBAcmV0dXJucyB7UmVjb3JkPEsyLCBUW0sxXT59IC0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEV4YW1wbGUgdXNhZ2U6XG4gKiBjb25zdCBvYmogPSB7IGE6IDEsIGI6IDIgfTtcbiAqIGNvbnN0IHJlc3VsdCA9IG1hcEtleXMob2JqLCAodmFsdWUsIGtleSkgPT4ga2V5ICsgdmFsdWUpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8geyBhMTogMSwgYjI6IDIgfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwS2V5czxUIGV4dGVuZHMgb2JqZWN0LCBLIGV4dGVuZHMgUHJvcGVydHlLZXk+KFxuICBvYmplY3Q6IFQsXG4gIGdldE5ld0tleT86IFByb3BlcnR5S2V5IHwgcmVhZG9ubHkgUHJvcGVydHlLZXlbXSB8ICgodmFsdWU6IFRba2V5b2YgVF0sIGtleToga2V5b2YgVCwgb2JqZWN0OiBUKSA9PiBLKVxuKTogUmVjb3JkPEssIFRba2V5b2YgVF0+IHtcbiAgZ2V0TmV3S2V5ID0gZ2V0TmV3S2V5ID8/IChpZGVudGl0eSBhcyAodmFsdWU6IFRba2V5b2YgVF0sIGtleToga2V5b2YgVCwgb2JqZWN0OiBUKSA9PiBLKTtcblxuICBzd2l0Y2ggKHR5cGVvZiBnZXROZXdLZXkpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdvYmplY3QnOiB7XG4gICAgICByZXR1cm4gbWFwS2V5c1Rvb2xraXQob2JqZWN0LCBwcm9wZXJ0eShnZXROZXdLZXkpKTtcbiAgICB9XG4gICAgY2FzZSAnZnVuY3Rpb24nOiB7XG4gICAgICByZXR1cm4gbWFwS2V5c1Rvb2xraXQob2JqZWN0LCBnZXROZXdLZXkpO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsUUFBUSxRQUFRLGdCQUFnQjtBQUN6QyxTQUFTLFFBQVEsUUFBUSw2QkFBNkI7QUFDdEQsU0FBUyxXQUFXLGNBQWMsUUFBUSwwQkFBMEI7QUErQ3BFOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNELE9BQU8sU0FBUyxRQUNkLE1BQVMsRUFDVCxTQUFzRztFQUV0RyxZQUFZLGFBQWM7RUFFMUIsT0FBUSxPQUFPO0lBQ2IsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztNQUFVO1FBQ2IsT0FBTyxlQUFlLFFBQVEsU0FBUztNQUN6QztJQUNBLEtBQUs7TUFBWTtRQUNmLE9BQU8sZUFBZSxRQUFRO01BQ2hDO0VBQ0Y7QUFDRiJ9
// denoCacheMetadata=12608955706216193360,14176356230737484960