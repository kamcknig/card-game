import { isBuffer } from '../../predicate/isBuffer.ts';
import { isPrototype } from '../_internal/isPrototype.ts';
import { isArrayLike } from '../predicate/isArrayLike.ts';
import { isTypedArray } from '../predicate/isTypedArray.ts';
import { times } from '../util/times.ts';

/**
 * This function retrieves the names of string-keyed properties from an object, including those inherited from its prototype.
 *
 * - If the value is not an object, it is converted to an object.
 * - Array-like objects are treated like arrays.
 * - Sparse arrays with some missing indices are treated like dense arrays.
 * - If the value is `null` or `undefined`, an empty array is returned.
 * - When handling prototype objects, the `constructor` property is excluded from the results.
 *
 * @param {unknown} [object] - The object to inspect for keys.
 * @returns {string[]} An array of string keys from the object.
 *
 * @example
 * const obj = { a: 1, b: 2 };
 * console.log(keysIn(obj)); // ['a', 'b']
 *
 * const arr = [1, 2, 3];
 * console.log(keysIn(arr)); // ['0', '1', '2']
 *
 * function Foo() {}
 * Foo.prototype.a = 1;
 * console.log(keysIn(new Foo())); // ['a']
 */
export function keysIn(object?: unknown): string[] {
  if (object == null) {
    return [];
  }

  switch (typeof object) {
    case 'object':
    case 'function': {
      if (isArrayLike(object)) {
        return arrayLikeKeysIn(object);
      }

      if (isPrototype(object)) {
        return prototypeKeysIn(object);
      }

      return keysInImpl(object);
    }

    default: {
      return keysInImpl(Object(object));
    }
  }
}

function keysInImpl(object: object): string[] {
  const result: string[] = [];

  for (const key in object) {
    result.push(key);
  }

  return result;
}

function prototypeKeysIn(object: object): string[] {
  const keys = keysInImpl(object);

  return keys.filter(key => key !== 'constructor');
}

function arrayLikeKeysIn(object: ArrayLike<any>): string[] {
  const indices = times(object.length, index => `${index}`);

  const filteredKeys = new Set(indices);

  if (isBuffer(object)) {
    // Node.js 0.10 has enumerable non-index properties on buffers.
    filteredKeys.add('offset');
    filteredKeys.add('parent');
  }

  if (isTypedArray(object)) {
    // PhantomJS 2 has enumerable non-index properties on typed arrays.
    filteredKeys.add('buffer');
    filteredKeys.add('byteLength');
    filteredKeys.add('byteOffset');
  }

  return [...indices, ...keysInImpl(object).filter(key => !filteredKeys.has(key))];
}

// denoCacheMetadata={"headers":{"access-control-expose-headers":"*","cache-control":"public, max-age=31536000, immutable","x-goog-stored-content-encoding":"identity","age":"0","x-goog-stored-content-length":"2526","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-jsr-cache-status":"revalidated","x-guploader-uploadid":"ABgVH8_-nSovBYI8Ng4rrd0jMM6tKX30oS-KY8ugbA354sFrabr5qQBrfFrSUykY7km7qQhqICky1CQ","x-goog-metageneration":"1","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","etag":"\"d7002ee157d7eca82c41b26141956ef8\"","date":"Thu, 26 Jun 2025 21:45:35 GMT","x-robots-tag":"noindex","expires":"Fri, 26 Jun 2026 21:45:35 GMT","cross-origin-resource-policy":"cross-origin","x-goog-hash":"crc32c=MNlP4Q==,md5=1wAu4VfX7KgsQbJhQZVu+A==","accept-ranges":"bytes","server":"UploadServer","access-control-allow-origin":"*","x-goog-storage-class":"STANDARD","content-type":"text/typescript","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","content-length":"2526","via":"1.1 google","x-jsr-cache-id":"ATL","x-goog-generation":"1741509575532086"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/object/keysIn.ts","time":1750974334}