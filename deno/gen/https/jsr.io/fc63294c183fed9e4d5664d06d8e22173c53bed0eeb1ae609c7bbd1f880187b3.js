import { sample as sampleToolkit } from '../../array/sample.ts';
import { toArray } from '../_internal/toArray.ts';
import { isArrayLike } from '../predicate/isArrayLike.ts';
/**
 * The implementation for the overloaded sample function.
 *
 * This function takes an array, string, or object and returns a single element selected randomly.
 * If the input is empty, or if it's null or undefined, the function returns `undefined`.
 *
 * @template T - The type of elements in the collection.
 * @param {ArrayLike<T> | Record<string, T>} collection - The collection to sample from.
 * @returns {T | string | undefined} A random element from the collection, or `undefined` if the collection is empty or invalid.
 */ export function sample(collection) {
  if (collection == null) {
    return undefined;
  }
  if (isArrayLike(collection)) {
    return sampleToolkit(toArray(collection));
  }
  return sampleToolkit(Object.values(collection));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvYXJyYXkvc2FtcGxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNhbXBsZSBhcyBzYW1wbGVUb29sa2l0IH0gZnJvbSAnLi4vLi4vYXJyYXkvc2FtcGxlLnRzJztcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuLi9faW50ZXJuYWwvdG9BcnJheS50cyc7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3ByZWRpY2F0ZS9pc0FycmF5TGlrZS50cyc7XG5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSBlbGVtZW50IGZyb20gYW4gYXJyYXkuXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VFtdfSBhcnJheSAtIFRoZSBhcnJheSB0byBzYW1wbGUgZnJvbS5cbiAqIEByZXR1cm5zIHtUIHwgdW5kZWZpbmVkfSBBIHJhbmRvbSBlbGVtZW50IGZyb20gdGhlIGFycmF5LCBvciBgdW5kZWZpbmVkYCBpZiB0aGUgYXJyYXkgaXMgZW1wdHkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFycmF5ID0gWzEsIDIsIDNdO1xuICogY29uc3QgcmVzdWx0ID0gc2FtcGxlKGFycmF5KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIE91dHB1dDogMSwgMiwgb3IgMyAocmFuZG9tbHkgc2VsZWN0ZWQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW1wbGU8VD4oYXJyYXk6IHJlYWRvbmx5IFRbXSk6IFQgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSBjaGFyYWN0ZXIgZnJvbSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzYW1wbGUgZnJvbS5cbiAqIEByZXR1cm5zIHtzdHJpbmcgfCB1bmRlZmluZWR9IEEgcmFuZG9tIGNoYXJhY3RlciBmcm9tIHRoZSBzdHJpbmcsIG9yIGB1bmRlZmluZWRgIGlmIHRoZSBzdHJpbmcgaXMgZW1wdHkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHN0ciA9IFwiaGVsbG9cIjtcbiAqIGNvbnN0IHJlc3VsdCA9IHNhbXBsZShzdHIpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8gT3V0cHV0OiAnaCcsICdlJywgJ2wnLCAnbCcsIG9yICdvJyAocmFuZG9tbHkgc2VsZWN0ZWQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW1wbGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSBlbGVtZW50IGZyb20gYW4gYXJyYXkuXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7QXJyYXlMaWtlPFQ+fSBhcnJheSAtIFRoZSBhcnJheS1saWtlIG9iamVjdCB0byBzYW1wbGUgZnJvbS5cbiAqIEByZXR1cm5zIHtUIHwgdW5kZWZpbmVkfSBBIHJhbmRvbSBlbGVtZW50IGZyb20gdGhlIGFycmF5LCBvciBgdW5kZWZpbmVkYCBpZiB0aGUgYXJyYXkgaXMgZW1wdHkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFycmF5TGlrZTogQXJyYXlMaWtlPHN0cmluZz4gPSB7IDA6ICdhJywgMTogJ2InLCAyOiAnYycsIGxlbmd0aDogMyB9O1xuICogY29uc3QgcmVzdWx0ID0gc2FtcGxlKGFycmF5TGlrZSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQpOyAvLyBPdXRwdXQ6ICdhJywgJ2InLCBvciAnYycgKHJhbmRvbWx5IHNlbGVjdGVkKVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FtcGxlPFQ+KGFycmF5OiBBcnJheUxpa2U8VD4pOiBUIHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gdmFsdWUgZnJvbSBhbiBvYmplY3QuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiB2YWx1ZXMgaW4gdGhlIG9iamVjdC5cbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgVD59IG9iaiAtIFRoZSBvYmplY3QgdG8gc2FtcGxlIGZyb20uXG4gKiBAcmV0dXJucyB7VCB8IHVuZGVmaW5lZH0gQSByYW5kb20gdmFsdWUgZnJvbSB0aGUgb2JqZWN0LCBvciBgdW5kZWZpbmVkYCBpZiB0aGUgb2JqZWN0IGlzIGVtcHR5LlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBvYmogPSB7IGE6IDEsIGI6IDIsIGM6IDMgfTtcbiAqIGNvbnN0IHJlc3VsdCA9IHNhbXBsZShvYmopO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8gT3V0cHV0OiAxLCAyLCBvciAzIChyYW5kb21seSBzZWxlY3RlZClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhbXBsZTxUPihvYmo6IFJlY29yZDxzdHJpbmcsIFQ+KTogVCB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBhbiBhcnJheS1saWtlIG9iamVjdCBvciBhIHJlZ3VsYXIgb2JqZWN0LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXktbGlrZSBvYmplY3QgKHN1Y2ggYXMgYW4gYXJyYXkgb3Igc3RyaW5nKSBvciBhIHJlZ3VsYXIgb2JqZWN0LFxuICogYW5kIHJldHVybnMgYSByYW5kb21seSBzZWxlY3RlZCBlbGVtZW50IG9yIHZhbHVlLiBJZiB0aGUgY29sbGVjdGlvbiBpcyBlbXB0eSBvciBpbnZhbGlkLCBpdCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIHR5cGUgb2YgZWxlbWVudHMgaW4gdGhlIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge0FycmF5TGlrZTxUPiB8IFJlY29yZDxzdHJpbmcsIFQ+fSBjb2xsZWN0aW9uIC0gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlIGZyb20uXG4gKiBAcmV0dXJucyB7VCB8IHN0cmluZyB8IHVuZGVmaW5lZH0gQSByYW5kb20gZWxlbWVudCBmcm9tIHRoZSBjb2xsZWN0aW9uLCBvciBgdW5kZWZpbmVkYCBpZiB0aGUgY29sbGVjdGlvbiBpcyBlbXB0eSBvciBpbnZhbGlkLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcnJheSBleGFtcGxlXG4gKiBjb25zdCBhcnJheSA9IFsxLCAyLCAzXTtcbiAqIGNvbnN0IHJlc3VsdCA9IHNhbXBsZShhcnJheSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQpOyAvLyBPdXRwdXQ6IDEsIDIsIG9yIDMgKHJhbmRvbWx5IHNlbGVjdGVkKVxuICpcbiAqIC8vIFN0cmluZyBleGFtcGxlXG4gKiBjb25zdCBzdHIgPSAnYWJjJztcbiAqIGNvbnN0IHJlc3VsdDIgPSBzYW1wbGUoc3RyKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdDIpOyAvLyBPdXRwdXQ6ICdhJywgJ2InLCBvciAnYycgKHJhbmRvbWx5IHNlbGVjdGVkKVxuICpcbiAqIC8vIE9iamVjdCBleGFtcGxlXG4gKiBjb25zdCBvYmogPSB7IGE6IDEsIGI6IDIsIGM6IDMgfTtcbiAqIGNvbnN0IHJlc3VsdDMgPSBzYW1wbGUob2JqKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdDMpOyAvLyBPdXRwdXQ6IDEsIDIsIG9yIDMgKHJhbmRvbWx5IHNlbGVjdGVkKVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FtcGxlPFQ+KGNvbGxlY3Rpb246IEFycmF5TGlrZTxUPiB8IFJlY29yZDxzdHJpbmcsIFQ+KTogVCB8IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBvdmVybG9hZGVkIHNhbXBsZSBmdW5jdGlvbi5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGFuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBhbmQgcmV0dXJucyBhIHNpbmdsZSBlbGVtZW50IHNlbGVjdGVkIHJhbmRvbWx5LlxuICogSWYgdGhlIGlucHV0IGlzIGVtcHR5LCBvciBpZiBpdCdzIG51bGwgb3IgdW5kZWZpbmVkLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIGVsZW1lbnRzIGluIHRoZSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtBcnJheUxpa2U8VD4gfCBSZWNvcmQ8c3RyaW5nLCBUPn0gY29sbGVjdGlvbiAtIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZSBmcm9tLlxuICogQHJldHVybnMge1QgfCBzdHJpbmcgfCB1bmRlZmluZWR9IEEgcmFuZG9tIGVsZW1lbnQgZnJvbSB0aGUgY29sbGVjdGlvbiwgb3IgYHVuZGVmaW5lZGAgaWYgdGhlIGNvbGxlY3Rpb24gaXMgZW1wdHkgb3IgaW52YWxpZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhbXBsZTxUPihjb2xsZWN0aW9uOiBBcnJheUxpa2U8VD4gfCBSZWNvcmQ8c3RyaW5nLCBUPik6IFQgfCBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgIHJldHVybiBzYW1wbGVUb29sa2l0KHRvQXJyYXkoY29sbGVjdGlvbikpO1xuICB9XG5cbiAgcmV0dXJuIHNhbXBsZVRvb2xraXQoT2JqZWN0LnZhbHVlcyhjb2xsZWN0aW9uKSk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxVQUFVLGFBQWEsUUFBUSx3QkFBd0I7QUFDaEUsU0FBUyxPQUFPLFFBQVEsMEJBQTBCO0FBQ2xELFNBQVMsV0FBVyxRQUFRLDhCQUE4QjtBQXFGMUQ7Ozs7Ozs7OztDQVNDLEdBQ0QsT0FBTyxTQUFTLE9BQVUsVUFBNEM7RUFDcEUsSUFBSSxjQUFjLE1BQU07SUFDdEIsT0FBTztFQUNUO0VBRUEsSUFBSSxZQUFZLGFBQWE7SUFDM0IsT0FBTyxjQUFjLFFBQVE7RUFDL0I7RUFFQSxPQUFPLGNBQWMsT0FBTyxNQUFNLENBQUM7QUFDckMifQ==
// denoCacheMetadata=17117343051429265017,13931881674543304557