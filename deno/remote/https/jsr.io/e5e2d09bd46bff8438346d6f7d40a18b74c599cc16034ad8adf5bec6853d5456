/**
 * Generate a random number within the given range.
 *
 * If only one argument is provided, a number between `0` and the given number is returned.
 *
 * @param {number} maximum - The upper bound (exclusive).
 * @returns {number} A random number between 0 (inclusive) and maximum (exclusive). The number can be an integer or a decimal.
 * @throws {Error} Throws an error if `maximum` is not greater than `0`.
 *
 * @example
 * const result1 = random(5); // Returns a random number between 0 and 5.
 * const result2 = random(0); // If the `maximum` is less than or equal to 0, an error is thrown.
 */
export function random(maximum: number): number;

/**
 * Generate a random number within the given range.
 *
 * @param {number} minimum - The lower bound (inclusive).
 * @param {number} maximum - The upper bound (exclusive).
 * @returns {number} A random number between minimum (inclusive) and maximum (exclusive). The number can be an integer or a decimal.
 * @throws {Error} Throws an error if `maximum` is not greater than `minimum`.
 *
 * @example
 * const result1 = random(0, 5); // Returns a random number between 0 and 5.
 * const result2 = random(5, 0); // If the minimum is greater than the maximum, an error is thrown.
 * const result3 = random(5, 5); // If the minimum is equal to the maximum, an error is thrown.
 */
export function random(minimum: number, maximum: number): number;

/**
 * Generate a random number within the given range.
 *
 * @param {number} minimum - The lower bound (inclusive).
 * @param {number} maximum - The upper bound (exclusive).
 * @returns {number} A random number between minimum (inclusive) and maximum (exclusive). The number can be an integer or a decimal.
 * @throws {Error} Throws an error if `maximum` is not greater than `minimum`.
 *
 * @example
 * const result1 = random(0, 5); // Returns a random number between 0 and 5.
 * const result2 = random(5, 0); // If the minimum is greater than the maximum, an error is thrown.
 * const result3 = random(5, 5); // If the minimum is equal to the maximum, an error is thrown.
 */
export function random(minimum: number, maximum?: number): number {
  if (maximum == null) {
    maximum = minimum;
    minimum = 0;
  }

  if (minimum >= maximum) {
    throw new Error('Invalid input: The maximum value must be greater than the minimum value.');
  }

  return Math.random() * (maximum - minimum) + minimum;
}

// denoCacheMetadata={"headers":{"x-robots-tag":"noindex","x-goog-stored-content-length":"2404","x-goog-storage-class":"STANDARD","cache-control":"public, max-age=31536000, immutable","age":"0","access-control-allow-origin":"*","access-control-expose-headers":"*","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","expires":"Fri, 26 Jun 2026 21:45:35 GMT","x-jsr-cache-id":"ATL","x-goog-hash":"crc32c=MyacQA==,md5=J6y4OXEd9HiSnXwEQN47iA==","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","x-goog-metageneration":"1","content-type":"text/typescript","x-goog-generation":"1741509575309933","cross-origin-resource-policy":"cross-origin","x-guploader-uploadid":"ABgVH89UxSh_MMqOY9-x460xay8fiCfSjGCX26nOb8C-oK1w7Ow4XpcGcp1H4Ao8xOi0qfS4ePYrWTg","accept-ranges":"bytes","content-length":"2404","server":"UploadServer","via":"1.1 google","etag":"\"27acb839711df478929d7c0440de3b88\"","date":"Thu, 26 Jun 2025 21:45:35 GMT","x-goog-stored-content-encoding":"identity","x-jsr-cache-status":"revalidated"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/math/random.ts","time":1750974334}