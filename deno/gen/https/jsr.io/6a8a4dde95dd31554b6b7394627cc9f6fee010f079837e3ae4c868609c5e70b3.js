import { property } from './property.ts';
import { findKey as findKeyToolkit } from '../../object/index.ts';
import { isObject } from '../predicate/isObject.ts';
import { matches } from '../predicate/matches.ts';
import { matchesProperty } from '../predicate/matchesProperty.ts';
/**
 * Finds the key of the first element that matches the given predicate.
 *
 * This function determines the type of the predicate and delegates the search
 * to the appropriate helper function. It supports predicates as functions, objects,
 * arrays, or strings.
 *
 * @template T - The type of the object.
 * @param {T | null | undefined} obj - The object to inspect.
 * @param {(value: T[keyof T], key: keyof T, obj: T) => boolean | Partial<T[keyof T]> | [keyof T[keyof T], any] | keyof T[keyof T]} predicate - The predicate to match.
 * @returns {keyof T | undefined} Returns the key of the matched element, else `undefined`.
 */ export function findKey(obj, predicate) {
  if (!isObject(obj)) {
    return undefined;
  }
  return findKeyImpl(obj, predicate);
}
function findKeyImpl(obj, predicate) {
  if (typeof predicate === 'function') {
    return findKeyToolkit(obj, predicate);
  }
  if (typeof predicate === 'object') {
    if (Array.isArray(predicate)) {
      const key = predicate[0];
      const value = predicate[1];
      return findKeyToolkit(obj, matchesProperty(key, value));
    }
    return findKeyToolkit(obj, matches(predicate));
  }
  if (typeof predicate === 'string') {
    return findKeyToolkit(obj, property(predicate));
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvb2JqZWN0L2ZpbmRLZXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICcuL3Byb3BlcnR5LnRzJztcbmltcG9ydCB7IGZpbmRLZXkgYXMgZmluZEtleVRvb2xraXQgfSBmcm9tICcuLi8uLi9vYmplY3QvaW5kZXgudHMnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi9wcmVkaWNhdGUvaXNPYmplY3QudHMnO1xuaW1wb3J0IHsgbWF0Y2hlcyB9IGZyb20gJy4uL3ByZWRpY2F0ZS9tYXRjaGVzLnRzJztcbmltcG9ydCB7IG1hdGNoZXNQcm9wZXJ0eSB9IGZyb20gJy4uL3ByZWRpY2F0ZS9tYXRjaGVzUHJvcGVydHkudHMnO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBrZXkgb2YgdGhlIGZpcnN0IGVsZW1lbnQgcHJlZGljYXRlIHJldHVybnMgdHJ1dGh5IGZvci5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QuXG4gKiBAcGFyYW0ge1QgfCBudWxsIHwgdW5kZWZpbmVkfSBvYmogLSBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyh2YWx1ZTogVFtrZXlvZiBUXSwga2V5OiBrZXlvZiBULCBvYmo6IFQpID0+IGJvb2xlYW59IGNvbmRpdGlvblRvRmluZCAtIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7a2V5b2YgVCB8IHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHVzZXJzID0geyAnYmFybmV5JzogeyAnYWdlJzogMzYgfSwgJ2ZyZWQnOiB7ICdhZ2UnOiA0MCB9IH07XG4gKiBjb25zdCByZXN1bHQgPSBmaW5kS2V5KHVzZXJzLCBvID0+IG8uYWdlIDwgNDApO1xuICogLy8gPT4gJ2Jhcm5leSdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRLZXk8VCBleHRlbmRzIFJlY29yZDxhbnksIGFueT4+KFxuICBvYmo6IFQgfCBudWxsIHwgdW5kZWZpbmVkLFxuICBjb25kaXRpb25Ub0ZpbmQ6ICh2YWx1ZTogVFtrZXlvZiBUXSwga2V5OiBrZXlvZiBULCBvYmo6IFQpID0+IGJvb2xlYW5cbik6IGtleW9mIFQgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogRmluZHMgdGhlIGtleSBvZiB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QuXG4gKiBAcGFyYW0ge1QgfCBudWxsIHwgdW5kZWZpbmVkfSBvYmogLSBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge1BhcnRhaWw8VFtrZXlvZiBUXT59IG9iamVjdFRvRmluZCAtIFRoZSBvYmplY3QgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7a2V5b2YgVCB8IHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHVzZXJzID0geyAnYmFybmV5JzogeyAnYWdlJzogMzYgfSwgJ2ZyZWQnOiB7ICdhZ2UnOiA0MCB9IH07XG4gKiBjb25zdCByZXN1bHQgPSBmaW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiB9KTtcbiAqIC8vID0+ICdiYXJuZXknXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kS2V5PFQgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+PihcbiAgb2JqOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgb2JqZWN0VG9GaW5kOiBQYXJ0aWFsPFRba2V5b2YgVF0+XG4pOiBrZXlvZiBUIHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIEZpbmRzIHRoZSBrZXkgb2YgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiBwcm9wZXJ0eSBhbmQgdmFsdWUuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LlxuICogQHBhcmFtIHtUIHwgbnVsbCB8IHVuZGVmaW5lZH0gb2JqIC0gVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtba2V5b2YgVFtrZXlvZiBUXSwgYW55XX0gcHJvcGVydHlUb0ZpbmQgLSBUaGUgcHJvcGVydHkgYW5kIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge2tleW9mIFQgfCB1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LCBlbHNlIGB1bmRlZmluZWRgLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB1c2VycyA9IHsgJ2Jhcm5leSc6IHsgJ2FnZSc6IDM2IH0sICdmcmVkJzogeyAnYWdlJzogNDAgfSB9O1xuICogY29uc3QgcmVzdWx0ID0gZmluZEtleSh1c2VycywgWydhZ2UnLCAzNl0pO1xuICogLy8gPT4gJ2Jhcm5leSdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRLZXk8VCBleHRlbmRzIFJlY29yZDxhbnksIGFueT4+KFxuICBvYmo6IFQgfCBudWxsIHwgdW5kZWZpbmVkLFxuICBwcm9wZXJ0eVRvRmluZDogW2tleW9mIFRba2V5b2YgVF0sIGFueV1cbik6IGtleW9mIFQgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogRmluZHMgdGhlIGtleSBvZiB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGhhcyBhIHRydXRoeSB2YWx1ZSBmb3IgdGhlIGdpdmVuIHByb3BlcnR5LlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIHR5cGUgb2YgdGhlIG9iamVjdC5cbiAqIEBwYXJhbSB7VCB8IG51bGwgfCB1bmRlZmluZWR9IG9iaiAtIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7a2V5b2YgVFtrZXlvZiBUXX0gcHJvcGVydHlUb0ZpbmQgLSBUaGUgcHJvcGVydHkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7a2V5b2YgVCB8IHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHVzZXJzID0geyAnYmFybmV5JzogeyAnYWN0aXZlJzogdHJ1ZSB9LCAnZnJlZCc6IHsgJ2FjdGl2ZSc6IGZhbHNlIH0gfTtcbiAqIGNvbnN0IHJlc3VsdCA9IGZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAqIC8vID0+ICdiYXJuZXknXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kS2V5PFQgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+PihcbiAgb2JqOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgcHJvcGVydHlUb0ZpbmQ6IGtleW9mIFRba2V5b2YgVF1cbik6IGtleW9mIFQgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogRmluZHMgdGhlIGtleSBvZiB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIGdpdmVuIHByZWRpY2F0ZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgdGhlIHR5cGUgb2YgdGhlIHByZWRpY2F0ZSBhbmQgZGVsZWdhdGVzIHRoZSBzZWFyY2hcbiAqIHRvIHRoZSBhcHByb3ByaWF0ZSBoZWxwZXIgZnVuY3Rpb24uIEl0IHN1cHBvcnRzIHByZWRpY2F0ZXMgYXMgZnVuY3Rpb25zLCBvYmplY3RzLFxuICogYXJyYXlzLCBvciBzdHJpbmdzLlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIHR5cGUgb2YgdGhlIG9iamVjdC5cbiAqIEBwYXJhbSB7VCB8IG51bGwgfCB1bmRlZmluZWR9IG9iaiAtIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7KHZhbHVlOiBUW2tleW9mIFRdLCBrZXk6IGtleW9mIFQsIG9iajogVCkgPT4gYm9vbGVhbiB8IFBhcnRpYWw8VFtrZXlvZiBUXT4gfCBba2V5b2YgVFtrZXlvZiBUXSwgYW55XSB8IGtleW9mIFRba2V5b2YgVF19IHByZWRpY2F0ZSAtIFRoZSBwcmVkaWNhdGUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7a2V5b2YgVCB8IHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kS2V5PFQgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+PihcbiAgb2JqOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgcHJlZGljYXRlOlxuICAgIHwgKCh2YWx1ZTogVFtrZXlvZiBUXSwga2V5OiBrZXlvZiBULCBvYmo6IFQpID0+IGJvb2xlYW4pXG4gICAgfCBQYXJ0aWFsPFRba2V5b2YgVF0+XG4gICAgfCBba2V5b2YgVFtrZXlvZiBUXSwgYW55XVxuICAgIHwga2V5b2YgVFtrZXlvZiBUXVxuKToga2V5b2YgVCB8IHVuZGVmaW5lZCB7XG4gIGlmICghaXNPYmplY3Qob2JqKSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gZmluZEtleUltcGwob2JqLCBwcmVkaWNhdGUpO1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5SW1wbDxUIGV4dGVuZHMgUmVjb3JkPGFueSwgYW55Pj4oXG4gIG9iajogVCxcbiAgcHJlZGljYXRlOlxuICAgIHwgKCh2YWx1ZTogVFtrZXlvZiBUXSwga2V5OiBrZXlvZiBULCBvYmo6IFQpID0+IGJvb2xlYW4pXG4gICAgfCBQYXJ0aWFsPFRba2V5b2YgVF0+XG4gICAgfCBba2V5b2YgVFtrZXlvZiBUXSwgYW55XVxuICAgIHwga2V5b2YgVFtrZXlvZiBUXVxuKSB7XG4gIGlmICh0eXBlb2YgcHJlZGljYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZpbmRLZXlUb29sa2l0KG9iaiwgcHJlZGljYXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlZGljYXRlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHByZWRpY2F0ZSkpIHtcbiAgICAgIGNvbnN0IGtleSA9IHByZWRpY2F0ZVswXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcHJlZGljYXRlWzFdO1xuXG4gICAgICByZXR1cm4gZmluZEtleVRvb2xraXQob2JqLCBtYXRjaGVzUHJvcGVydHkoa2V5LCB2YWx1ZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmaW5kS2V5VG9vbGtpdChvYmosIG1hdGNoZXMocHJlZGljYXRlKSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWRpY2F0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmluZEtleVRvb2xraXQob2JqLCBwcm9wZXJ0eShwcmVkaWNhdGUpKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsUUFBUSxRQUFRLGdCQUFnQjtBQUN6QyxTQUFTLFdBQVcsY0FBYyxRQUFRLHdCQUF3QjtBQUNsRSxTQUFTLFFBQVEsUUFBUSwyQkFBMkI7QUFDcEQsU0FBUyxPQUFPLFFBQVEsMEJBQTBCO0FBQ2xELFNBQVMsZUFBZSxRQUFRLGtDQUFrQztBQTBFbEU7Ozs7Ozs7Ozs7O0NBV0MsR0FDRCxPQUFPLFNBQVMsUUFDZCxHQUF5QixFQUN6QixTQUlvQjtFQUVwQixJQUFJLENBQUMsU0FBUyxNQUFNO0lBQ2xCLE9BQU87RUFDVDtFQUVBLE9BQU8sWUFBWSxLQUFLO0FBQzFCO0FBRUEsU0FBUyxZQUNQLEdBQU0sRUFDTixTQUlvQjtFQUVwQixJQUFJLE9BQU8sY0FBYyxZQUFZO0lBQ25DLE9BQU8sZUFBZSxLQUFLO0VBQzdCO0VBRUEsSUFBSSxPQUFPLGNBQWMsVUFBVTtJQUNqQyxJQUFJLE1BQU0sT0FBTyxDQUFDLFlBQVk7TUFDNUIsTUFBTSxNQUFNLFNBQVMsQ0FBQyxFQUFFO01BQ3hCLE1BQU0sUUFBUSxTQUFTLENBQUMsRUFBRTtNQUUxQixPQUFPLGVBQWUsS0FBSyxnQkFBZ0IsS0FBSztJQUNsRDtJQUVBLE9BQU8sZUFBZSxLQUFLLFFBQVE7RUFDckM7RUFFQSxJQUFJLE9BQU8sY0FBYyxVQUFVO0lBQ2pDLE9BQU8sZUFBZSxLQUFLLFNBQVM7RUFDdEM7QUFDRiJ9
// denoCacheMetadata=10593598985563192472,16499726058895128966