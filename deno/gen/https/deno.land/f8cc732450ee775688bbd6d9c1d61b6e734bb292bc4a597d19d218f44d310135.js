import { EventEmitter } from "../../event-emitter/mod.ts";
import { Parser } from "../../engine.io-parser/mod.ts";
import { getLogger } from "../../../deps.ts";
export class Transport extends EventEmitter {
  writable = false;
  readyState = "open";
  opts;
  constructor(opts){
    super();
    this.opts = opts;
  }
  /**
   * Manually closes the transport.
   */ close() {
    if ([
      "closing",
      "closed"
    ].includes(this.readyState)) {
      return;
    }
    getLogger("engine.io").debug("[transport] closing transport");
    this.readyState = "closing";
    this.doClose();
  }
  /**
   * Called when the transport encounters a fatal error.
   *
   * @param message
   * @protected
   */ onError(message) {
    this.emitReserved("error", new TransportError(message));
  }
  /**
   * Called with a parsed packet from the data stream.
   *
   * @param packet
   * @protected
   */ onPacket(packet) {
    if (packet.type === "close") {
      getLogger("engine.io").debug("[transport] received 'close' packet");
      return this.doClose();
    }
    this.emitReserved("packet", packet);
  }
  /**
   * Called with the encoded packet data.
   *
   * @param data
   * @protected
   */ onData(data) {
    this.onPacket(Parser.decodePacket(data));
  }
  /**
   * Called upon transport close.
   *
   * @protected
   */ onClose() {
    this.readyState = "closed";
    this.emitReserved("close");
  }
}
export class TransportError extends Error {
  type = "TransportError";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvc29ja2V0X2lvQDAuMi4xL3BhY2thZ2VzL2VuZ2luZS5pby9saWIvdHJhbnNwb3J0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCIuLi8uLi9ldmVudC1lbWl0dGVyL21vZC50c1wiO1xuaW1wb3J0IHsgUGFja2V0LCBQYXJzZXIsIFJhd0RhdGEgfSBmcm9tIFwiLi4vLi4vZW5naW5lLmlvLXBhcnNlci9tb2QudHNcIjtcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gXCIuLi8uLi8uLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBTZXJ2ZXJPcHRpb25zIH0gZnJvbSBcIi4vc2VydmVyLnRzXCI7XG5cbmludGVyZmFjZSBUcmFuc3BvcnRFdmVudHMge1xuICBwYWNrZXQ6IChwYWNrZXQ6IFBhY2tldCkgPT4gdm9pZDtcbiAgZXJyb3I6IChlcnJvcjogVHJhbnNwb3J0RXJyb3IpID0+IHZvaWQ7XG4gIGRyYWluOiAoKSA9PiB2b2lkO1xuICBjbG9zZTogKCkgPT4gdm9pZDtcbn1cblxudHlwZSBSZWFkeVN0YXRlID0gXCJvcGVuXCIgfCBcImNsb3NpbmdcIiB8IFwiY2xvc2VkXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUcmFuc3BvcnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXI8XG4gIFJlY29yZDxuZXZlciwgbmV2ZXI+LFxuICBSZWNvcmQ8bmV2ZXIsIG5ldmVyPixcbiAgVHJhbnNwb3J0RXZlbnRzXG4+IHtcbiAgcHVibGljIHdyaXRhYmxlID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIHJlYWR5U3RhdGU6IFJlYWR5U3RhdGUgPSBcIm9wZW5cIjtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IG9wdHM6IFNlcnZlck9wdGlvbnM7XG5cbiAgY29uc3RydWN0b3Iob3B0czogU2VydmVyT3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgdHJhbnNwb3J0XG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0IG5hbWUoKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiB0cmFuc3BvcnRzIHRvIHVwZ3JhZGUgdG9cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXQgdXBncmFkZXNUbygpOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogQ2FsbGVkIHdpdGggYW4gaW5jb21pbmcgSFRUUCByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0gcmVxXG4gICAqIEBwYXJhbSByZXNwb25zZUhlYWRlcnNcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBvblJlcXVlc3QoXG4gICAgcmVxOiBSZXF1ZXN0LFxuICAgIHJlc3BvbnNlSGVhZGVyczogSGVhZGVycyxcbiAgKTogUHJvbWlzZTxSZXNwb25zZT47XG5cbiAgLyoqXG4gICAqIFdyaXRlcyBhbiBhcnJheSBvZiBwYWNrZXRzLlxuICAgKlxuICAgKiBAcGFyYW0gcGFja2V0c1xuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHNlbmQocGFja2V0czogUGFja2V0W10pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGRvQ2xvc2UoKTogdm9pZDtcblxuICAvKipcbiAgICogTWFudWFsbHkgY2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gICAqL1xuICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgaWYgKFtcImNsb3NpbmdcIiwgXCJjbG9zZWRcIl0uaW5jbHVkZXModGhpcy5yZWFkeVN0YXRlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGdldExvZ2dlcihcImVuZ2luZS5pb1wiKS5kZWJ1ZyhcIlt0cmFuc3BvcnRdIGNsb3NpbmcgdHJhbnNwb3J0XCIpO1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2luZ1wiO1xuICAgIHRoaXMuZG9DbG9zZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB0cmFuc3BvcnQgZW5jb3VudGVycyBhIGZhdGFsIGVycm9yLlxuICAgKlxuICAgKiBAcGFyYW0gbWVzc2FnZVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgb25FcnJvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIG5ldyBUcmFuc3BvcnRFcnJvcihtZXNzYWdlKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdpdGggYSBwYXJzZWQgcGFja2V0IGZyb20gdGhlIGRhdGEgc3RyZWFtLlxuICAgKlxuICAgKiBAcGFyYW0gcGFja2V0XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBvblBhY2tldChwYWNrZXQ6IFBhY2tldCkge1xuICAgIGlmIChwYWNrZXQudHlwZSA9PT0gXCJjbG9zZVwiKSB7XG4gICAgICBnZXRMb2dnZXIoXCJlbmdpbmUuaW9cIikuZGVidWcoXCJbdHJhbnNwb3J0XSByZWNlaXZlZCAnY2xvc2UnIHBhY2tldFwiKTtcbiAgICAgIHJldHVybiB0aGlzLmRvQ2xvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwYWNrZXRcIiwgcGFja2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2l0aCB0aGUgZW5jb2RlZCBwYWNrZXQgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIG9uRGF0YShkYXRhOiBSYXdEYXRhKSB7XG4gICAgdGhpcy5vblBhY2tldChQYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgY2xvc2UuXG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHByb3RlY3RlZCBvbkNsb3NlKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjbG9zZVwiKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNwb3J0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIHB1YmxpYyByZWFkb25seSB0eXBlID0gXCJUcmFuc3BvcnRFcnJvclwiO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsWUFBWSxRQUFRLDZCQUE2QjtBQUMxRCxTQUFpQixNQUFNLFFBQWlCLGdDQUFnQztBQUN4RSxTQUFTLFNBQVMsUUFBUSxtQkFBbUI7QUFZN0MsT0FBTyxNQUFlLGtCQUFrQjtFQUsvQixXQUFXLE1BQU07RUFFZCxhQUF5QixPQUFPO0VBQ3ZCLEtBQW9CO0VBRXZDLFlBQVksSUFBbUIsQ0FBRTtJQUMvQixLQUFLO0lBQ0wsSUFBSSxDQUFDLElBQUksR0FBRztFQUNkO0VBcUNBOztHQUVDLEdBQ0QsQUFBTyxRQUFRO0lBQ2IsSUFBSTtNQUFDO01BQVc7S0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHO01BQ25EO0lBQ0Y7SUFFQSxVQUFVLGFBQWEsS0FBSyxDQUFDO0lBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUc7SUFDbEIsSUFBSSxDQUFDLE9BQU87RUFDZDtFQUVBOzs7OztHQUtDLEdBQ0QsQUFBVSxRQUFRLE9BQWUsRUFBRTtJQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsSUFBSSxlQUFlO0VBQ2hEO0VBRUE7Ozs7O0dBS0MsR0FDRCxBQUFVLFNBQVMsTUFBYyxFQUFFO0lBQ2pDLElBQUksT0FBTyxJQUFJLEtBQUssU0FBUztNQUMzQixVQUFVLGFBQWEsS0FBSyxDQUFDO01BQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU87SUFDckI7SUFDQSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVU7RUFDOUI7RUFFQTs7Ozs7R0FLQyxHQUNELEFBQVUsT0FBTyxJQUFhLEVBQUU7SUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLFlBQVksQ0FBQztFQUNwQztFQUVBOzs7O0dBSUMsR0FDRCxBQUFVLFVBQVU7SUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRztJQUNsQixJQUFJLENBQUMsWUFBWSxDQUFDO0VBQ3BCO0FBQ0Y7QUFFQSxPQUFPLE1BQU0sdUJBQXVCO0VBQ2xCLE9BQU8saUJBQWlCO0FBQzFDIn0=
// denoCacheMetadata=18389134086881391712,13625883584127363950