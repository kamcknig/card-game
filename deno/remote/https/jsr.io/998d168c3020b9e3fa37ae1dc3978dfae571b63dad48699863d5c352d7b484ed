/**
 * Returns the intersection of two arrays based on a custom equality function.
 *
 * This function takes two arrays and a custom equality function. It returns a new array containing
 * the elements from the first array that have matching elements in the second array, as determined
 * by the custom equality function. It effectively filters out any elements from the first array that
 * do not have corresponding matches in the second array according to the equality function.
 *
 * @template T - The type of elements in the first array.
 * @template U - The type of elements in the second array.
 * @param {T[]} firstArr - The first array to compare.
 * @param {U[]} secondArr - The second array to compare.
 * @param {(x: T, y: U) => boolean} areItemsEqual - A custom function to determine if two elements are equal.
 * This function takes two arguments, one from each array, and returns `true` if the elements are considered equal, and `false` otherwise.
 * @returns {T[]} A new array containing the elements from the first array that have corresponding matches in the second array according to the custom equality function.
 *
 * @example
 * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];
 * const array2 = [{ id: 2 }, { id: 4 }];
 * const areItemsEqual = (a, b) => a.id === b.id;
 * const result = intersectionWith(array1, array2, areItemsEqual);
 * // result will be [{ id: 2 }] since this element has a matching id in both arrays.
 *
 * @example
 * const array1 = [
 *   { id: 1, name: 'jane' },
 *   { id: 2, name: 'amy' },
 *   { id: 3, name: 'michael' },
 * ];
 * const array2 = [2, 4];
 * const areItemsEqual = (a, b) => a.id === b;
 * const result = intersectionWith(array1, array2, areItemsEqual);
 * // result will be [{ id: 2, name: 'amy' }] since this element has a matching id that is equal to seconds array's element.
 */
export function intersectionWith<T, U>(
  firstArr: readonly T[],
  secondArr: readonly U[],
  areItemsEqual: (x: T, y: U) => boolean
): T[] {
  return firstArr.filter(firstItem => {
    return secondArr.some(secondItem => {
      return areItemsEqual(firstItem, secondItem);
    });
  });
}

// denoCacheMetadata={"headers":{"date":"Thu, 26 Jun 2025 21:45:35 GMT","expires":"Fri, 26 Jun 2026 21:45:35 GMT","age":"0","x-robots-tag":"noindex","x-jsr-cache-id":"ATL","cache-control":"public, max-age=31536000, immutable","x-goog-hash":"crc32c=lMTZQw==,md5=9AGcoOnHHPUGTiCfIjuXwA==","server":"UploadServer","etag":"\"f4019ca0e9c71cf5064e209f223b97c0\"","x-jsr-cache-status":"revalidated","x-goog-metageneration":"1","x-goog-stored-content-encoding":"identity","x-goog-storage-class":"STANDARD","access-control-allow-origin":"*","access-control-expose-headers":"*","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","cross-origin-resource-policy":"cross-origin","x-guploader-uploadid":"ABgVH88rInXJhW6fKAOD4ITRkM4mau1WhGmjuOTROkw5lslk4Mv3YjxIWBMz68v9uakrXOmP","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","content-type":"text/typescript","x-goog-generation":"1741509575656959","x-goog-stored-content-length":"2139","content-length":"2139","via":"1.1 google","accept-ranges":"bytes"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/array/intersectionWith.ts","time":1750974334}