import { isIterateeCall } from '../_internal/isIterateeCall.ts';
import { toFinite } from '../util/toFinite.ts';
/**
 * Returns an array of numbers from `end` (exclusive) to `start` (inclusive), decrementing by `step`.
 *
 * @param {number} start - The starting number of the range (inclusive).
 * @param {number} end - The end number of the range (exclusive).
 * @param {number} step - The step value for the range.
 * @returns {number[]} An array of numbers from `end` (exclusive) to `start` (inclusive) with the specified `step`.
 * @throws {Error} Throws an error if the step value is not a non-zero integer.
 *
 * @example
 * // Returns [3, 2, 1, 0]
 * rangeRight(4);
 *
 * @example
 * // Returns [-3, -2, -1, 0]
 * rangeRight(0, -4, -1);
 */ export function rangeRight(start, end, step) {
  // Enables use as an iteratee for methods like `_.map`.
  if (step && typeof step !== 'number' && isIterateeCall(start, end, step)) {
    end = step = undefined;
  }
  start = toFinite(start);
  if (end === undefined) {
    end = start;
    start = 0;
  } else {
    end = toFinite(end);
  }
  step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
  const length = Math.max(Math.ceil((end - start) / (step || 1)), 0);
  const result = new Array(length);
  for(let index = length - 1; index >= 0; index--){
    result[index] = start;
    start += step;
  }
  return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvbWF0aC9yYW5nZVJpZ2h0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSXRlcmF0ZWVDYWxsIH0gZnJvbSAnLi4vX2ludGVybmFsL2lzSXRlcmF0ZWVDYWxsLnRzJztcbmltcG9ydCB7IHRvRmluaXRlIH0gZnJvbSAnLi4vdXRpbC90b0Zpbml0ZS50cyc7XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBudW1iZXJzIGZyb20gYGVuZGAgKGV4Y2x1c2l2ZSkgdG8gYDBgIChpbmNsdXNpdmUpLCBkZWNyZW1lbnRpbmcgYnkgYDFgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgLSBUaGUgZW5kIG51bWJlciBvZiB0aGUgcmFuZ2UgKGV4Y2x1c2l2ZSkuXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IEFuIGFycmF5IG9mIG51bWJlcnMgZnJvbSBgZW5kYCAoZXhjbHVzaXZlKSB0byBgMGAgKGluY2x1c2l2ZSkgd2l0aCBhIHN0ZXAgb2YgYDFgLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXR1cm5zIFszLCAyLCAxLCAwXVxuICogcmFuZ2VSaWdodCg0KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlUmlnaHQoZW5kOiBudW1iZXIpOiBudW1iZXJbXTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgZnJvbSBgZW5kYCAoZXhjbHVzaXZlKSB0byBgc3RhcnRgIChpbmNsdXNpdmUpLCBkZWNyZW1lbnRpbmcgYnkgYDFgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIFRoZSBzdGFydGluZyBudW1iZXIgb2YgdGhlIHJhbmdlIChpbmNsdXNpdmUpLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCAtIFRoZSBlbmQgbnVtYmVyIG9mIHRoZSByYW5nZSAoZXhjbHVzaXZlKS5cbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gQW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIGBlbmRgIChleGNsdXNpdmUpIHRvIGBzdGFydGAgKGluY2x1c2l2ZSkgd2l0aCBhIHN0ZXAgb2YgYDFgLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXR1cm5zIFszLCAyLCAxXVxuICogcmFuZ2VSaWdodCgxLCA0KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlUmlnaHQoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBudW1iZXJbXTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgZnJvbSBgZW5kYCAoZXhjbHVzaXZlKSB0byBgc3RhcnRgIChpbmNsdXNpdmUpLCBkZWNyZW1lbnRpbmcgYnkgYHN0ZXBgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIFRoZSBzdGFydGluZyBudW1iZXIgb2YgdGhlIHJhbmdlIChpbmNsdXNpdmUpLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCAtIFRoZSBlbmQgbnVtYmVyIG9mIHRoZSByYW5nZSAoZXhjbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIC0gVGhlIHN0ZXAgdmFsdWUgZm9yIHRoZSByYW5nZS5cbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gQW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIGBlbmRgIChleGNsdXNpdmUpIHRvIGBzdGFydGAgKGluY2x1c2l2ZSkgd2l0aCB0aGUgc3BlY2lmaWVkIGBzdGVwYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmV0dXJucyBbMTUsIDEwLCA1LCAwXVxuICogcmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZVJpZ2h0KHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyLCBzdGVwOiBudW1iZXIpOiBudW1iZXJbXTtcblxuLyoqXG4gKiBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCAtIFRoZSBjdXJyZW50IGl0ZXJhdGVlIHZhbHVlLlxuICogQHBhcmFtIHtQcm9wZXJ0eUtleX0gaW5kZXggLSBUaGUgaXRlcmF0aW9uIGluZGV4LlxuICogQHBhcmFtIHtvYmplY3R9IGd1YXJkIC0gVGhlIGl0ZXJhdGVlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gQW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSkgd2l0aCB0aGUgc3BlY2lmaWVkIGBzdGVwYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlUmlnaHQoZW5kOiBudW1iZXIsIGluZGV4OiBQcm9wZXJ0eUtleSwgZ3VhcmQ6IG9iamVjdCk6IG51bWJlcltdO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIGBlbmRgIChleGNsdXNpdmUpIHRvIGBzdGFydGAgKGluY2x1c2l2ZSksIGRlY3JlbWVudGluZyBieSBgc3RlcGAuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gVGhlIHN0YXJ0aW5nIG51bWJlciBvZiB0aGUgcmFuZ2UgKGluY2x1c2l2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIC0gVGhlIGVuZCBudW1iZXIgb2YgdGhlIHJhbmdlIChleGNsdXNpdmUpLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgLSBUaGUgc3RlcCB2YWx1ZSBmb3IgdGhlIHJhbmdlLlxuICogQHJldHVybnMge251bWJlcltdfSBBbiBhcnJheSBvZiBudW1iZXJzIGZyb20gYGVuZGAgKGV4Y2x1c2l2ZSkgdG8gYHN0YXJ0YCAoaW5jbHVzaXZlKSB3aXRoIHRoZSBzcGVjaWZpZWQgYHN0ZXBgLlxuICogQHRocm93cyB7RXJyb3J9IFRocm93cyBhbiBlcnJvciBpZiB0aGUgc3RlcCB2YWx1ZSBpcyBub3QgYSBub24temVybyBpbnRlZ2VyLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXR1cm5zIFszLCAyLCAxLCAwXVxuICogcmFuZ2VSaWdodCg0KTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmV0dXJucyBbLTMsIC0yLCAtMSwgMF1cbiAqIHJhbmdlUmlnaHQoMCwgLTQsIC0xKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlUmlnaHQoc3RhcnQ6IG51bWJlciwgZW5kPzogUHJvcGVydHlLZXksIHN0ZXA/OiBhbnkpOiBudW1iZXJbXSB7XG4gIC8vIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT09ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgfVxuICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gc3RhcnQ7XG4gICAgc3RhcnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gIH1cbiAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcblxuICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCk7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShsZW5ndGgpO1xuICBmb3IgKGxldCBpbmRleCA9IGxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gc3RhcnQ7XG4gICAgc3RhcnQgKz0gc3RlcDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsY0FBYyxRQUFRLGlDQUFpQztBQUNoRSxTQUFTLFFBQVEsUUFBUSxzQkFBc0I7QUFtRC9DOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBQ0QsT0FBTyxTQUFTLFdBQVcsS0FBYSxFQUFFLEdBQWlCLEVBQUUsSUFBVTtFQUNyRSx1REFBdUQ7RUFDdkQsSUFBSSxRQUFRLE9BQU8sU0FBUyxZQUFZLGVBQWUsT0FBTyxLQUFLLE9BQU87SUFDeEUsTUFBTSxPQUFPO0VBQ2Y7RUFDQSxRQUFRLFNBQVM7RUFDakIsSUFBSSxRQUFRLFdBQVc7SUFDckIsTUFBTTtJQUNOLFFBQVE7RUFDVixPQUFPO0lBQ0wsTUFBTSxTQUFTO0VBQ2pCO0VBQ0EsT0FBTyxTQUFTLFlBQWEsUUFBUSxNQUFNLElBQUksQ0FBQyxJQUFLLFNBQVM7RUFFOUQsTUFBTSxTQUFTLEtBQUssR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTtFQUNoRSxNQUFNLFNBQVMsSUFBSSxNQUFNO0VBQ3pCLElBQUssSUFBSSxRQUFRLFNBQVMsR0FBRyxTQUFTLEdBQUcsUUFBUztJQUNoRCxNQUFNLENBQUMsTUFBTSxHQUFHO0lBQ2hCLFNBQVM7RUFDWDtFQUNBLE9BQU87QUFDVCJ9
// denoCacheMetadata=13978148505056529733,1937906738673813798