import { isIndex } from '../_internal/isIndex.ts';
import { toPath } from '../util/toPath.ts';

/**
 * Sets the value at the specified path of the given object. If any part of the path does not exist, it will be created.
 *
 * @template T - The type of the object.
 * @param {T} obj - The object to modify.
 * @param {PropertyKey | PropertyKey[]} path - The path of the property to set.
 * @param {any} value - The value to set.
 * @returns {T} - The modified object.
 *
 * @example
 * // Set a value in a nested object
 * const obj = { a: { b: { c: 3 } } };
 * set(obj, 'a.b.c', 4);
 * console.log(obj.a.b.c); // 4
 *
 * @example
 * // Set a value in an array
 * const arr = [1, 2, 3];
 * set(arr, 1, 4);
 * console.log(arr[1]); // 4
 *
 * @example
 * // Create non-existent path and set value
 * const obj = {};
 * set(obj, 'a.b.c', 4);
 * console.log(obj); // { a: { b: { c: 4 } } }
 */
export function set<T>(obj: object, path: PropertyKey | readonly PropertyKey[], value: unknown): T;
/**
 * Sets the value at the specified path of the given object. If any part of the path does not exist, it will be created.
 *
 * @template T - The type of the object.
 * @param {T} obj - The object to modify.
 * @param {PropertyKey | PropertyKey[]} path - The path of the property to set.
 * @param {any} value - The value to set.
 * @returns {T} - The modified object.
 *
 * @example
 * // Set a value in a nested object
 * const obj = { a: { b: { c: 3 } } };
 * set(obj, 'a.b.c', 4);
 * console.log(obj.a.b.c); // 4
 *
 * @example
 * // Set a value in an array
 * const arr = [1, 2, 3];
 * set(arr, 1, 4);
 * console.log(arr[1]); // 4
 *
 * @example
 * // Create non-existent path and set value
 * const obj = {};
 * set(obj, 'a.b.c', 4);
 * console.log(obj); // { a: { b: { c: 4 } } }
 */
export function set<T extends object>(obj: T, path: PropertyKey | readonly PropertyKey[], value: unknown): T {
  const resolvedPath = Array.isArray(path) ? path : typeof path === 'string' ? toPath(path) : [path];

  let current: any = obj;

  for (let i = 0; i < resolvedPath.length - 1; i++) {
    const key = resolvedPath[i];
    const nextKey = resolvedPath[i + 1];

    if (current[key] == null) {
      current[key] = isIndex(nextKey) ? [] : {};
    }

    current = current[key];
  }

  const lastKey = resolvedPath[resolvedPath.length - 1];
  current[lastKey] = value;

  return obj;
}

// denoCacheMetadata={"headers":{"date":"Thu, 26 Jun 2025 21:45:35 GMT","x-robots-tag":"noindex","cross-origin-resource-policy":"cross-origin","x-content-type-options":"nosniff","age":"0","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","access-control-expose-headers":"*","x-goog-hash":"crc32c=Ywke8g==,md5=tCEW7om9zvxolmgxpqpgqQ==","x-jsr-cache-status":"revalidated","x-goog-storage-class":"STANDARD","server":"UploadServer","access-control-allow-origin":"*","accept-ranges":"bytes","expires":"Fri, 26 Jun 2026 21:45:35 GMT","x-goog-metageneration":"1","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","etag":"\"b42116ee89bdcefc68966831a6aa60a9\"","cache-control":"public, max-age=31536000, immutable","content-type":"text/typescript","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-stored-content-length":"2377","x-guploader-uploadid":"ABgVH8_eXvUYu8tV2XHJfyBNDYuOz4R1BE49dhKJ4YdjXB3886WBnjs6Cc7WLPGdxey7UEnbKQd2NTk","x-jsr-cache-id":"ATL","via":"1.1 google","content-length":"2377","x-goog-generation":"1741509575435969","x-goog-stored-content-encoding":"identity"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/object/set.ts","time":1750974334}