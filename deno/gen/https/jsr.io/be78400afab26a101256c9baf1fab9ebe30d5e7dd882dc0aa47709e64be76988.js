import { flow } from './flow.ts';
/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {(...args: any[]) => any} funcs The functions to invoke.
 * @returns {(...args: any[]) => any} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 *
 * const combined = flowRight(square, add);
 * console.log(combined(1, 2)); // 9
 */ export function flowRight(...funcs) {
  return flow(...funcs.reverse());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9mdW5jdGlvbi9mbG93UmlnaHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmxvdyB9IGZyb20gJy4vZmxvdy50cyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIHRoZSBnaXZlbiBmdW5jdGlvbnMgaW4gc2VxdWVuY2UgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cyBmdW5jdGlvbiBpcyBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIG5leHQgZnVuY3Rpb24uXG4gKlxuICogVGhlIGB0aGlzYCBjb250ZXh0IG9mIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBpcyBhbHNvIHBhc3NlZCB0byB0aGUgZnVuY3Rpb25zIHByb3ZpZGVkIGFzIHBhcmFtZXRlcnMuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqXG4gKiBAcGFyYW0geygpID0+IFJ9IGYgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEByZXR1cm5zIHsoKSA9PiBSfSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBmdW5jdGlvbiBub0FyZ0Z1bmMoKSB7XG4gKiAgIHJldHVybiA0MjtcbiAqIH1cbiAqIGNvbnN0IGNvbWJpbmVkID0gZmxvd1JpZ2h0KG5vQXJnRnVuYyk7XG4gKiBjb25zb2xlLmxvZyhjb21iaW5lZCgpKTsgLy8gNDJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsb3dSaWdodDxSPihmOiAoKSA9PiBSKTogKCkgPT4gUjtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIHRoZSBnaXZlbiBmdW5jdGlvbnMgaW4gc2VxdWVuY2UgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cyBmdW5jdGlvbiBpcyBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIG5leHQgZnVuY3Rpb24uXG4gKlxuICogVGhlIGB0aGlzYCBjb250ZXh0IG9mIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBpcyBhbHNvIHBhc3NlZCB0byB0aGUgZnVuY3Rpb25zIHByb3ZpZGVkIGFzIHBhcmFtZXRlcnMuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqXG4gKiBAcGFyYW0geyguLi5hcmdzOiBBKSA9PiBSfSBmMSBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHJldHVybnMgeyguLi5hcmdzOiBBKSA9PiBSfSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBmdW5jdGlvbiBvbmVBcmdGdW5jKGE6IG51bWJlcikge1xuICogIHJldHVybiBhICogMjtcbiAqIH1cbiAqIGNvbnN0IGNvbWJpbmVkID0gZmxvd1JpZ2h0KG9uZUFyZ0Z1bmMpO1xuICogY29uc29sZS5sb2coY29tYmluZWQoNSkpOyAvLyAxMFxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxvd1JpZ2h0PEEgZXh0ZW5kcyBhbnlbXSwgUj4oZjE6ICguLi5hcmdzOiBBKSA9PiBSKTogKC4uLmFyZ3M6IEEpID0+IFI7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZnVuY3Rpb24gdGhhdCBleGVjdXRlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGluIHNlcXVlbmNlIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMgZnVuY3Rpb24gaXMgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBuZXh0IGZ1bmN0aW9uLlxuICpcbiAqIFRoZSBgdGhpc2AgY29udGV4dCBvZiB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gaXMgYWxzbyBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9ucyBwcm92aWRlZCBhcyBwYXJhbWV0ZXJzLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYGZsb3dgIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKlxuICogQHBhcmFtIHsoYTogUjEpID0+IFIyfSBmMiBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsoLi4uYXJnczogQSkgPT4gUjF9IGYxIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcmV0dXJucyB7KC4uLmFyZ3M6IEEpID0+IFIyfSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBhZGQgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHggKyB5O1xuICogY29uc3Qgc3F1YXJlID0gKG46IG51bWJlcikgPT4gbiAqIG47XG4gKlxuICogY29uc3QgY29tYmluZWQgPSBmbG93UmlnaHQoc3F1YXJlLCBhZGQpO1xuICogY29uc29sZS5sb2coY29tYmluZWQoMSwgMikpOyAvLyA5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbG93UmlnaHQ8QSBleHRlbmRzIGFueVtdLCBSMSwgUjI+KGYyOiAoYTogUjEpID0+IFIyLCBmMTogKC4uLmFyZ3M6IEEpID0+IFIxKTogKC4uLmFyZ3M6IEEpID0+IFIyO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZ1bmN0aW9uIHRoYXQgZXhlY3V0ZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBpbiBzZXF1ZW5jZSBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzIGZ1bmN0aW9uIGlzIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgbmV4dCBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgYHRoaXNgIGNvbnRleHQgb2YgdGhlIHJldHVybmVkIGZ1bmN0aW9uIGlzIGFsc28gcGFzc2VkIHRvIHRoZSBmdW5jdGlvbnMgcHJvdmlkZWQgYXMgcGFyYW1ldGVycy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBmbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICpcbiAqIEBwYXJhbSB7KGE6IFIyKSA9PiBSM30gZjMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7KGE6IFIxKSA9PiBSMn0gZjIgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7KC4uLmFyZ3M6IEEpID0+IFIxfSBmMSBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHJldHVybnMgeyguLi5hcmdzOiBBKSA9PiBSM30gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYWRkID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB4ICsgeTtcbiAqIGNvbnN0IHNxdWFyZSA9IChuOiBudW1iZXIpID0+IG4gKiBuO1xuICogY29uc3QgZG91YmxlID0gKG46IG51bWJlcikgPT4gbiAqIDI7XG4gKlxuICogY29uc3QgY29tYmluZWQgPSBmbG93UmlnaHQoZG91YmxlLCBzcXVhcmUsIGFkZCk7XG4gKiBjb25zb2xlLmxvZyhjb21iaW5lZCgxLCAyKSk7IC8vIDE4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbG93UmlnaHQ8QSBleHRlbmRzIGFueVtdLCBSMSwgUjIsIFIzPihcbiAgZjM6IChhOiBSMikgPT4gUjMsXG4gIGYyOiAoYTogUjEpID0+IFIyLFxuICBmMTogKC4uLmFyZ3M6IEEpID0+IFIxXG4pOiAoLi4uYXJnczogQSkgPT4gUjM7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZnVuY3Rpb24gdGhhdCBleGVjdXRlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGluIHNlcXVlbmNlIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMgZnVuY3Rpb24gaXMgcGFzc2VkIGFzIGFuIGFyZ3VtZW50IHRvIHRoZSBuZXh0IGZ1bmN0aW9uLlxuICpcbiAqIFRoZSBgdGhpc2AgY29udGV4dCBvZiB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gaXMgYWxzbyBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9ucyBwcm92aWRlZCBhcyBwYXJhbWV0ZXJzLlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYGZsb3dgIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKlxuICogQHBhcmFtIHsoYTogUjMpID0+IFI0fSBmNCBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsoYTogUjIpID0+IFIzfSBmMyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsoYTogUjEpID0+IFIyfSBmMiBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsoLi4uYXJnczogQSkgPT4gUjF9IGYxIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcmV0dXJucyB7KC4uLmFyZ3M6IEEpID0+IFI0fSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBhZGQgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHggKyB5O1xuICogY29uc3Qgc3F1YXJlID0gKG46IG51bWJlcikgPT4gbiAqIG47XG4gKiBjb25zdCBkb3VibGUgPSAobjogbnVtYmVyKSA9PiBuICogMjtcbiAqIGNvbnN0IHRvU3RyID0gKG46IG51bWJlcikgPT4gbi50b1N0cmluZygpO1xuICpcbiAqIGNvbnN0IGNvbWJpbmVkID0gZmxvd1JpZ2h0KHRvU3RyLCBkb3VibGUsIHNxdWFyZSwgYWRkKTtcbiAqIGNvbnNvbGUubG9nKGNvbWJpbmVkKDEsIDIpKTsgIC8vICcxOCdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsb3dSaWdodDxBIGV4dGVuZHMgYW55W10sIFIxLCBSMiwgUjMsIFI0PihcbiAgZjQ6IChhOiBSMykgPT4gUjQsXG4gIGYzOiAoYTogUjIpID0+IFIzLFxuICBmMjogKGE6IFIxKSA9PiBSMixcbiAgZjE6ICguLi5hcmdzOiBBKSA9PiBSMVxuKTogKC4uLmFyZ3M6IEEpID0+IFI0O1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZ1bmN0aW9uIHRoYXQgZXhlY3V0ZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBpbiBzZXF1ZW5jZSBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzIGZ1bmN0aW9uIGlzIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgbmV4dCBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgYHRoaXNgIGNvbnRleHQgb2YgdGhlIHJldHVybmVkIGZ1bmN0aW9uIGlzIGFsc28gcGFzc2VkIHRvIHRoZSBmdW5jdGlvbnMgcHJvdmlkZWQgYXMgcGFyYW1ldGVycy5cbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBmbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICpcbiAqIEBwYXJhbSB7KGE6IFI0KSA9PiBSNX0gZjUgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7KGE6IFIzKSA9PiBSNH0gZjQgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7KGE6IFIyKSA9PiBSM30gZjMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7KGE6IFIxKSA9PiBSMn0gZjIgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7KC4uLmFyZ3M6IEEpID0+IFIxfSBmMSBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHJldHVybnMgeyguLi5hcmdzOiBBKSA9PiBSNX0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYWRkID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB4ICsgeTtcbiAqIGNvbnN0IHNxdWFyZSA9IChuOiBudW1iZXIpID0+IG4gKiBuO1xuICogY29uc3QgZG91YmxlID0gKG46IG51bWJlcikgPT4gbiAqIDI7XG4gKiBjb25zdCB0b1N0ciA9IChuOiBudW1iZXIpID0+IG4udG9TdHJpbmcoKTtcbiAqIGNvbnN0IHNwbGl0ID0gKHM6IHN0cmluZykgPT4gcy5zcGxpdCgnJyk7XG4gKlxuICogY29uc3QgY29tYmluZWQgPSBmbG93UmlnaHQoc3BsaXQsIHRvU3RyLCBkb3VibGUsIHNxdWFyZSwgYWRkKTtcbiAqIGNvbnNvbGUubG9nKGNvbWJpbmVkKDEsIDIpKTsgLy8gWycxJywgJzgnXVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxvd1JpZ2h0PEEgZXh0ZW5kcyBhbnlbXSwgUjEsIFIyLCBSMywgUjQsIFI1PihcbiAgZjU6IChhOiBSNCkgPT4gUjUsXG4gIGY0OiAoYTogUjMpID0+IFI0LFxuICBmMzogKGE6IFIyKSA9PiBSMyxcbiAgZjI6IChhOiBSMSkgPT4gUjIsXG4gIGYxOiAoLi4uYXJnczogQSkgPT4gUjFcbik6ICguLi5hcmdzOiBBKSA9PiBSNTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIHRoZSBnaXZlbiBmdW5jdGlvbnMgaW4gc2VxdWVuY2UgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cyBmdW5jdGlvbiBpcyBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIG5leHQgZnVuY3Rpb24uXG4gKlxuICogVGhlIGB0aGlzYCBjb250ZXh0IG9mIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBpcyBhbHNvIHBhc3NlZCB0byB0aGUgZnVuY3Rpb25zIHByb3ZpZGVkIGFzIHBhcmFtZXRlcnMuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqXG4gKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSkgPT4gYW55fSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAqIEByZXR1cm5zIHsoLi4uYXJnczogYW55W10pID0+IGFueX0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYWRkID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB4ICsgeTtcbiAqIGNvbnN0IHNxdWFyZSA9IChuOiBudW1iZXIpID0+IG4gKiBuO1xuICpcbiAqIGNvbnN0IGNvbWJpbmVkID0gZmxvd1JpZ2h0KHNxdWFyZSwgYWRkKTtcbiAqIGNvbnNvbGUubG9nKGNvbWJpbmVkKDEsIDIpKTsgLy8gOVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxvd1JpZ2h0KC4uLmZ1bmNzOiBBcnJheTwoLi4uYXJnczogYW55W10pID0+IGFueT4pOiAoLi4uYXJnczogYW55W10pID0+IGFueTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIHRoZSBnaXZlbiBmdW5jdGlvbnMgaW4gc2VxdWVuY2UgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cyBmdW5jdGlvbiBpcyBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIG5leHQgZnVuY3Rpb24uXG4gKlxuICogVGhlIGB0aGlzYCBjb250ZXh0IG9mIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBpcyBhbHNvIHBhc3NlZCB0byB0aGUgZnVuY3Rpb25zIHByb3ZpZGVkIGFzIHBhcmFtZXRlcnMuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqXG4gKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSkgPT4gYW55fSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAqIEByZXR1cm5zIHsoLi4uYXJnczogYW55W10pID0+IGFueX0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYWRkID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB4ICsgeTtcbiAqIGNvbnN0IHNxdWFyZSA9IChuOiBudW1iZXIpID0+IG4gKiBuO1xuICpcbiAqIGNvbnN0IGNvbWJpbmVkID0gZmxvd1JpZ2h0KHNxdWFyZSwgYWRkKTtcbiAqIGNvbnNvbGUubG9nKGNvbWJpbmVkKDEsIDIpKTsgLy8gOVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxvd1JpZ2h0KC4uLmZ1bmNzOiBBcnJheTwoLi4uYXJnczogYW55W10pID0+IGFueT4pOiAoLi4uYXJnczogYW55W10pID0+IGFueSB7XG4gIHJldHVybiBmbG93KC4uLmZ1bmNzLnJldmVyc2UoKSk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxJQUFJLFFBQVEsWUFBWTtBQStKakM7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDRCxPQUFPLFNBQVMsVUFBVSxHQUFHLEtBQXFDO0VBQ2hFLE9BQU8sUUFBUSxNQUFNLE9BQU87QUFDOUIifQ==
// denoCacheMetadata=2457398044049203044,8833005647404030301