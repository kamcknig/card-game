import { AbortError } from '../error/AbortError.ts';

interface DelayOptions {
  signal?: AbortSignal;
}

/**
 * Delays the execution of code for a specified number of milliseconds.
 *
 * This function returns a Promise that resolves after the specified delay, allowing you to use it
 * with async/await to pause execution.
 *
 * @param {number} ms - The number of milliseconds to delay.
 * @param {DelayOptions} options - The options object.
 * @param {AbortSignal} options.signal - An optional AbortSignal to cancel the delay.
 * @returns {Promise<void>} A Promise that resolves after the specified delay.
 *
 * @example
 * async function foo() {
 *   console.log('Start');
 *   await delay(1000); // Delays execution for 1 second
 *   console.log('End');
 * }
 *
 * foo();
 *
 * // With AbortSignal
 * const controller = new AbortController();
 * const { signal } = controller;
 *
 * setTimeout(() => controller.abort(), 50); // Will cancel the delay after 50ms
 * try {
 *   await delay(100, { signal });
 *  } catch (error) {
 *   console.error(error); // Will log 'AbortError'
 *  }
 * }
 */
export function delay(ms: number, { signal }: DelayOptions = {}): Promise<void> {
  return new Promise((resolve, reject) => {
    const abortError = () => {
      reject(new AbortError());
    };

    const abortHandler = () => {
      clearTimeout(timeoutId);
      abortError();
    };

    if (signal?.aborted) {
      return abortError();
    }

    const timeoutId = setTimeout(() => {
      signal?.removeEventListener('abort', abortHandler);
      resolve();
    }, ms);

    signal?.addEventListener('abort', abortHandler, { once: true });
  });
}

// denoCacheMetadata={"headers":{"x-goog-hash":"crc32c=TpFZDQ==,md5=8L/04+W+OVxzddatvRnBWw==","x-goog-stored-content-length":"1654","x-goog-generation":"1741509576044984","x-guploader-uploadid":"ABgVH89oBGfevtEgxaas5MP50xVXTiQHKLRyk6tYglDPWF6jBZyelwTMLdHBv5e7lDoy853SIiHehZ0","accept-ranges":"bytes","expires":"Fri, 26 Jun 2026 21:45:36 GMT","date":"Thu, 26 Jun 2025 21:45:36 GMT","x-goog-stored-content-encoding":"identity","content-length":"1654","x-goog-storage-class":"STANDARD","via":"1.1 google","etag":"\"f0bff4e3e5be395c7375d6adbd19c15b\"","content-type":"text/typescript","age":"0","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-jsr-cache-id":"ATL","last-modified":"Sun, 09 Mar 2025 08:39:36 GMT","x-robots-tag":"noindex","x-content-type-options":"nosniff","cache-control":"public, max-age=31536000, immutable","access-control-allow-origin":"*","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-goog-metageneration":"1","server":"UploadServer","x-jsr-cache-status":"revalidated","access-control-expose-headers":"*","cross-origin-resource-policy":"cross-origin"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/promise/delay.ts","time":1750974334}