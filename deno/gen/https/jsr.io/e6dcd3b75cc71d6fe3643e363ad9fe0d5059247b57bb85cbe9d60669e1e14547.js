/**
 * Returns an array of numbers from `0` (inclusive) to `end` (exclusive), incrementing by `1`.
 *
 * @param {number} end - The end number of the range (exclusive).
 * @returns {number[]} An array of numbers from `0` (inclusive) to `end` (exclusive) with a step of `1`.
 *
 * @example
 * // Returns [0, 1, 2, 3]
 * range(4);
 */ /**
 * Returns an array of numbers from `start` (inclusive) to `end` (exclusive), incrementing by `step`.
 *
 * @param {number} start - The starting number of the range (inclusive).
 * @param {number} end - The end number of the range (exclusive).
 * @param {number} step - The step value for the range.
 * @returns {number[]} An array of numbers from `start` (inclusive) to `end` (exclusive) with the specified `step`.
 * @throws {Error} Throws an error if the step value is not a non-zero integer.
 *
 * @example
 * // Returns [0, 1, 2, 3]
 * range(4);
 *
 * @example
 * // Returns [0, -1, -2, -3]
 * range(0, -4, -1);
 */ export function range(start, end, step = 1) {
  if (end == null) {
    end = start;
    start = 0;
  }
  if (!Number.isInteger(step) || step === 0) {
    throw new Error(`The step value must be a non-zero integer.`);
  }
  const length = Math.max(Math.ceil((end - start) / step), 0);
  const result = new Array(length);
  for(let i = 0; i < length; i++){
    result[i] = start + i * step;
  }
  return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9tYXRoL3JhbmdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBudW1iZXJzIGZyb20gYDBgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpLCBpbmNyZW1lbnRpbmcgYnkgYDFgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgLSBUaGUgZW5kIG51bWJlciBvZiB0aGUgcmFuZ2UgKGV4Y2x1c2l2ZSkuXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IEFuIGFycmF5IG9mIG51bWJlcnMgZnJvbSBgMGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSkgd2l0aCBhIHN0ZXAgb2YgYDFgLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXR1cm5zIFswLCAxLCAyLCAzXVxuICogcmFuZ2UoNCk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZShlbmQ6IG51bWJlcik6IG51bWJlcltdO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSksIGluY3JlbWVudGluZyBieSBgMWAuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gVGhlIHN0YXJ0aW5nIG51bWJlciBvZiB0aGUgcmFuZ2UgKGluY2x1c2l2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIC0gVGhlIGVuZCBudW1iZXIgb2YgdGhlIHJhbmdlIChleGNsdXNpdmUpLlxuICogQHJldHVybnMge251bWJlcltdfSBBbiBhcnJheSBvZiBudW1iZXJzIGZyb20gYHN0YXJ0YCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSB3aXRoIGEgc3RlcCBvZiBgMWAuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJldHVybnMgWzEsIDIsIDNdXG4gKiByYW5nZSgxLCA0KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogbnVtYmVyW107XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBudW1iZXJzIGZyb20gYHN0YXJ0YCAoaW5jbHVzaXZlKSB0byBgZW5kYCAoZXhjbHVzaXZlKSwgaW5jcmVtZW50aW5nIGJ5IGBzdGVwYC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBUaGUgc3RhcnRpbmcgbnVtYmVyIG9mIHRoZSByYW5nZSAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgLSBUaGUgZW5kIG51bWJlciBvZiB0aGUgcmFuZ2UgKGV4Y2x1c2l2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RlcCAtIFRoZSBzdGVwIHZhbHVlIGZvciB0aGUgcmFuZ2UuXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IEFuIGFycmF5IG9mIG51bWJlcnMgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpIHdpdGggdGhlIHNwZWNpZmllZCBgc3RlcGAuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJldHVybnMgWzAsIDUsIDEwLCAxNV1cbiAqIHJhbmdlKDAsIDIwLCA1KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyLCBzdGVwOiBudW1iZXIpOiBudW1iZXJbXTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgZnJvbSBgc3RhcnRgIChpbmNsdXNpdmUpIHRvIGBlbmRgIChleGNsdXNpdmUpLCBpbmNyZW1lbnRpbmcgYnkgYHN0ZXBgLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIFRoZSBzdGFydGluZyBudW1iZXIgb2YgdGhlIHJhbmdlIChpbmNsdXNpdmUpLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCAtIFRoZSBlbmQgbnVtYmVyIG9mIHRoZSByYW5nZSAoZXhjbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIC0gVGhlIHN0ZXAgdmFsdWUgZm9yIHRoZSByYW5nZS5cbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gQW4gYXJyYXkgb2YgbnVtYmVycyBmcm9tIGBzdGFydGAgKGluY2x1c2l2ZSkgdG8gYGVuZGAgKGV4Y2x1c2l2ZSkgd2l0aCB0aGUgc3BlY2lmaWVkIGBzdGVwYC5cbiAqIEB0aHJvd3Mge0Vycm9yfSBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHN0ZXAgdmFsdWUgaXMgbm90IGEgbm9uLXplcm8gaW50ZWdlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmV0dXJucyBbMCwgMSwgMiwgM11cbiAqIHJhbmdlKDQpO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXR1cm5zIFswLCAtMSwgLTIsIC0zXVxuICogcmFuZ2UoMCwgLTQsIC0xKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKHN0YXJ0OiBudW1iZXIsIGVuZD86IG51bWJlciwgc3RlcCA9IDEpOiBudW1iZXJbXSB7XG4gIGlmIChlbmQgPT0gbnVsbCkge1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihzdGVwKSB8fCBzdGVwID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgc3RlcCB2YWx1ZSBtdXN0IGJlIGEgbm9uLXplcm8gaW50ZWdlci5gKTtcbiAgfVxuXG4gIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoZW5kIC0gc3RhcnQpIC8gc3RlcCksIDApO1xuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXk8bnVtYmVyPihsZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBzdGFydCArIGkgKiBzdGVwO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0E4QkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDRCxPQUFPLFNBQVMsTUFBTSxLQUFhLEVBQUUsR0FBWSxFQUFFLE9BQU8sQ0FBQztFQUN6RCxJQUFJLE9BQU8sTUFBTTtJQUNmLE1BQU07SUFDTixRQUFRO0VBQ1Y7RUFFQSxJQUFJLENBQUMsT0FBTyxTQUFTLENBQUMsU0FBUyxTQUFTLEdBQUc7SUFDekMsTUFBTSxJQUFJLE1BQU0sQ0FBQywwQ0FBMEMsQ0FBQztFQUM5RDtFQUVBLE1BQU0sU0FBUyxLQUFLLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLE9BQU87RUFDekQsTUFBTSxTQUFTLElBQUksTUFBYztFQUVqQyxJQUFLLElBQUksSUFBSSxHQUFHLElBQUksUUFBUSxJQUFLO0lBQy9CLE1BQU0sQ0FBQyxFQUFFLEdBQUcsUUFBUSxJQUFJO0VBQzFCO0VBRUEsT0FBTztBQUNUIn0=
// denoCacheMetadata=4841159000449267374,5118189984780101768