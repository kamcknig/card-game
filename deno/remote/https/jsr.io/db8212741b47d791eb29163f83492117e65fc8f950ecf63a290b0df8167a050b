import { isObjectLike } from '../compat/predicate/isObjectLike.ts';

/**
 * Merges the properties of the source object into the target object.
 *
 * You can provide a custom `merge` function to control how properties are merged. It should return the value to be set in the target object.
 *
 * If it returns `undefined`, a default deep merge will be applied for arrays and objects:
 *
 * - If a property in the source object is an array or an object and the corresponding property in the target object is also an array or object, they will be merged.
 * - If a property in the source object is undefined, it will not overwrite a defined property in the target object.
 *
 * Note that this function mutates the target object.
 *
 * @param {T} target - The target object into which the source object properties will be merged. This object is modified in place.
 * @param {S} source - The source object whose properties will be merged into the target object.
 * @param {(targetValue: any, sourceValue: any, key: string, target: T, source: S) => any} merge - A custom merge function that defines how properties should be combined. It receives the following arguments:
 *   - `targetValue`: The current value of the property in the target object.
 *   - `sourceValue`: The value of the property in the source object.
 *   - `key`: The key of the property being merged.
 *   - `target`: The target object.
 *   - `source`: The source object.
 *
 * @returns {T & S} The updated target object with properties from the source object merged in.
 *
 * @template T - Type of the target object.
 * @template S - Type of the source object.
 *
 * @example
 * const target = { a: 1, b: 2 };
 * const source = { b: 3, c: 4 };
 *
 * mergeWith(target, source, (targetValue, sourceValue) => {
 *   if (typeof targetValue === 'number' && typeof sourceValue === 'number') {
 *     return targetValue + sourceValue;
 *   }
 * });
 * // Returns { a: 1, b: 5, c: 4 }
 * @example
 * const target = { a: [1], b: [2] };
 * const source = { a: [3], b: [4] };
 *
 * const result = mergeWith(target, source, (objValue, srcValue) => {
 *   if (Array.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * });
 *
 * expect(result).toEqual({ a: [1, 3], b: [2, 4] });
 */
export function mergeWith<T extends Record<PropertyKey, any>, S extends Record<PropertyKey, any>>(
  target: T,
  source: S,
  merge: (targetValue: any, sourceValue: any, key: string, target: T, source: S) => any
): T & S {
  const sourceKeys = Object.keys(source) as Array<keyof T>;

  for (let i = 0; i < sourceKeys.length; i++) {
    const key = sourceKeys[i];

    const sourceValue = source[key];
    const targetValue = target[key];

    const merged = merge(targetValue, sourceValue, key as string, target, source);

    if (merged != null) {
      target[key] = merged;
    } else if (Array.isArray(sourceValue)) {
      target[key] = mergeWith<any, S[keyof T]>(targetValue ?? [], sourceValue, merge);
    } else if (isObjectLike(targetValue) && isObjectLike(sourceValue)) {
      target[key] = mergeWith<any, S[keyof T]>(targetValue ?? {}, sourceValue, merge);
    } else if (targetValue === undefined || sourceValue !== undefined) {
      target[key] = sourceValue;
    }
  }

  return target;
}

// denoCacheMetadata={"headers":{"x-goog-generation":"1741509575038126","x-goog-stored-content-encoding":"identity","via":"1.1 google","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","x-goog-stored-content-length":"3260","etag":"\"e690a8fe135e5dd9ea88e6f28501f733\"","content-type":"text/typescript","content-length":"3260","server":"UploadServer","expires":"Fri, 26 Jun 2026 21:45:36 GMT","age":"0","x-goog-hash":"crc32c=XqnJSA==,md5=5pCo/hNeXdnqiObyhQH3Mw==","accept-ranges":"bytes","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-jsr-cache-status":"revalidated","x-robots-tag":"noindex","x-goog-metageneration":"1","access-control-allow-origin":"*","access-control-expose-headers":"*","cross-origin-resource-policy":"cross-origin","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","cache-control":"public, max-age=31536000, immutable","x-jsr-cache-id":"ATL","x-guploader-uploadid":"ABgVH89UmaHjwESI8raHo9-PAZ5XIS80OfLBLSz2_fVzM4BhEiqXlXtR3wRKBGFrT2FVFn-8abUPWhY","x-goog-storage-class":"STANDARD","date":"Thu, 26 Jun 2025 21:45:36 GMT","x-content-type-options":"nosniff"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/object/mergeWith.ts","time":1750974334}