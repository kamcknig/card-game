export class CardSourceController {
  match;
  _sourceMap;
  _tagMap;
  constructor(match){
    this.match = match;
    this._sourceMap = new Map();
    this._tagMap = new Map();
  }
  registerZone(sourceKey, source, index = NaN, tags = []) {
    const key = `${sourceKey}${isNaN(index) ? '' : ':' + index}`;
    if (this._sourceMap.has(sourceKey) || this._sourceMap.has(key)) {
      throw new Error(`Zone ${key} already exists`);
    }
    const newSource = source ?? [];
    this.match.cardSources[key] = newSource;
    this._sourceMap.set(key, newSource);
    for (const tag of tags){
      if (!this._tagMap.has(tag)) {
        this.match.cardSourceTagMap[tag] = [
          key
        ];
        this._tagMap.set(tag, [
          key
        ]);
      } else {
        this._tagMap.get(tag).push(key);
        this.match.cardSourceTagMap[tag].push(key);
      }
    }
    return newSource;
  }
  findCardSource(cardId) {
    for (const [sourceKey, source] of this._sourceMap){
      const idx = source.findIndex((id)=>id === cardId);
      if (idx !== -1) {
        const [key, playerId] = sourceKey.split(':');
        return {
          sourceKey: key,
          source,
          index: idx,
          playerId: Number(playerId)
        };
      }
    }
    throw new Error(`Source for card ${cardId} not found`);
  }
  getSource(sourceKey, index = NaN) {
    const key = `${sourceKey}${isNaN(index) ? '' : ':' + index}`;
    const source = this._sourceMap.get(key);
    if (!source) {
      throw new Error(`Source for key ${key} not found`);
    }
    return source;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vYXBwL3NlcnZlci9zcmMvY29yZS9jYXJkLXNvdXJjZS1jb250cm9sbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhcmRJZCwgQ2FyZExvY2F0aW9uLCBNYXRjaCB9IGZyb20gJ3NoYXJlZC9zaGFyZWQtdHlwZXMudHMnO1xuXG5leHBvcnQgY2xhc3MgQ2FyZFNvdXJjZUNvbnRyb2xsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IF9zb3VyY2VNYXA6IE1hcDxzdHJpbmcsIENhcmRJZFtdPiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBfdGFnTWFwOiBNYXA8c3RyaW5nLCBDYXJkTG9jYXRpb25bXT4gPSBuZXcgTWFwKCk7XG4gIFxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1hdGNoOiBNYXRjaCkge1xuICB9XG4gIFxuICByZWdpc3RlclpvbmUoc291cmNlS2V5OiBDYXJkTG9jYXRpb24sIHNvdXJjZTogQ2FyZElkW10sIGluZGV4OiBudW1iZXIgPSBOYU4sIHRhZ3M6IHN0cmluZ1tdID0gW10pIHtcbiAgICBjb25zdCBrZXkgPSBgJHtzb3VyY2VLZXl9JHtpc05hTihpbmRleCkgPyAnJyA6ICc6JyArIGluZGV4fWBcbiAgICBcbiAgICBpZiAodGhpcy5fc291cmNlTWFwLmhhcyhzb3VyY2VLZXkpIHx8IHRoaXMuX3NvdXJjZU1hcC5oYXMoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBab25lICR7a2V5fSBhbHJlYWR5IGV4aXN0c2ApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBuZXdTb3VyY2UgPSBzb3VyY2UgPz8gW107XG4gICAgdGhpcy5tYXRjaC5jYXJkU291cmNlc1trZXldID0gbmV3U291cmNlO1xuICAgIHRoaXMuX3NvdXJjZU1hcC5zZXQoa2V5LCBuZXdTb3VyY2UpO1xuICAgIFxuICAgIGZvciAoY29uc3QgdGFnIG9mIHRhZ3MpIHtcbiAgICAgIGlmICghdGhpcy5fdGFnTWFwLmhhcyh0YWcpKSB7XG4gICAgICAgIHRoaXMubWF0Y2guY2FyZFNvdXJjZVRhZ01hcFt0YWddID0gW2tleV07XG4gICAgICAgIHRoaXMuX3RhZ01hcC5zZXQodGFnLCBba2V5XSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fdGFnTWFwLmdldCh0YWcpIS5wdXNoKGtleSk7XG4gICAgICAgIHRoaXMubWF0Y2guY2FyZFNvdXJjZVRhZ01hcFt0YWddLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIG5ld1NvdXJjZTtcbiAgfVxuICBcbiAgZmluZENhcmRTb3VyY2UoY2FyZElkOiBDYXJkSWQpIHtcbiAgICBmb3IgKGNvbnN0IFtzb3VyY2VLZXksIHNvdXJjZV0gb2YgdGhpcy5fc291cmNlTWFwKSB7XG4gICAgICBjb25zdCBpZHggPSBzb3VyY2UuZmluZEluZGV4KGlkID0+IGlkID09PSBjYXJkSWQpO1xuICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgWyBrZXksIHBsYXllcklkIF0gPSBzb3VyY2VLZXkuc3BsaXQoJzonKTtcbiAgICAgICAgcmV0dXJuIHsgc291cmNlS2V5OiBrZXksIHNvdXJjZSwgaW5kZXg6IGlkeCwgcGxheWVySWQ6IE51bWJlcihwbGF5ZXJJZCkgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdGhyb3cgbmV3IEVycm9yKGBTb3VyY2UgZm9yIGNhcmQgJHtjYXJkSWR9IG5vdCBmb3VuZGApO1xuICB9XG4gIFxuICBnZXRTb3VyY2Uoc291cmNlS2V5OiBDYXJkTG9jYXRpb24sIGluZGV4OiBudW1iZXIgPSBOYU4pIHtcbiAgICBjb25zdCBrZXkgPSBgJHtzb3VyY2VLZXl9JHtpc05hTihpbmRleCkgPyAnJyA6ICc6JyArIGluZGV4fWBcbiAgICBcbiAgICBjb25zdCBzb3VyY2UgPSB0aGlzLl9zb3VyY2VNYXAuZ2V0KGtleSk7XG4gICAgXG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU291cmNlIGZvciBrZXkgJHtrZXl9IG5vdCBmb3VuZGApO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG59Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sTUFBTTs7RUFDTSxXQUE4QztFQUM5QyxRQUFpRDtFQUVsRSxZQUFZLEFBQVEsS0FBWSxDQUFFO1NBQWQsUUFBQTtTQUhILGFBQW9DLElBQUk7U0FDeEMsVUFBdUMsSUFBSTtFQUc1RDtFQUVBLGFBQWEsU0FBdUIsRUFBRSxNQUFnQixFQUFFLFFBQWdCLEdBQUcsRUFBRSxPQUFpQixFQUFFLEVBQUU7SUFDaEcsTUFBTSxNQUFNLEdBQUcsWUFBWSxNQUFNLFNBQVMsS0FBSyxNQUFNLE9BQU87SUFFNUQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU07TUFDOUQsTUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxlQUFlLENBQUM7SUFDOUM7SUFFQSxNQUFNLFlBQVksVUFBVSxFQUFFO0lBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRztJQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLO0lBRXpCLEtBQUssTUFBTSxPQUFPLEtBQU07TUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU07UUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEdBQUc7VUFBQztTQUFJO1FBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUs7VUFBQztTQUFJO01BQzdCLE9BQ0s7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFNLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDeEM7SUFDRjtJQUVBLE9BQU87RUFDVDtFQUVBLGVBQWUsTUFBYyxFQUFFO0lBQzdCLEtBQUssTUFBTSxDQUFDLFdBQVcsT0FBTyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUU7TUFDakQsTUFBTSxNQUFNLE9BQU8sU0FBUyxDQUFDLENBQUEsS0FBTSxPQUFPO01BQzFDLElBQUksUUFBUSxDQUFDLEdBQUc7UUFDZCxNQUFNLENBQUUsS0FBSyxTQUFVLEdBQUcsVUFBVSxLQUFLLENBQUM7UUFDMUMsT0FBTztVQUFFLFdBQVc7VUFBSztVQUFRLE9BQU87VUFBSyxVQUFVLE9BQU87UUFBVTtNQUMxRTtJQUNGO0lBRUEsTUFBTSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLFVBQVUsQ0FBQztFQUN2RDtFQUVBLFVBQVUsU0FBdUIsRUFBRSxRQUFnQixHQUFHLEVBQUU7SUFDdEQsTUFBTSxNQUFNLEdBQUcsWUFBWSxNQUFNLFNBQVMsS0FBSyxNQUFNLE9BQU87SUFFNUQsTUFBTSxTQUFTLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO0lBRW5DLElBQUksQ0FBQyxRQUFRO01BQ1gsTUFBTSxJQUFJLE1BQU0sQ0FBQyxlQUFlLEVBQUUsSUFBSSxVQUFVLENBQUM7SUFDbkQ7SUFFQSxPQUFPO0VBQ1Q7QUFDRiJ9
// denoCacheMetadata=13119271925728316334,18096391813714647539