import { clamp } from './clamp.ts';
import { random as randomToolkit } from '../../math/random.ts';
import { randomInt as randomIntToolkit } from '../../math/randomInt.ts';
/**
 * Generate a random number within the given range.
 *
 * @param {number} minimum - The lower bound (inclusive).
 * @param {number} maximum - The upper bound (exclusive).
 * @returns {number} A random number between minimum (inclusive) and maximum (exclusive). The number can be an integer or a decimal.
 * @throws {Error} Throws an error if `maximum` is not greater than `minimum`.
 *
 * @example
 * const result1 = random(0, 5); // Returns a random number between 0 and 5.
 * const result2 = random(5, 0); // If the minimum is greater than the maximum, an error is thrown.
 * const result3 = random(5, 5); // If the minimum is equal to the maximum, an error is thrown.
 */ export function random(...args) {
  let minimum = 0;
  let maximum = 1;
  let floating = false;
  switch(args.length){
    case 1:
      {
        if (typeof args[0] === 'boolean') {
          floating = args[0];
        } else {
          maximum = args[0];
        }
        break;
      }
    case 2:
      {
        if (typeof args[1] === 'boolean') {
          maximum = args[0];
          floating = args[1];
        } else {
          minimum = args[0];
          maximum = args[1];
        }
      }
    // eslint-disable-next-line no-fallthrough
    case 3:
      {
        if (typeof args[2] === 'object' && args[2] != null && args[2][args[1]] === args[0]) {
          minimum = 0;
          maximum = args[0];
          floating = false;
        } else {
          minimum = args[0];
          maximum = args[1];
          floating = args[2];
        }
      }
  }
  if (typeof minimum !== 'number') {
    minimum = Number(minimum);
  }
  if (typeof maximum !== 'number') {
    minimum = Number(maximum);
  }
  if (!minimum) {
    minimum = 0;
  }
  if (!maximum) {
    maximum = 0;
  }
  if (minimum > maximum) {
    [minimum, maximum] = [
      maximum,
      minimum
    ];
  }
  minimum = clamp(minimum, -Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
  maximum = clamp(maximum, -Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
  if (minimum === maximum) {
    return minimum;
  }
  if (floating) {
    return randomToolkit(minimum, maximum + 1);
  } else {
    return randomIntToolkit(minimum, maximum + 1);
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=12968764297199505536,9881799946077988976