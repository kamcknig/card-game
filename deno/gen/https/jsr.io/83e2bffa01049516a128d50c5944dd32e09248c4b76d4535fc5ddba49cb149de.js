import { identity } from '../../function/identity.ts';
import { property } from '../object/property.ts';
import { matches } from '../predicate/matches.ts';
import { matchesProperty } from '../predicate/matchesProperty.ts';
/**
 * Checks if there is an element in an array that matches the given predicate.
 *
 * Iteration is stopped once there is an element that matches `predicate`.
 *
 * @template T
 * @param {ArrayLike<T> | Record<string, any> | null | undefined} source The source to iterate over.
 * @param {((item: T, index: number, arr: any) => unknown) | Partial<T> | [keyof T, unknown] | PropertyKey} [predicate=identity] The function invoked per iteration.
 * If a property name or an object is provided it will be used to create a predicate function.
 * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
 *
 * @example
 * some([1, 2, 3, 4], n => n % 2 === 0);
 * // => true
 *
 * some([{ a: 1 }, { a: 2 }, { a: 3 }], { a: 2 });
 * // => true
 *
 * some([{ a: 1 }, { a: 2 }, { a: 3 }], ['a', 2]);
 * // => true
 *
 * some([{ a: 1 }, { a: 2 }, { a: 3 }], 'a');
 * // => true
 *
 * some({ a: 1, b: 2, c: 3 }, n => n % 2 === 0);
 * // => true
 *
 * some({ a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } }, { name: 'Bob' });
 * // => true
 *
 * some({ a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } }, ['name', 'Alice']);
 * // => true
 *
 * some({ a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } }, 'name');
 * // => true
 */ export function some(source, predicate, guard) {
  if (!source) {
    return false;
  }
  if (guard != null) {
    predicate = undefined;
  }
  if (!predicate) {
    predicate = identity;
  }
  const values = Array.isArray(source) ? source : Object.values(source);
  switch(typeof predicate){
    case 'function':
      {
        if (!Array.isArray(source)) {
          const keys = Object.keys(source);
          for(let i = 0; i < keys.length; i++){
            const key = keys[i];
            const value = source[key];
            if (predicate(value, key, source)) {
              return true;
            }
          }
          return false;
        }
        return values.some(predicate);
      }
    case 'object':
      {
        if (Array.isArray(predicate) && predicate.length === 2) {
          const key = predicate[0];
          const value = predicate[1];
          return values.some(matchesProperty(key, value));
        } else {
          return values.some(matches(predicate));
        }
      }
    case 'number':
    case 'symbol':
    case 'string':
      {
        return values.some(property(predicate));
      }
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=15676174379432992117,13264583581547342169