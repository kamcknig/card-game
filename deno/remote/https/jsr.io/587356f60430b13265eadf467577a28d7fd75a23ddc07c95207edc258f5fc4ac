/**
 * Checks if a given value is a plain object.
 *
 * A plain object is an object created by the `{}` literal, `new Object()`, or
 * `Object.create(null)`.
 *
 * This function also handles objects with custom
 * `Symbol.toStringTag` properties.
 *
 * `Symbol.toStringTag` is a built-in symbol that a constructor can use to customize the
 * default string description of objects.
 *
 * @param {unknown} [object] - The value to check.
 * @returns {boolean} - True if the value is a plain object, otherwise false.
 *
 * @example
 * console.log(isPlainObject({})); // true
 * console.log(isPlainObject([])); // false
 * console.log(isPlainObject(null)); // false
 * console.log(isPlainObject(Object.create(null))); // true
 * console.log(isPlainObject(new Map())); // false
 */
export function isPlainObject(object?: unknown): boolean {
  if (typeof object !== 'object') {
    return false;
  }

  if (object == null) {
    return false;
  }

  if (Object.getPrototypeOf(object) === null) {
    return true;
  }

  if (Object.prototype.toString.call(object) !== '[object Object]') {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const tag = object[Symbol.toStringTag];

    if (tag == null) {
      return false;
    }

    const isTagReadonly = !Object.getOwnPropertyDescriptor(object, Symbol.toStringTag)?.writable;

    if (isTagReadonly) {
      return false;
    }

    return object.toString() === `[object ${tag}]`;
  }

  let proto = object;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(object) === proto;
}

// denoCacheMetadata={"headers":{"x-goog-storage-class":"STANDARD","accept-ranges":"bytes","x-goog-stored-content-encoding":"identity","server":"UploadServer","date":"Thu, 26 Jun 2025 21:45:35 GMT","cache-control":"public, max-age=31536000, immutable","etag":"\"bab1270d0005aaf6249f51c9e5747230\"","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-hash":"crc32c=FQe3BQ==,md5=urEnDQAFqvYkn1HJ5XRyMA==","x-goog-metageneration":"1","x-jsr-cache-id":"ATL","access-control-allow-origin":"*","access-control-expose-headers":"*","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","via":"1.1 google","expires":"Fri, 26 Jun 2026 21:45:35 GMT","cross-origin-resource-policy":"cross-origin","x-goog-generation":"1741509575559855","content-length":"1640","x-content-type-options":"nosniff","x-guploader-uploadid":"ABgVH88-j8fWcnYy6Pg8P9lLiBXxqo898gmJbzqqNPpmYLgZxzn9BGJE5EYvhcWNGRXLr1Ct","x-jsr-cache-status":"revalidated","x-goog-stored-content-length":"1640","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","age":"0","x-robots-tag":"noindex","content-type":"text/typescript"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/predicate/isPlainObject.ts","time":1750974334}