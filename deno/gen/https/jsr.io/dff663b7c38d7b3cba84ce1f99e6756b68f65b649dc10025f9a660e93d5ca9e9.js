import { isDeepKey } from '../_internal/isDeepKey.ts';
import { toKey } from '../_internal/toKey.ts';
import { toPath } from '../util/toPath.ts';
/**
 * Retrieves the value at a given path from an object. If the resolved value is undefined, the defaultValue is returned instead.
 *
 * @param {unknown} object - The object to query.
 * @param {PropertyKey | readonly PropertyKey[]} path - The path of the property to get.
 * @param {unknown} [defaultValue] - The value returned if the resolved value is undefined.
 * @returns {any} - Returns the resolved value.
 */ export function get(object, path, defaultValue) {
  if (object == null) {
    return defaultValue;
  }
  switch(typeof path){
    case 'string':
      {
        const result = object[path];
        if (result === undefined) {
          if (isDeepKey(path)) {
            return get(object, toPath(path), defaultValue);
          } else {
            return defaultValue;
          }
        }
        return result;
      }
    case 'number':
    case 'symbol':
      {
        if (typeof path === 'number') {
          path = toKey(path);
        }
        const result = object[path];
        if (result === undefined) {
          return defaultValue;
        }
        return result;
      }
    default:
      {
        if (Array.isArray(path)) {
          return getWithPath(object, path, defaultValue);
        }
        if (Object.is(path?.valueOf(), -0)) {
          path = '-0';
        } else {
          path = String(path);
        }
        const result = object[path];
        if (result === undefined) {
          return defaultValue;
        }
        return result;
      }
  }
}
function getWithPath(object, path, defaultValue) {
  if (path.length === 0) {
    return defaultValue;
  }
  let current = object;
  for(let index = 0; index < path.length; index++){
    if (current == null) {
      return defaultValue;
    }
    current = current[path[index]];
  }
  if (current === undefined) {
    return defaultValue;
  }
  return current;
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=8333538821306879418,9341821598152725323