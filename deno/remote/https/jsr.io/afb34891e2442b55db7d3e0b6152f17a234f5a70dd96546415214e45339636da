import { isPrimitive } from '../predicate/isPrimitive.ts';
import { isTypedArray } from '../predicate/isTypedArray.ts';

/**
 * Creates a shallow clone of the given object.
 *
 * @template T - The type of the object.
 * @param {T} obj - The object to clone.
 * @returns {T} - A shallow clone of the given object.
 *
 * @example
 * // Clone a primitive values
 * const num = 29;
 * const clonedNum = clone(num);
 * console.log(clonedNum); // 29
 * console.log(clonedNum === num) ; // true
 *
 * @example
 * // Clone an array
 * const arr = [1, 2, 3];
 * const clonedArr = clone(arr);
 * console.log(clonedArr); // [1, 2, 3]
 * console.log(clonedArr === arr); // false
 *
 * @example
 * // Clone an object
 * const obj = { a: 1, b: 'es-toolkit', c: [1, 2, 3] };
 * const clonedObj = clone(obj);
 * console.log(clonedObj); // { a: 1, b: 'es-toolkit', c: [1, 2, 3] }
 * console.log(clonedObj === obj); // false
 */
export function clone<T>(obj: T): T {
  if (isPrimitive(obj)) {
    return obj;
  }

  if (
    Array.isArray(obj) ||
    isTypedArray(obj) ||
    obj instanceof ArrayBuffer ||
    (typeof SharedArrayBuffer !== 'undefined' && obj instanceof SharedArrayBuffer)
  ) {
    return obj.slice(0) as T;
  }

  const prototype = Object.getPrototypeOf(obj);
  const Constructor = prototype.constructor;

  if (obj instanceof Date || obj instanceof Map || obj instanceof Set) {
    return new Constructor(obj);
  }

  if (obj instanceof RegExp) {
    const newRegExp = new Constructor(obj);
    newRegExp.lastIndex = obj.lastIndex;

    return newRegExp;
  }

  if (obj instanceof DataView) {
    return new Constructor(obj.buffer.slice(0));
  }

  if (obj instanceof Error) {
    const newError = new Constructor(obj.message);

    newError.stack = obj.stack;
    newError.name = obj.name;
    newError.cause = obj.cause;

    return newError;
  }

  if (typeof File !== 'undefined' && obj instanceof File) {
    const newFile = new Constructor([obj], obj.name, { type: obj.type, lastModified: obj.lastModified });
    return newFile;
  }

  if (typeof obj === 'object') {
    const newObject = Object.create(prototype);
    return Object.assign(newObject, obj);
  }

  return obj;
}

// denoCacheMetadata={"headers":{"alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","cross-origin-resource-policy":"cross-origin","date":"Thu, 26 Jun 2025 21:45:35 GMT","expires":"Fri, 26 Jun 2026 21:45:35 GMT","age":"0","content-length":"2186","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-stored-content-encoding":"identity","x-goog-stored-content-length":"2186","x-goog-generation":"1741509574798652","x-jsr-cache-id":"ATL","accept-ranges":"bytes","x-goog-hash":"crc32c=kwIdiw==,md5=3KL5hIKvW+/qVbmPPsHMhw==","x-goog-storage-class":"STANDARD","x-goog-metageneration":"1","access-control-allow-origin":"*","server":"UploadServer","x-guploader-uploadid":"ABgVH89Ul8xz_T_aKvPil5n-MaZP3hN_Ml0ByjUH2bOmsj0tLRbE5jpQQnq5AqYb1eIvQDP8_1k0LU0","cache-control":"public, max-age=31536000, immutable","last-modified":"Sun, 09 Mar 2025 08:39:34 GMT","content-type":"text/typescript","x-jsr-cache-status":"revalidated","etag":"\"dca2f98482af5befea55b98f3ec1cc87\"","via":"1.1 google","x-robots-tag":"noindex","access-control-expose-headers":"*","x-content-type-options":"nosniff"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/object/clone.ts","time":1750974334}