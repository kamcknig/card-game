import { cloneDeep } from './cloneDeep.ts';
import { merge } from './merge.ts';

/**
 * Merges the properties of the source object into a deep clone of the target object.
 * Unlike `merge`, This function does not modify the original target object.
 *
 * This function performs a deep merge, meaning nested objects and arrays are merged recursively.
 *
 * - If a property in the source object is an array or object and the corresponding property in the target object is also an array or object, they will be merged.
 * - If a property in the source object is undefined, it will not overwrite a defined property in the target object.
 *
 * Note that this function does not mutate the target object.
 *
 * @param {T} target - The target object to be cloned and merged into. This object is not modified directly.
 * @param {S} source - The source object whose properties will be merged into the cloned target object.
 * @returns {T & S} A new object with properties from the source object merged into a deep clone of the target object.
 *
 * @template T - Type of the target object.
 * @template S - Type of the source object.
 *
 * @example
 * const target = { a: 1, b: { x: 1, y: 2 } };
 * const source = { b: { y: 3, z: 4 }, c: 5 };
 *
 * const result = toMerged(target, source);
 * console.log(result);
 * // Output: { a: 1, b: { x: 1, y: 3, z: 4 }, c: 5 }
 *
 * @example
 * const target = { a: [1, 2], b: { x: 1 } };
 * const source = { a: [3], b: { y: 2 } };
 *
 * const result = toMerged(target, source);
 * console.log(result);
 * // Output: { a: [3, 2], b: { x: 1, y: 2 } }
 *
 * @example
 * const target = { a: null };
 * const source = { a: [1, 2, 3] };
 *
 * const result = toMerged(target, source);
 * console.log(result);
 * // Output: { a: [1, 2, 3] }
 */
export function toMerged<T extends Record<PropertyKey, any>, S extends Record<PropertyKey, any>>(
  target: T,
  source: S
): T & S {
  return merge(cloneDeep(target), source);
}

// denoCacheMetadata={"headers":{"x-goog-hash":"crc32c=cGRcTQ==,md5=Rbuq2pRyYjXlAiiIY7sj6w==","x-goog-storage-class":"STANDARD","accept-ranges":"bytes","server":"UploadServer","content-type":"text/typescript","expires":"Fri, 26 Jun 2026 21:45:36 GMT","age":"0","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-guploader-uploadid":"ABgVH8_3M4m9TDn894LACRM5aqXJh1vZq0m6OFaRMwA6z1ReknsOIOq3-j3vUoxmdoxnVubDZu8Pveg","content-length":"1946","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","via":"1.1 google","x-goog-stored-content-length":"1946","x-jsr-cache-id":"ATL","x-robots-tag":"noindex","access-control-allow-origin":"*","cache-control":"public, max-age=31536000, immutable","date":"Thu, 26 Jun 2025 21:45:36 GMT","x-goog-generation":"1741509574996183","x-jsr-cache-status":"revalidated","etag":"\"45bbaada94726235e502288863bb23eb\"","access-control-expose-headers":"*","x-goog-metageneration":"1","cross-origin-resource-policy":"cross-origin","x-content-type-options":"nosniff","x-goog-stored-content-encoding":"identity"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/object/toMerged.ts","time":1750974335}