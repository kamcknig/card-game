import { last } from './last.ts';
import { difference as differenceToolkit } from '../../array/difference.ts';
import { differenceBy as differenceByToolkit } from '../../array/differenceBy.ts';
import { flattenArrayLike } from '../_internal/flattenArrayLike.ts';
import { isArrayLikeObject } from '../predicate/isArrayLikeObject.ts';
import { iteratee as createIteratee } from '../util/iteratee.ts';
/**
 * Computes the difference between an array and multiple arrays using an iteratee function.
 *
 * @template T
 * @param {ArrayLike<T> | null | undefined} arr - The primary array from which to derive the difference.
 * @param {...any[]} values - Multiple arrays containing elements to be excluded from the primary array.
 * @returns {T[]} A new array containing the elements that are present in the primary array but not in the values arrays.
 */ export function differenceBy(arr, ..._values) {
  if (!isArrayLikeObject(arr)) {
    return [];
  }
  const iteratee = last(_values);
  const values = flattenArrayLike(_values);
  if (isArrayLikeObject(iteratee)) {
    return differenceToolkit(Array.from(arr), values);
  }
  return differenceByToolkit(Array.from(arr), values, createIteratee(iteratee));
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=17812373595659258125,11710682006071218665