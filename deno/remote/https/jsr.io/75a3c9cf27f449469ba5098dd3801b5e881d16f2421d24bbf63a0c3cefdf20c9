/**
 * Checks if the value is less than the maximum.
 *
 * @param {number} value The value to check.
 * @param {number} maximum The upper bound of the range (exclusive).
 * @returns {boolean} `true` if the value is less than the maximum, otherwise `false`.
 *
 * @example
 * const result = inRange(3, 5); // result will be true.
 * const result2 = inRange(5, 5); // result2 will be false.
 */
export function inRange(value: number, maximum: number): boolean;

/**
 * Checks if the value is within the range defined by minimum (inclusive) and maximum (exclusive).
 *
 * @param {number} value The value to check.
 * @param {number} minimum The lower bound of the range (inclusive).
 * @param {number} maximum The upper bound of the range (exclusive).
 * @returns {boolean} `true` if the value is within the specified range, otherwise `false`.
 *
 * @example
 * const result = inRange(3, 2, 5); // result will be true.
 * const result2 = inRange(1, 2, 5); // result2 will be false.
 */
export function inRange(value: number, minimum: number, maximum: number): boolean;

/**
 * Checks if the value is within a specified range.
 *
 * @param {number} value The value to check.
 * @param {number} minimum The lower bound of the range (inclusive).
 * @param {number} maximum The upper bound of the range (exclusive).
 * @returns {boolean} `true` if the value is within the specified range, otherwise `false`.
 * @throws {Error} Throws an error if the `minimum` is greater or equal than the `maximum`.
 *
 * @example
 * const result1 = inRange(3, 5); // result1 will be true.
 * const result2 = inRange(1, 2, 5); // result2 will be false.
 * const result3 = inRange(1, 5, 2); // If the minimum is greater or equal than the maximum, an error is thrown.
 */
export function inRange(value: number, minimum: number, maximum?: number): boolean {
  if (maximum == null) {
    maximum = minimum;
    minimum = 0;
  }

  if (minimum >= maximum) {
    throw new Error('The maximum value must be greater than the minimum value.');
  }

  return minimum <= value && value < maximum;
}

// denoCacheMetadata={"headers":{"x-guploader-uploadid":"ABgVH8-zXAMs29a6LeG6pKl586_EAPighZNXC2I8ro0jmyKyy8lEBdYlP53MWGSK7L7-SJQikQZ3PIs","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-hash":"crc32c=Qy6Ppw==,md5=6FLWpp1ULx0Zm+MfiVtR6w==","x-goog-storage-class":"STANDARD","content-type":"text/typescript","cross-origin-resource-policy":"cross-origin","x-goog-generation":"1741509575793983","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","etag":"\"e852d6a69d542f1d199be31f895b51eb\"","x-jsr-cache-id":"ATL","access-control-allow-origin":"*","x-robots-tag":"noindex","content-length":"2065","server":"UploadServer","expires":"Fri, 26 Jun 2026 21:45:35 GMT","cache-control":"public, max-age=31536000, immutable","via":"1.1 google","x-jsr-cache-status":"revalidated","x-goog-metageneration":"1","access-control-expose-headers":"*","date":"Thu, 26 Jun 2025 21:45:35 GMT","x-content-type-options":"nosniff","x-goog-stored-content-encoding":"identity","x-goog-stored-content-length":"2065","age":"0","accept-ranges":"bytes"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/math/inRange.ts","time":1750974334}