import { inRange as inRangeToolkit } from '../../math/inRange.ts';

/**
 * Checks if the value is less than the maximum.
 *
 * @param {number} value The value to check.
 * @param {number} maximum The upper bound of the range (exclusive).
 * @returns {boolean} `true` if the value is less than the maximum, otherwise `false`.
 *
 * @example
 * const result = inRange(3, 5); // result will be true.
 * const result2 = inRange(5, 5); // result2 will be false.
 */
export function inRange(value: number, maximum: number): boolean;

/**
 * Checks if the value is within the range defined by minimum (inclusive) and maximum (exclusive).
 *
 * @param {number} value The value to check.
 * @param {number} minimum The lower bound of the range (inclusive).
 * @param {number} maximum The upper bound of the range (exclusive).
 * @returns {boolean} `true` if the value is within the specified range, otherwise `false`.
 *
 * @example
 * const result = inRange(3, 2, 5); // result will be true.
 * const result2 = inRange(1, 2, 5); // result2 will be false.
 */
export function inRange(value: number, minimum: number, maximum: number): boolean;

/**
 * Checks if the value is within a specified range.
 *
 * @param {number} value The value to check.
 * @param {number} minimum The lower bound of the range (inclusive).
 * @param {number} maximum The upper bound of the range (exclusive).
 * @returns {boolean} `true` if the value is within the specified range, otherwise `false`.
 * @throws {Error} Throws an error if the `minimum` is greater or equal than the `maximum`.
 *
 * @example
 * const result1 = inRange(3, 5); // result1 will be true.
 * const result2 = inRange(1, 2, 5); // result2 will be false.
 * const result3 = inRange(1, 5, 2); // If the minimum is greater or equal than the maximum, an error is thrown.
 */
export function inRange(value: number, minimum: number, maximum?: number): boolean {
  if (!minimum) {
    minimum = 0;
  }

  if (maximum != null && !maximum) {
    maximum = 0;
  }

  if (minimum != null && typeof minimum !== 'number') {
    minimum = Number(minimum);
  }

  if (maximum == null && minimum === 0) {
    return false;
  }

  if (maximum != null && typeof maximum !== 'number') {
    maximum = Number(maximum);
  }

  if (maximum != null && minimum > maximum) {
    [minimum, maximum] = [maximum, minimum];
  }

  if (minimum === maximum) {
    return false;
  }

  return inRangeToolkit(value, minimum, maximum!);
}

// denoCacheMetadata={"headers":{"content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-generation":"1741509575386111","x-goog-metageneration":"1","cache-control":"public, max-age=31536000, immutable","x-robots-tag":"noindex","x-content-type-options":"nosniff","x-goog-hash":"crc32c=xPl7YQ==,md5=dRZhfzmrr8/gn2VBDE9upA==","x-jsr-cache-id":"ATL","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","x-guploader-uploadid":"ABgVH8-ywdgKQv0uc4jKL1oN0hu52g8Kf2YKCPENH1yeY9yeJNzu0rEY6hPc9DXLkyQx6zM_CzEk3wE","x-goog-stored-content-length":"2449","x-goog-storage-class":"STANDARD","content-type":"text/typescript","via":"1.1 google","x-jsr-cache-status":"revalidated","access-control-allow-origin":"*","date":"Thu, 26 Jun 2025 21:45:35 GMT","server":"UploadServer","expires":"Fri, 26 Jun 2026 21:45:35 GMT","content-length":"2449","etag":"\"7516617f39abafcfe09f65410c4f6ea4\"","access-control-expose-headers":"*","cross-origin-resource-policy":"cross-origin","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-goog-stored-content-encoding":"identity","accept-ranges":"bytes","age":"0"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/math/inRange.ts","time":1750974334}