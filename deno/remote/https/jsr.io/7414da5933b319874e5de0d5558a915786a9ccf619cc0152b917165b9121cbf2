// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.

import { DAY } from "./constants.ts";

/**
 * Returns the number of the day in the year in the local time zone.
 *
 * @param date Date to get the day of the year of.
 * @return Number of the day in the year in the local time zone.
 *
 * @example Basic usage
 * ```ts
 * import { dayOfYear } from "@std/datetime/day-of-year";
 * import { assertEquals } from "@std/assert";
 *
 * assertEquals(dayOfYear(new Date("2019-03-11T03:24:00")), 70);
 * ```
 */
export function dayOfYear(date: Date): number {
  // Values from 0 to 99 map to the years 1900 to 1999. All other values are the actual year. (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)
  // Using setFullYear as a workaround

  const yearStart = new Date(date);

  yearStart.setFullYear(date.getFullYear(), 0, 0);
  const diff = (date.getTime() - date.getTimezoneOffset() * 60 * 1000) -
    (yearStart.getTime() - yearStart.getTimezoneOffset() * 60 * 1000);

  return Math.floor(diff / DAY);
}

/**
 * Returns the number of the day in the year in UTC time.
 *
 * @param date Date to get the day of the year of.
 * @return Number of the day in the year in UTC time.
 *
 * @example Usage
 * ```ts
 * import { dayOfYearUtc } from "@std/datetime/day-of-year";
 * import { assertEquals } from "@std/assert";
 *
 * assertEquals(dayOfYearUtc(new Date("2019-03-11T03:24:00.000Z")), 70);
 * ```
 */
export function dayOfYearUtc(date: Date): number {
  // Values from 0 to 99 map to the years 1900 to 1999. All other values are the actual year. (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)
  // Using setUTCFullYear as a workaround

  const yearStart = new Date(date);

  yearStart.setUTCFullYear(date.getUTCFullYear(), 0, 0);
  const diff = date.getTime() - yearStart.getTime();

  return Math.floor(diff / DAY);
}

// denoCacheMetadata={"headers":{"cross-origin-resource-policy":"cross-origin","x-goog-hash":"crc32c=w0Gqog==,md5=ml17J+nDObNAZIvQqlRjSg==","content-length":"1968","accept-ranges":"bytes","last-modified":"Fri, 12 Jul 2024 10:50:27 GMT","age":"0","access-control-expose-headers":"*","x-goog-generation":"1720781427415657","access-control-allow-origin":"*","x-guploader-uploadid":"ABgVH8_Pt_tbUOHVJ9vxz7q-xs2rIL15FddiPvy_22QGMLD0NfFCoBxp82Lp8CdNMeJpKPgF","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","expires":"Fri, 26 Jun 2026 21:45:36 GMT","etag":"\"9a5d7b27e9c339b340648bd0aa54634a\"","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","content-type":"text/typescript","x-jsr-cache-status":"revalidated","x-goog-storage-class":"STANDARD","x-goog-stored-content-length":"1968","server":"UploadServer","date":"Thu, 26 Jun 2025 21:45:36 GMT","x-robots-tag":"noindex","x-goog-stored-content-encoding":"identity","cache-control":"public, max-age=31536000, immutable","x-jsr-cache-id":"ATL","x-goog-metageneration":"1","via":"1.1 google"},"url":"https://jsr.io/@std/datetime/0.224.3/day_of_year.ts","time":1750974335}