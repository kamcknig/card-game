var _computedKey, _computedKey1;
import { toNumber } from 'es-toolkit/compat';
/**
 * A base match configuration that can be used to spread default values.
 *
 * The `supply.baseCards` property contains all possible base supply card combinations for the number
 * of players in a given game.
 */ export const MatchBaseConfiguration = {
  numberOfKingdomPiles: 10,
  basicSupplyByPlayerCount: [
    {
      'province': 8,
      'duchy': 8,
      'estate': 8,
      'curse': 10,
      'gold': 30,
      'silver': 40,
      'copper': 60
    },
    {
      'province': 12,
      'duchy': 12,
      'estate': 12,
      'curse': 20,
      'gold': 30,
      'silver': 40,
      'copper': 60
    },
    {
      'province': 12,
      'duchy': 12,
      'estate': 12,
      'curse': 30,
      'gold': 30,
      'silver': 40,
      'copper': 60
    },
    {
      'province': 15,
      'duchy': 12,
      'estate': 12,
      'curse': 40,
      'gold': 60,
      'silver': 80,
      'copper': 120
    },
    {
      'province': 18,
      'duchy': 12,
      'estate': 12,
      'curse': 50,
      'gold': 60,
      'silver': 80,
      'copper': 120
    },
    {
      'province': 18,
      'duchy': 12,
      'estate': 12,
      'curse': 50,
      'gold': 60,
      'silver': 80,
      'copper': 120
    }
  ],
  playerStartingHand: {
    'copper': 7,
    'estate': 3
  },
  numberOfEventsAndOthers: 2
};
export function isSourceFindCardsFilter(filter) {
  return typeof filter === 'object' && filter !== null && 'location' in filter;
}
export function isCostFindCardsFilter(filter) {
  return typeof filter === 'object' && filter !== null && 'kind' in filter && 'playerId' in filter && 'amount' in filter;
}
export function isCardDataFindCardsFilter(filter) {
  return typeof filter === 'object' && filter !== null && ('tags' in filter || 'cardKeys' in filter || 'cardType' in filter || 'owner' in filter);
}
_computedKey = Symbol.for('Deno.customInspect');
export class ReactionTrigger {
  eventType;
  args;
  constructor(eventType, ...rest){
    this.eventType = eventType;
    this.args = rest[0] ?? undefined;
  }
  toString() {
    return `[TRIGGER ${this.eventType}]`;
  }
  // @ts-ignore
  [_computedKey]() {
    return this.toString();
  }
}
_computedKey1 = Symbol.for('Deno.customInspect');
export class Reaction {
  // a concatenation of the card key and card id with a '-'
  id;
  // the player's ID who owns this reaction - the one that can decide to do it.
  playerId;
  listeningFor;
  /**
   * Indicates the triggered effect only happens once for this particular instance of the reaction.
   *
   * @default false
   */ once = false;
  /**
   * Indicates that the triggered effect happens regardless of user choice.
   *
   * @default false
   */ compulsory = false;
  /**
   * Indicates that the triggered effect happens regardless of game state and user interaction.
   *
   * @default false
   */ system = false;
  /**
   * Indicates that the reaction can be used by multiple different instances of the same card.
   *
   * @default true
   */ allowMultipleInstances = true;
  extraData;
  // todo working on moat right now which has no condition other than it be an attack.
  // in the future we might need to define this condition method elsewhere such as
  // in the expansion's module? need to wait to see what kind of conditions there are i think
  condition;
  // todo defined in a map somewhere just like registered card effects. so maybe another export
  // from teh expansion module that defines what happens when you ccn react?
  triggeredEffectFn;
  constructor(arg){
    this.id = arg.id;
    this.playerId = arg.playerId;
    this.listeningFor = arg.listeningFor;
    this.condition = arg.condition ?? (()=>true);
    this.triggeredEffectFn = arg.triggeredEffectFn;
    this.once = arg.once ?? false;
    this.allowMultipleInstances = arg.allowMultipleInstances ?? true;
    this.compulsory = arg.compulsory ?? false;
    this.system = arg.system ?? false;
  }
  getBaseId() {
    return `${this.getSourceKey()}:${this.getSourceId()}`;
  }
  getSourceKey() {
    let out;
    try {
      out = this.id.split(':')?.[0];
      return out;
    } catch (e) {
      throw e;
    }
  }
  getSourceId() {
    let out;
    try {
      out = toNumber(this.id.split(':')?.[1]);
      return out;
    } catch (e) {
      throw e;
    }
  }
  toString() {
    return `[REACTION ${this.id} - owner {${this.playerId}}]`;
  }
  // @ts-ignore
  [_computedKey1]() {
    return this.toString();
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=5745329735771725815,13140415443954480723