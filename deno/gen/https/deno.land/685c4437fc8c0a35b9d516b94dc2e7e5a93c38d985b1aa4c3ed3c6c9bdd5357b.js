import { getLogger } from "../../../deps.ts";
import { EventEmitter } from "../../event-emitter/mod.ts";
import { Socket } from "./socket.ts";
import { Polling } from "./transports/polling.ts";
import { WS } from "./transports/websocket.ts";
import { addCorsHeaders } from "./cors.ts";
import { generateId } from "./util.ts";
const TRANSPORTS = [
  "polling",
  "websocket"
];
const ERROR_MESSAGES = new Map([
  [
    0,
    "Transport unknown"
  ],
  [
    1,
    "Session ID unknown"
  ],
  [
    2,
    "Bad handshake method"
  ],
  [
    3,
    "Bad request"
  ],
  [
    4,
    "Forbidden"
  ],
  [
    5,
    "Unsupported protocol version"
  ]
]);
export class Server extends EventEmitter {
  opts;
  clients = new Map();
  constructor(opts = {}){
    super();
    this.opts = Object.assign({
      path: "/engine.io/",
      pingTimeout: 20000,
      pingInterval: 25000,
      upgradeTimeout: 10000,
      maxHttpBufferSize: 1e6
    }, opts);
  }
  /**
   * Returns a request handler.
   *
   * @param additionalHandler - another handler which will receive the request if the path does not match
   */ handler(additionalHandler) {
    return (req, connInfo)=>{
      const url = new URL(req.url);
      if (url.pathname === this.opts.path) {
        return this.handleRequest(req, connInfo, url);
      } else if (additionalHandler) {
        return additionalHandler(req, connInfo);
      } else {
        return new Response(null, {
          status: 404
        });
      }
    };
  }
  /**
   * Handles an HTTP request.
   *
   * @param req
   * @param connInfo
   * @param url
   * @private
   */ async handleRequest(req, connInfo, url) {
    getLogger("engine.io").debug(`[server] handling ${req.method} ${req.url}`);
    const responseHeaders = new Headers();
    if (this.opts.cors) {
      addCorsHeaders(responseHeaders, this.opts.cors, req);
      if (req.method === "OPTIONS") {
        return new Response(null, {
          status: 204,
          headers: responseHeaders
        });
      }
    }
    if (this.opts.editResponseHeaders) {
      await this.opts.editResponseHeaders(responseHeaders, req, connInfo);
    }
    try {
      await this.verify(req, url);
    } catch (err) {
      const { code, context } = err;
      const message = ERROR_MESSAGES.get(code);
      this.emitReserved("connection_error", {
        req,
        code,
        message,
        context
      });
      const body = JSON.stringify({
        code,
        message
      });
      responseHeaders.set("Content-Type", "application/json");
      return new Response(body, {
        status: 400,
        headers: responseHeaders
      });
    }
    if (this.opts.allowRequest) {
      try {
        await this.opts.allowRequest(req, connInfo);
      } catch (reason) {
        this.emitReserved("connection_error", {
          req,
          code: 4,
          message: ERROR_MESSAGES.get(4),
          context: {
            message: reason
          }
        });
        const body = JSON.stringify({
          code: 4,
          message: reason
        });
        responseHeaders.set("Content-Type", "application/json");
        return new Response(body, {
          status: 403,
          headers: responseHeaders
        });
      }
    }
    const sid = url.searchParams.get("sid");
    if (sid) {
      // the client must exist since we have checked it in the verify method
      const socket = this.clients.get(sid);
      if (req.headers.has("upgrade")) {
        const transport = new WS(this.opts);
        const promise = transport.onRequest(req);
        socket._maybeUpgrade(transport);
        return promise;
      }
      getLogger("engine.io").debug("[server] setting new request for existing socket");
      return socket.transport.onRequest(req, responseHeaders);
    } else {
      return this.handshake(req, connInfo, responseHeaders);
    }
  }
  /**
   * Verifies a request.
   *
   * @param req
   * @param url
   * @private
   */ verify(req, url) {
    const transport = url.searchParams.get("transport") || "";
    if (!TRANSPORTS.includes(transport)) {
      getLogger("engine.io").debug(`unknown transport "${transport}"`);
      return Promise.reject({
        code: 0,
        context: {
          transport
        }
      });
    }
    const sid = url.searchParams.get("sid");
    if (sid) {
      const client = this.clients.get(sid);
      if (!client) {
        getLogger("engine.io").debug(`[server] unknown client with sid ${sid}`);
        return Promise.reject({
          code: 1,
          context: {
            sid
          }
        });
      }
      const previousTransport = client.transport.name;
      if (previousTransport === "websocket") {
        getLogger("engine.io").debug("[server] unexpected transport without upgrade");
        return Promise.reject({
          code: 3,
          context: {
            name: "TRANSPORT_MISMATCH",
            transport,
            previousTransport
          }
        });
      }
    } else {
      // handshake is GET only
      if (req.method !== "GET") {
        return Promise.reject({
          code: 2,
          context: {
            method: req.method
          }
        });
      }
      const protocol = url.searchParams.get("EIO") === "4" ? 4 : 3; // 3rd revision by default
      if (protocol === 3) {
        return Promise.reject({
          code: 5,
          context: {
            protocol
          }
        });
      }
    }
    return Promise.resolve();
  }
  /**
   * Handshakes a new client.
   *
   * @param req
   * @param connInfo
   * @param responseHeaders
   * @private
   */ async handshake(req, connInfo, responseHeaders) {
    const id = generateId();
    let transport;
    if (req.headers.has("upgrade")) {
      transport = new WS(this.opts);
    } else {
      transport = new Polling(this.opts);
    }
    getLogger("engine.io").info(`[server] new socket ${id}`);
    const socket = new Socket(id, this.opts, transport);
    this.clients.set(id, socket);
    socket.once("close", (reason)=>{
      getLogger("engine.io").info(`[server] socket ${id} closed due to ${reason}`);
      this.clients.delete(id);
    });
    if (this.opts.editHandshakeHeaders) {
      await this.opts.editHandshakeHeaders(responseHeaders, req, connInfo);
    }
    const promise = transport.onRequest(req, responseHeaders);
    this.emitReserved("connection", socket, req, connInfo);
    return promise;
  }
  /**
   * Closes all clients.
   */ close() {
    getLogger("engine.io").debug("[server] closing all open clients");
    this.clients.forEach((client)=>client.close());
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=3528963600052914330,1669741555066899929