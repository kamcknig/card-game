/**
 * Returns an empty array when the input is a single-element array.
 *
 * @template T - The type of the single element in the array.
 * @param {[T]} arr - The single-element array to process.
 * @returns {[]} An empty array.
 *
 * @example
 * const arr = [1];
 * const result = tail(arr);
 * // result will be []
 */ /**
 * Returns a new array with all elements except for the first.
 *
 * This function takes an array and returns a new array containing all the elements
 * except for the first one. If the input array is empty or has only one element,
 * an empty array is returned.
 *
 * @template T - The type of elements in the array.
 * @param {T[]} arr - The array to get the tail of.
 * @returns {T[]} A new array containing all elements of the input array except for the first one.
 *
 * @example
 * const arr1 = [1, 2, 3];
 * const result = tail(arr1);
 * // result will be [2, 3]
 *
 * const arr2 = [1];
 * const result2 = tail(arr2);
 * // result2 will be []
 *
 * const arr3 = [];
 * const result3 = tail(arr3);
 * // result3 will be []
 */ export function tail(arr) {
  return arr.slice(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9hcnJheS90YWlsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJucyBhbiBlbXB0eSBhcnJheSB3aGVuIHRoZSBpbnB1dCBpcyBhIHNpbmdsZS1lbGVtZW50IGFycmF5LlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIHR5cGUgb2YgdGhlIHNpbmdsZSBlbGVtZW50IGluIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB7W1RdfSBhcnIgLSBUaGUgc2luZ2xlLWVsZW1lbnQgYXJyYXkgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtbXX0gQW4gZW1wdHkgYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFyciA9IFsxXTtcbiAqIGNvbnN0IHJlc3VsdCA9IHRhaWwoYXJyKTtcbiAqIC8vIHJlc3VsdCB3aWxsIGJlIFtdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWlsPFQ+KGFycjogcmVhZG9ubHkgW1RdKTogW107XG5cbi8qKlxuICogUmV0dXJucyBhbiBlbXB0eSBhcnJheSB3aGVuIHRoZSBpbnB1dCBpcyBhbiBlbXB0eSBhcnJheS5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIGVsZW1lbnRzIGluIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB7W119IGFyciAtIFRoZSBlbXB0eSBhcnJheSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge1tdfSBBbiBlbXB0eSBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYXJyID0gW107XG4gKiBjb25zdCByZXN1bHQgPSB0YWlsKGFycik7XG4gKiAvLyByZXN1bHQgd2lsbCBiZSBbXVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFpbChhcnI6IHJlYWRvbmx5IFtdKTogW107XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIGFsbCBlbGVtZW50cyBleGNlcHQgZm9yIHRoZSBmaXJzdCB3aGVuIHRoZSBpbnB1dCBpcyBhIHR1cGxlIGFycmF5LlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIHR5cGUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHR1cGxlIGFycmF5LlxuICogQHRlbXBsYXRlIFUgLSBUaGUgdHlwZSBvZiB0aGUgcmVtYWluaW5nIGVsZW1lbnRzIGluIHRoZSB0dXBsZSBhcnJheS5cbiAqIEBwYXJhbSB7W1QsIC4uLlVbXV19IGFyciAtIFRoZSB0dXBsZSBhcnJheSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge1VbXX0gQSBuZXcgYXJyYXkgY29udGFpbmluZyBhbGwgZWxlbWVudHMgb2YgdGhlIGlucHV0IGFycmF5IGV4Y2VwdCBmb3IgdGhlIGZpcnN0IG9uZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYXJyID0gWzEsIDIsIDNdO1xuICogY29uc3QgcmVzdWx0ID0gdGFpbChhcnIpO1xuICogLy8gcmVzdWx0IHdpbGwgYmUgWzIsIDNdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWlsPFQsIFU+KGFycjogcmVhZG9ubHkgW1QsIC4uLlVbXV0pOiBVW107XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBhcnJheSB3aXRoIGFsbCBlbGVtZW50cyBleGNlcHQgZm9yIHRoZSBmaXJzdC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGFuIGFycmF5IGFuZCByZXR1cm5zIGEgbmV3IGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBlbGVtZW50c1xuICogZXhjZXB0IGZvciB0aGUgZmlyc3Qgb25lLiBJZiB0aGUgaW5wdXQgYXJyYXkgaXMgZW1wdHkgb3IgaGFzIG9ubHkgb25lIGVsZW1lbnQsXG4gKiBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZC5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIGVsZW1lbnRzIGluIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB7VFtdfSBhcnIgLSBUaGUgYXJyYXkgdG8gZ2V0IHRoZSB0YWlsIG9mLlxuICogQHJldHVybnMge1RbXX0gQSBuZXcgYXJyYXkgY29udGFpbmluZyBhbGwgZWxlbWVudHMgb2YgdGhlIGlucHV0IGFycmF5IGV4Y2VwdCBmb3IgdGhlIGZpcnN0IG9uZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYXJyMSA9IFsxLCAyLCAzXTtcbiAqIGNvbnN0IHJlc3VsdCA9IHRhaWwoYXJyMSk7XG4gKiAvLyByZXN1bHQgd2lsbCBiZSBbMiwgM11cbiAqXG4gKiBjb25zdCBhcnIyID0gWzFdO1xuICogY29uc3QgcmVzdWx0MiA9IHRhaWwoYXJyMik7XG4gKiAvLyByZXN1bHQyIHdpbGwgYmUgW11cbiAqXG4gKiBjb25zdCBhcnIzID0gW107XG4gKiBjb25zdCByZXN1bHQzID0gdGFpbChhcnIzKTtcbiAqIC8vIHJlc3VsdDMgd2lsbCBiZSBbXVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFpbDxUPihhcnI6IHJlYWRvbmx5IFRbXSk6IFRbXTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggYWxsIGVsZW1lbnRzIGV4Y2VwdCBmb3IgdGhlIGZpcnN0LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gYXJyYXkgYW5kIHJldHVybnMgYSBuZXcgYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGVsZW1lbnRzXG4gKiBleGNlcHQgZm9yIHRoZSBmaXJzdCBvbmUuIElmIHRoZSBpbnB1dCBhcnJheSBpcyBlbXB0eSBvciBoYXMgb25seSBvbmUgZWxlbWVudCxcbiAqIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkLlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIHR5cGUgb2YgZWxlbWVudHMgaW4gdGhlIGFycmF5LlxuICogQHBhcmFtIHtUW119IGFyciAtIFRoZSBhcnJheSB0byBnZXQgdGhlIHRhaWwgb2YuXG4gKiBAcmV0dXJucyB7VFtdfSBBIG5ldyBhcnJheSBjb250YWluaW5nIGFsbCBlbGVtZW50cyBvZiB0aGUgaW5wdXQgYXJyYXkgZXhjZXB0IGZvciB0aGUgZmlyc3Qgb25lLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBhcnIxID0gWzEsIDIsIDNdO1xuICogY29uc3QgcmVzdWx0ID0gdGFpbChhcnIxKTtcbiAqIC8vIHJlc3VsdCB3aWxsIGJlIFsyLCAzXVxuICpcbiAqIGNvbnN0IGFycjIgPSBbMV07XG4gKiBjb25zdCByZXN1bHQyID0gdGFpbChhcnIyKTtcbiAqIC8vIHJlc3VsdDIgd2lsbCBiZSBbXVxuICpcbiAqIGNvbnN0IGFycjMgPSBbXTtcbiAqIGNvbnN0IHJlc3VsdDMgPSB0YWlsKGFycjMpO1xuICogLy8gcmVzdWx0MyB3aWxsIGJlIFtdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWlsPFQ+KGFycjogcmVhZG9ubHkgVFtdKTogVFtdIHtcbiAgcmV0dXJuIGFyci5zbGljZSgxKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Q0FXQyxHQTBERDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F1QkMsR0FDRCxPQUFPLFNBQVMsS0FBUSxHQUFpQjtFQUN2QyxPQUFPLElBQUksS0FBSyxDQUFDO0FBQ25CIn0=
// denoCacheMetadata=2799337029587144593,9675758642298183246