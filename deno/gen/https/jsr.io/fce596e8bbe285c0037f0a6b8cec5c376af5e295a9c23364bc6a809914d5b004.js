import { identity } from '../../function/identity.ts';
import { isIterateeCall } from '../_internal/isIterateeCall.ts';
import { property } from '../object/property.ts';
import { matches } from '../predicate/matches.ts';
import { matchesProperty } from '../predicate/matchesProperty.ts';
/**
 * Checks if every item in an object has a specific property, where the property name is provided as a PropertyKey.
 *
 * @template T
 * @param {T extends Record<string, unknown> ? T : never} object - The object to check through.
 * @param {ArrayLike<T> | Record<any, any> | null | undefined} source - The source array or object to check through.
 * @param {((item: T, index: number, arr: any) => unknown) | Partial<T> | [keyof T, unknown] | PropertyKey} doesMatch - The criteria to match. It can be a function, a partial object, a key-value pair, or a property name.
 * @param {PropertyKey} propertyToCheck - The property name to check.
 * @param {unknown} guard - Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} - `true` if every property value has the specified property, or `false` if at least one does not match.
 *
 * @example
 * // Using a property name
 * const obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };
 * const result = every(obj, 'name');
 * console.log(result); // true
 */ export function every(source, doesMatch, guard) {
  if (!source) {
    return true;
  }
  const values = Array.isArray(source) ? source : Object.values(source);
  if (guard && isIterateeCall(source, doesMatch, guard)) {
    doesMatch = undefined;
  }
  if (!doesMatch) {
    doesMatch = identity;
  }
  switch(typeof doesMatch){
    case 'function':
      {
        if (!Array.isArray(source)) {
          const keys = Object.keys(source);
          for(let i = 0; i < keys.length; i++){
            const key = keys[i];
            const value = source[key];
            if (!doesMatch(value, key, source)) {
              return false;
            }
          }
          return true;
        }
        return values.every(doesMatch);
      }
    case 'object':
      {
        if (Array.isArray(doesMatch) && doesMatch.length === 2) {
          const key = doesMatch[0];
          const value = doesMatch[1];
          return values.every(matchesProperty(key, value));
        } else {
          return values.every(matches(doesMatch));
        }
      }
    case 'symbol':
    case 'number':
    case 'string':
      {
        return values.every(property(doesMatch));
      }
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=16763793857797835884,16044248140173235652