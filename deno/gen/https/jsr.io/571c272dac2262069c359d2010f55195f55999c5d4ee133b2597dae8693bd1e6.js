import { clamp as clampToolkit } from '../../math/clamp.ts';
/**
 * Clamps a number within the specified bounds.
 *
 * This function takes a number and one or two bounds, and returns the number clamped within the specified bounds.
 * If only one bound is provided, it returns the minimum of the value and the bound.
 *
 * @param {number} value - The number to clamp.
 * @param {number} bound1 - The minimum bound to clamp the number, or the maximum bound if bound2 is not provided.
 * @param {number} [bound2] - The maximum bound to clamp the number. If not provided, the function will only consider bound1 as the upper limit.
 * @returns {number} The clamped number within the specified bounds.
 *
 * @example
 * const result1 = clamp(10, 5); // result1 will be 5, as 10 is clamped to the bound 5
 * const result2 = clamp(10, 5, 15); // result2 will be 10, as it is within the bounds 5 and 15
 * const result3 = clamp(2, 5, 15); // result3 will be 5, as 2 is clamped to the lower bound 5
 * const result4 = clamp(20, 5, 15); // result4 will be 15, as 20 is clamped to the upper bound 15
 */ export function clamp(value, bound1, bound2) {
  if (Number.isNaN(bound1)) {
    bound1 = 0;
  }
  if (Number.isNaN(bound2)) {
    bound2 = 0;
  }
  return clampToolkit(value, bound1, bound2);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvbWF0aC9jbGFtcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbGFtcCBhcyBjbGFtcFRvb2xraXQgfSBmcm9tICcuLi8uLi9tYXRoL2NsYW1wLnRzJztcblxuLyoqXG4gKiBDbGFtcHMgYSBudW1iZXIgd2l0aGluIHRoZSBpbmNsdXNpdmUgdXBwZXIgYm91bmQuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB0YWtlcyBhIG51bWJlciBhbmQgYSBtYXhpbXVtIGJvdW5kLCBhbmQgcmV0dXJucyB0aGUgbnVtYmVyIGNsYW1wZWQgd2l0aGluIHRoZSBzcGVjaWZpZWQgdXBwZXIgYm91bmQuXG4gKiBJZiBvbmx5IG9uZSBib3VuZCBpcyBwcm92aWRlZCwgaXQgcmV0dXJucyB0aGUgbWluaW11bSBvZiB0aGUgdmFsdWUgYW5kIHRoZSBib3VuZC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICogQHBhcmFtIHtudW1iZXJ9IG1heGltdW0gLSBUaGUgbWF4aW11bSBib3VuZCB0byBjbGFtcCB0aGUgbnVtYmVyLlxuICogQHJldHVybnMge251bWJlcn0gVGhlIGNsYW1wZWQgbnVtYmVyIHdpdGhpbiB0aGUgc3BlY2lmaWVkIHVwcGVyIGJvdW5kLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCByZXN1bHQxID0gY2xhbXAoMTAsIDUpOyAvLyByZXN1bHQxIHdpbGwgYmUgNSwgYXMgMTAgaXMgY2xhbXBlZCB0byB0aGUgYm91bmQgNVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsdWU6IG51bWJlciwgbWF4aW11bTogbnVtYmVyKTogbnVtYmVyO1xuXG4vKipcbiAqIENsYW1wcyBhIG51bWJlciB3aXRoaW4gdGhlIGluY2x1c2l2ZSBsb3dlciBhbmQgdXBwZXIgYm91bmRzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBudW1iZXIgYW5kIHR3byBib3VuZHMsIGFuZCByZXR1cm5zIHRoZSBudW1iZXIgY2xhbXBlZCB3aXRoaW4gdGhlIHNwZWNpZmllZCBib3VuZHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIG51bWJlciB0byBjbGFtcC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5pbXVtIC0gVGhlIG1pbmltdW0gYm91bmQgdG8gY2xhbXAgdGhlIG51bWJlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhpbXVtIC0gVGhlIG1heGltdW0gYm91bmQgdG8gY2xhbXAgdGhlIG51bWJlci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBjbGFtcGVkIG51bWJlciB3aXRoaW4gdGhlIHNwZWNpZmllZCBib3VuZHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJlc3VsdDIgPSBjbGFtcCgxMCwgNSwgMTUpOyAvLyByZXN1bHQyIHdpbGwgYmUgMTAsIGFzIGl0IGlzIHdpdGhpbiB0aGUgYm91bmRzIDUgYW5kIDE1XG4gKiBjb25zdCByZXN1bHQzID0gY2xhbXAoMiwgNSwgMTUpOyAvLyByZXN1bHQzIHdpbGwgYmUgNSwgYXMgMiBpcyBjbGFtcGVkIHRvIHRoZSBsb3dlciBib3VuZCA1XG4gKiBjb25zdCByZXN1bHQ0ID0gY2xhbXAoMjAsIDUsIDE1KTsgLy8gcmVzdWx0NCB3aWxsIGJlIDE1LCBhcyAyMCBpcyBjbGFtcGVkIHRvIHRoZSB1cHBlciBib3VuZCAxNVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsdWU6IG51bWJlciwgbWluaW11bTogbnVtYmVyLCBtYXhpbXVtOiBudW1iZXIpOiBudW1iZXI7XG5cbi8qKlxuICogQ2xhbXBzIGEgbnVtYmVyIHdpdGhpbiB0aGUgc3BlY2lmaWVkIGJvdW5kcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgbnVtYmVyIGFuZCBvbmUgb3IgdHdvIGJvdW5kcywgYW5kIHJldHVybnMgdGhlIG51bWJlciBjbGFtcGVkIHdpdGhpbiB0aGUgc3BlY2lmaWVkIGJvdW5kcy5cbiAqIElmIG9ubHkgb25lIGJvdW5kIGlzIHByb3ZpZGVkLCBpdCByZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHRoZSB2YWx1ZSBhbmQgdGhlIGJvdW5kLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gKiBAcGFyYW0ge251bWJlcn0gYm91bmQxIC0gVGhlIG1pbmltdW0gYm91bmQgdG8gY2xhbXAgdGhlIG51bWJlciwgb3IgdGhlIG1heGltdW0gYm91bmQgaWYgYm91bmQyIGlzIG5vdCBwcm92aWRlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbYm91bmQyXSAtIFRoZSBtYXhpbXVtIGJvdW5kIHRvIGNsYW1wIHRoZSBudW1iZXIuIElmIG5vdCBwcm92aWRlZCwgdGhlIGZ1bmN0aW9uIHdpbGwgb25seSBjb25zaWRlciBib3VuZDEgYXMgdGhlIHVwcGVyIGxpbWl0LlxuICogQHJldHVybnMge251bWJlcn0gVGhlIGNsYW1wZWQgbnVtYmVyIHdpdGhpbiB0aGUgc3BlY2lmaWVkIGJvdW5kcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgcmVzdWx0MSA9IGNsYW1wKDEwLCA1KTsgLy8gcmVzdWx0MSB3aWxsIGJlIDUsIGFzIDEwIGlzIGNsYW1wZWQgdG8gdGhlIGJvdW5kIDVcbiAqIGNvbnN0IHJlc3VsdDIgPSBjbGFtcCgxMCwgNSwgMTUpOyAvLyByZXN1bHQyIHdpbGwgYmUgMTAsIGFzIGl0IGlzIHdpdGhpbiB0aGUgYm91bmRzIDUgYW5kIDE1XG4gKiBjb25zdCByZXN1bHQzID0gY2xhbXAoMiwgNSwgMTUpOyAvLyByZXN1bHQzIHdpbGwgYmUgNSwgYXMgMiBpcyBjbGFtcGVkIHRvIHRoZSBsb3dlciBib3VuZCA1XG4gKiBjb25zdCByZXN1bHQ0ID0gY2xhbXAoMjAsIDUsIDE1KTsgLy8gcmVzdWx0NCB3aWxsIGJlIDE1LCBhcyAyMCBpcyBjbGFtcGVkIHRvIHRoZSB1cHBlciBib3VuZCAxNVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsdWU6IG51bWJlciwgYm91bmQxOiBudW1iZXIsIGJvdW5kMj86IG51bWJlcik6IG51bWJlciB7XG4gIGlmIChOdW1iZXIuaXNOYU4oYm91bmQxKSkge1xuICAgIGJvdW5kMSA9IDA7XG4gIH1cblxuICBpZiAoTnVtYmVyLmlzTmFOKGJvdW5kMikpIHtcbiAgICBib3VuZDIgPSAwO1xuICB9XG5cbiAgcmV0dXJuIGNsYW1wVG9vbGtpdCh2YWx1ZSwgYm91bmQxLCBib3VuZDIhKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFNBQVMsWUFBWSxRQUFRLHNCQUFzQjtBQWtDNUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDRCxPQUFPLFNBQVMsTUFBTSxLQUFhLEVBQUUsTUFBYyxFQUFFLE1BQWU7RUFDbEUsSUFBSSxPQUFPLEtBQUssQ0FBQyxTQUFTO0lBQ3hCLFNBQVM7RUFDWDtFQUVBLElBQUksT0FBTyxLQUFLLENBQUMsU0FBUztJQUN4QixTQUFTO0VBQ1g7RUFFQSxPQUFPLGFBQWEsT0FBTyxRQUFRO0FBQ3JDIn0=
// denoCacheMetadata=7574258124902825898,12075226556432580598