import { identity } from '../../function/identity.ts';
import { property } from '../object/property.ts';
import { isArray } from '../predicate/isArray.ts';
import { matches } from '../predicate/matches.ts';
import { matchesProperty } from '../predicate/matchesProperty.ts';
/**
 * Iterates over the collection and filters elements based on the given predicate.
 * If a function is provided, it is invoked for each element in the collection.
 *
 * @template T
 * @param {ArrayLike<T> | Record<any, any> | null | undefined} source - The array or object to iterate over.
 * @param {((item: T, index: number, arr: any) => unknown) | Partial<T> | [keyof T, unknown] | PropertyKey} [predicate=identity] - The function invoked per iteration.
 * @returns {T[]} - Returns a new array of filtered elements that satisfy the predicate.
 *
 * @example
 * filter([{ a: 1 }, { a: 2 }, { b: 1 }], 'a');
 * // => [{ a: 1 }, { a: 2 }]
 *
 * filter([{ a: 1 }, { a: 2 }, { b: 1 }], { b: 1 });
 * // => [{ b: 1 }]
 *
 * filter({ item1: { a: 0, b: true }, item2: { a: 1, b: true }, item3: { a: 2, b: false }}, { b: false })
 * // => [{ a: 2, b: false }]
 *
 * filter([{ a: 1 }, { a: 2 }, { a: 3 }], ['a', 2]);
 * // => [{ a: 2 }]
 */ export function filter(source, predicate) {
  if (!source) {
    return [];
  }
  if (!predicate) {
    predicate = identity;
  }
  const collection = isArray(source) ? source : Object.values(source);
  switch(typeof predicate){
    case 'function':
      {
        if (!Array.isArray(source)) {
          const result = [];
          const keys = Object.keys(source);
          for(let i = 0; i < keys.length; i++){
            const key = keys[i];
            const value = source[key];
            if (predicate(value, key, source)) {
              result.push(value);
            }
          }
          return result;
        }
        return collection.filter(predicate);
      }
    case 'object':
      {
        return isArray(predicate) ? collection.filter(matchesProperty(predicate[0], predicate[1])) : collection.filter(matches(predicate));
      }
    case 'symbol':
    case 'number':
    case 'string':
      {
        return collection.filter(property(predicate));
      }
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=7583505639632609182,12430589170428815037