import { flatten } from '../../array/flatten.ts';
import { flowRight as flowRightToolkit } from '../../function/flowRight.ts';

/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {() => R} f The function to invoke.
 * @returns {() => R} Returns the new composite function.
 *
 * @example
 * function noArgFunc() {
 *   return 42;
 * }
 * const combined = flowRight(noArgFunc);
 * console.log(combined()); // 42
 */
export function flowRight<R>(f: () => R): () => R;
/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {(...args: A) => R} f1 The function to invoke.
 * @returns {(...args: A) => R} Returns the new composite function.
 *
 * @example
 * function oneArgFunc(a: number) {
 *  return a * 2;
 * }
 * const combined = flowRight(oneArgFunc);
 * console.log(combined(5)); // 10
 */
export function flowRight<A extends any[], R>(f1: (...args: A) => R): (...args: A) => R;
/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {(a: R1) => R2} f2 The function to invoke.
 * @param {(...args: A) => R1} f1 The function to invoke.
 * @returns {(...args: A) => R2} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 *
 * const combined = flowRight(square, add);
 * console.log(combined(1, 2)); // 9
 */
export function flowRight<A extends any[], R1, R2>(f2: (a: R1) => R2, f1: (...args: A) => R1): (...args: A) => R2;
/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {(a: R2) => R3} f3 The function to invoke.
 * @param {(a: R1) => R2} f2 The function to invoke.
 * @param {(...args: A) => R1} f1 The function to invoke.
 * @returns {(...args: A) => R3} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 * const double = (n: number) => n * 2;
 *
 * const combined = flowRight(double, square, add);
 * console.log(combined(1, 2)); // 18
 */
export function flowRight<A extends any[], R1, R2, R3>(
  f3: (a: R2) => R3,
  f2: (a: R1) => R2,
  f1: (...args: A) => R1
): (...args: A) => R3;
/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {(a: R3) => R4} f4 The function to invoke.
 * @param {(a: R2) => R3} f3 The function to invoke.
 * @param {(a: R1) => R2} f2 The function to invoke.
 * @param {(...args: A) => R1} f1 The function to invoke.
 * @returns {(...args: A) => R4} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 * const double = (n: number) => n * 2;
 * const toStr = (n: number) => n.toString();
 *
 * const combined = flowRight(toStr, double, square, add);
 * console.log(combined(1, 2));  // '18'
 */
export function flowRight<A extends any[], R1, R2, R3, R4>(
  f4: (a: R3) => R4,
  f3: (a: R2) => R3,
  f2: (a: R1) => R2,
  f1: (...args: A) => R1
): (...args: A) => R4;
/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {(a: R4) => R5} f5 The function to invoke.
 * @param {(a: R3) => R4} f4 The function to invoke.
 * @param {(a: R2) => R3} f3 The function to invoke.
 * @param {(a: R1) => R2} f2 The function to invoke.
 * @param {(...args: A) => R1} f1 The function to invoke.
 * @returns {(...args: A) => R5} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 * const double = (n: number) => n * 2;
 * const toStr = (n: number) => n.toString();
 * const split = (s: string) => s.split('');
 *
 * const combined = flowRight(split, toStr, double, square, add);
 * console.log(combined(1, 2)); // ['1', '8']
 */
export function flowRight<A extends any[], R1, R2, R3, R4, R5>(
  f5: (a: R4) => R5,
  f4: (a: R3) => R4,
  f3: (a: R2) => R3,
  f2: (a: R1) => R2,
  f1: (...args: A) => R1
): (...args: A) => R5;
/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {Array<((...args: any[]) => any) | Array<(...args: any[]) => any>>} funcs The functions to invoke.
 * @returns {(...args: any[]) => any} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 * const double = (n: number) => n * 2;
 *
 * const combined = flowRight(double, [square, add]);
 * console.log(combined(1, 2)); // 18
 */
export function flowRight(
  ...funcs: Array<((...args: any[]) => any) | Array<(...args: any[]) => any>>
): (...args: any[]) => any;
/**
 * Creates a new function that executes the given functions in sequence from right to left. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * This method is like `flow` except that it creates a function that invokes the given functions from right to left.
 *
 * @param {Array<((...args: any[]) => any) | Array<(...args: any[]) => any>>} funcs The functions to invoke.
 * @returns {(...args: any[]) => any} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 * const double = (n: number) => n * 2;
 *
 * const combined = flowRight(double, [square, add]);
 * console.log(combined(1, 2)); // 18
 */
export function flowRight(
  ...funcs: Array<((...args: any[]) => any) | Array<(...args: any[]) => any>>
): (...args: any[]) => any {
  const flattenFuncs = flatten(funcs, 1);
  if (flattenFuncs.some(func => typeof func !== 'function')) {
    throw new TypeError('Expected a function');
  }
  return flowRightToolkit(...flattenFuncs);
}

// denoCacheMetadata={"headers":{"x-goog-generation":"1741509575127138","content-type":"text/typescript","age":"0","access-control-expose-headers":"*","cross-origin-resource-policy":"cross-origin","x-goog-hash":"crc32c=r4/hHg==,md5=wXXpLcGznrop+zI6jRddUw==","accept-ranges":"bytes","content-length":"8173","x-jsr-cache-id":"ATL","date":"Thu, 26 Jun 2025 21:45:35 GMT","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","expires":"Fri, 26 Jun 2026 21:45:35 GMT","x-goog-storage-class":"STANDARD","x-goog-metageneration":"1","x-jsr-cache-status":"revalidated","cache-control":"public, max-age=31536000, immutable","x-robots-tag":"noindex","server":"UploadServer","etag":"\"c175e92dc1b39eba29fb323a8d175d53\"","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","via":"1.1 google","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","access-control-allow-origin":"*","x-goog-stored-content-encoding":"identity","x-goog-stored-content-length":"8173","x-guploader-uploadid":"ABgVH8-kRymTH5zSPJRtR05fJ8oViBwd4x44Vnq9quNTTKguZcdgu3BF8hku64lvRlDlXLmnWi5BFVc"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/function/flowRight.ts","time":1750974334}