/**
 * Creates a new array filled with the specified value from the start position up to, but not including, the end position.
 * This function does not mutate the original array.
 *
 * @template T - The type of elements in the original array.
 * @template U - The type of the value to fill the new array with.
 * @param {Array<T>} arr - The array to base the new array on.
 * @param {U} value - The value to fill the new array with.
 * @returns {Array<T | U>} The new array with the filled values.
 *
 * @example
 * const array = [1, 2, 3, 4, 5];
 * let result = toFilled(array, '*', 2);
 * console.log(result); // [1, 2, '*', '*', '*']
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*', 1, 4);
 * console.log(result); // [1, '*', '*', '*', 5]
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*');
 * console.log(result); // ['*', '*', '*', '*', '*']
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*', -4, -1);
 * console.log(result); // [1, '*', '*', '*', 5]
 * console.log(array); // [1, 2, 3, 4, 5]
 */
export function toFilled<T, U>(arr: readonly T[], value: U): Array<T | U>;

/**
 * Creates a new array filled with the specified value from the start position up to, but not including, the end position.
 * This function does not mutate the original array.
 *
 * @template T - The type of elements in the original array.
 * @template U - The type of the value to fill the new array with.
 * @param {Array<T>} arr - The array to base the new array on.
 * @param {U} value - The value to fill the new array with.
 * @param {number} [start=0] - The start position. Defaults to 0.
 * @returns {Array<T | U>} The new array with the filled values.
 *
 * @example
 * const array = [1, 2, 3, 4, 5];
 * let result = toFilled(array, '*', 2);
 * console.log(result); // [1, 2, '*', '*', '*']
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*', 1, 4);
 * console.log(result); // [1, '*', '*', '*', 5]
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*');
 * console.log(result); // ['*', '*', '*', '*', '*']
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*', -4, -1);
 * console.log(result); // [1, '*', '*', '*', 5]
 * console.log(array); // [1, 2, 3, 4, 5]
 */
export function toFilled<T, U>(arr: readonly T[], value: U, start: number): Array<T | U>;

/**
 * Creates a new array filled with the specified value from the start position up to, but not including, the end position.
 * This function does not mutate the original array.
 *
 * @template T - The type of elements in the original array.
 * @template U - The type of the value to fill the new array with.
 * @param {Array<T>} arr - The array to base the new array on.
 * @param {U} value - The value to fill the new array with.
 * @param {number} [start=0] - The start position. Defaults to 0.
 * @param {number} [end=arr.length] - The end position. Defaults to the array's length.
 * @returns {Array<T | U>} The new array with the filled values.
 *
 * @example
 * const array = [1, 2, 3, 4, 5];
 * let result = toFilled(array, '*', 2);
 * console.log(result); // [1, 2, '*', '*', '*']
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*', 1, 4);
 * console.log(result); // [1, '*', '*', '*', 5]
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*');
 * console.log(result); // ['*', '*', '*', '*', '*']
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*', -4, -1);
 * console.log(result); // [1, '*', '*', '*', 5]
 * console.log(array); // [1, 2, 3, 4, 5]
 */
export function toFilled<T, U>(arr: readonly T[], value: U, start: number, end: number): Array<T | U>;

/**
 * Creates a new array filled with the specified value from the start position up to, but not including, the end position.
 * This function does not mutate the original array.
 *
 * @template T - The type of elements in the original array.
 * @template U - The type of the value to fill the new array with.
 * @param {Array<T>} arr - The array to base the new array on.
 * @param {U} value - The value to fill the new array with.
 * @param {number} [start=0] - The start position. Defaults to 0.
 * @param {number} [end=arr.length] - The end position. Defaults to the array's length.
 * @returns {Array<T | U>} The new array with the filled values.
 */
export function toFilled<T, U>(arr: readonly T[], value: U, start = 0, end = arr.length): Array<T | U> {
  const length = arr.length;
  const finalStart = Math.max(start >= 0 ? start : length + start, 0);
  const finalEnd = Math.min(end >= 0 ? end : length + end, length);

  const newArr: Array<T | U> = arr.slice();

  for (let i = finalStart; i < finalEnd; i++) {
    newArr[i] = value;
  }

  return newArr;
}

// denoCacheMetadata={"headers":{"x-robots-tag":"noindex","access-control-allow-origin":"*","access-control-expose-headers":"*","x-content-type-options":"nosniff","cross-origin-resource-policy":"cross-origin","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-goog-generation":"1741509575235064","content-length":"4820","x-goog-metageneration":"1","x-goog-stored-content-length":"4820","accept-ranges":"bytes","date":"Thu, 26 Jun 2025 21:45:35 GMT","x-goog-storage-class":"STANDARD","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","content-type":"text/typescript","x-jsr-cache-id":"ATL","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","server":"UploadServer","via":"1.1 google","cache-control":"public, max-age=31536000, immutable","etag":"\"88fa32aa7bc707e526f7e90b4b3abe78\"","age":"0","x-guploader-uploadid":"ABgVH89BZ5qHKYQvqVYMSDNXKw3wuzecMBmc_HAhtDiTchF4fSXgUYp7SR93sP5kuu_xX1Rlx1NOUOs","x-goog-hash":"crc32c=KGwWqA==,md5=iPoyqnvHB+Um9+kLSzq+eA==","x-goog-stored-content-encoding":"identity","expires":"Fri, 26 Jun 2026 21:45:35 GMT","x-jsr-cache-status":"revalidated"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/array/toFilled.ts","time":1750974334}