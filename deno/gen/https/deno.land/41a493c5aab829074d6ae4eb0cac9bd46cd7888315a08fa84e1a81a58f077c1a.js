import { EOFError } from "./errors.ts";
import { deferred } from "./vendor/https/deno.land/std/async/deferred.ts";
import { sendCommand } from "./protocol/mod.ts";
export class MuxExecutor {
  connection;
  constructor(connection){
    this.connection = connection;
    this.queue = [];
  }
  queue;
  exec(command, ...args) {
    const d = deferred();
    this.queue.push({
      command,
      args,
      d
    });
    if (this.queue.length === 1) {
      this.dequeue();
    }
    return d;
  }
  close() {
    this.connection.close();
  }
  dequeue() {
    const [e] = this.queue;
    if (!e) return;
    sendCommand(this.connection.writer, this.connection.reader, e.command, ...e.args).then(e.d.resolve).catch(async (error)=>{
      if (this.connection.maxRetryCount > 0 && // Error `BadResource` is thrown when an attempt is made to write to a closed connection,
      //  Make sure that the connection wasn't explicitly closed by the user before trying to reconnect.
      (error instanceof Deno.errors.BadResource && !this.connection.isClosed || error instanceof Deno.errors.BrokenPipe || error instanceof Deno.errors.ConnectionAborted || error instanceof Deno.errors.ConnectionRefused || error instanceof Deno.errors.ConnectionReset || error instanceof EOFError)) {
        await this.connection.reconnect();
      } else e.d.reject(error);
    }).finally(()=>{
      this.queue.shift();
      this.dequeue();
    });
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvc29ja2V0X2lvQDAuMi4xL3ZlbmRvci9kZW5vLmxhbmQveC9yZWRpc0B2MC4yNy4xL2V4ZWN1dG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ29ubmVjdGlvbiB9IGZyb20gXCIuL2Nvbm5lY3Rpb24udHNcIjtcbmltcG9ydCB7IEVPRkVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLnRzXCI7XG5pbXBvcnQge1xuICBEZWZlcnJlZCxcbiAgZGVmZXJyZWQsXG59IGZyb20gXCIuL3ZlbmRvci9odHRwcy9kZW5vLmxhbmQvc3RkL2FzeW5jL2RlZmVycmVkLnRzXCI7XG5pbXBvcnQgeyBzZW5kQ29tbWFuZCB9IGZyb20gXCIuL3Byb3RvY29sL21vZC50c1wiO1xuaW1wb3J0IHR5cGUgeyBSZWRpc1JlcGx5LCBSZWRpc1ZhbHVlIH0gZnJvbSBcIi4vcHJvdG9jb2wvbW9kLnRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbWFuZEV4ZWN1dG9yIHtcbiAgcmVhZG9ubHkgY29ubmVjdGlvbjogQ29ubmVjdGlvbjtcbiAgZXhlYyhcbiAgICBjb21tYW5kOiBzdHJpbmcsXG4gICAgLi4uYXJnczogUmVkaXNWYWx1ZVtdXG4gICk6IFByb21pc2U8UmVkaXNSZXBseT47XG5cbiAgLyoqXG4gICAqIENsb3NlcyBhIHJlZGlzIGNvbm5lY3Rpb24uXG4gICAqL1xuICBjbG9zZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgTXV4RXhlY3V0b3IgaW1wbGVtZW50cyBDb21tYW5kRXhlY3V0b3Ige1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBjb25uZWN0aW9uOiBDb25uZWN0aW9uKSB7fVxuXG4gIHByaXZhdGUgcXVldWU6IHtcbiAgICBjb21tYW5kOiBzdHJpbmc7XG4gICAgYXJnczogUmVkaXNWYWx1ZVtdO1xuICAgIGQ6IERlZmVycmVkPFJlZGlzUmVwbHk+O1xuICB9W10gPSBbXTtcblxuICBleGVjKFxuICAgIGNvbW1hbmQ6IHN0cmluZyxcbiAgICAuLi5hcmdzOiBSZWRpc1ZhbHVlW11cbiAgKTogUHJvbWlzZTxSZWRpc1JlcGx5PiB7XG4gICAgY29uc3QgZCA9IGRlZmVycmVkPFJlZGlzUmVwbHk+KCk7XG4gICAgdGhpcy5xdWV1ZS5wdXNoKHsgY29tbWFuZCwgYXJncywgZCB9KTtcbiAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuZGVxdWV1ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZDtcbiAgfVxuXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuY29ubmVjdGlvbi5jbG9zZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXF1ZXVlKCk6IHZvaWQge1xuICAgIGNvbnN0IFtlXSA9IHRoaXMucXVldWU7XG4gICAgaWYgKCFlKSByZXR1cm47XG4gICAgc2VuZENvbW1hbmQoXG4gICAgICB0aGlzLmNvbm5lY3Rpb24ud3JpdGVyLFxuICAgICAgdGhpcy5jb25uZWN0aW9uLnJlYWRlcixcbiAgICAgIGUuY29tbWFuZCxcbiAgICAgIC4uLmUuYXJncyxcbiAgICApXG4gICAgICAudGhlbihlLmQucmVzb2x2ZSlcbiAgICAgIC5jYXRjaChhc3luYyAoZXJyb3IpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5tYXhSZXRyeUNvdW50ID4gMCAmJlxuICAgICAgICAgIC8vIEVycm9yIGBCYWRSZXNvdXJjZWAgaXMgdGhyb3duIHdoZW4gYW4gYXR0ZW1wdCBpcyBtYWRlIHRvIHdyaXRlIHRvIGEgY2xvc2VkIGNvbm5lY3Rpb24sXG4gICAgICAgICAgLy8gIE1ha2Ugc3VyZSB0aGF0IHRoZSBjb25uZWN0aW9uIHdhc24ndCBleHBsaWNpdGx5IGNsb3NlZCBieSB0aGUgdXNlciBiZWZvcmUgdHJ5aW5nIHRvIHJlY29ubmVjdC5cbiAgICAgICAgICAoKGVycm9yIGluc3RhbmNlb2YgRGVuby5lcnJvcnMuQmFkUmVzb3VyY2UgJiZcbiAgICAgICAgICAgICF0aGlzLmNvbm5lY3Rpb24uaXNDbG9zZWQpIHx8XG4gICAgICAgICAgICBlcnJvciBpbnN0YW5jZW9mIERlbm8uZXJyb3JzLkJyb2tlblBpcGUgfHxcbiAgICAgICAgICAgIGVycm9yIGluc3RhbmNlb2YgRGVuby5lcnJvcnMuQ29ubmVjdGlvbkFib3J0ZWQgfHxcbiAgICAgICAgICAgIGVycm9yIGluc3RhbmNlb2YgRGVuby5lcnJvcnMuQ29ubmVjdGlvblJlZnVzZWQgfHxcbiAgICAgICAgICAgIGVycm9yIGluc3RhbmNlb2YgRGVuby5lcnJvcnMuQ29ubmVjdGlvblJlc2V0IHx8XG4gICAgICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVPRkVycm9yKVxuICAgICAgICApIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLmNvbm5lY3Rpb24ucmVjb25uZWN0KCk7XG4gICAgICAgIH0gZWxzZSBlLmQucmVqZWN0KGVycm9yKTtcbiAgICAgIH0pXG4gICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHRoaXMucXVldWUuc2hpZnQoKTtcbiAgICAgICAgdGhpcy5kZXF1ZXVlKCk7XG4gICAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsUUFBUSxRQUFRLGNBQWM7QUFDdkMsU0FFRSxRQUFRLFFBQ0gsaURBQWlEO0FBQ3hELFNBQVMsV0FBVyxRQUFRLG9CQUFvQjtBQWdCaEQsT0FBTyxNQUFNOztFQUNYLFlBQVksQUFBUyxVQUFzQixDQUFFO1NBQXhCLGFBQUE7U0FFYixRQUlGLEVBQUU7RUFOc0M7RUFFdEMsTUFJQztFQUVULEtBQ0UsT0FBZSxFQUNmLEdBQUcsSUFBa0IsRUFDQTtJQUNyQixNQUFNLElBQUk7SUFDVixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztNQUFFO01BQVM7TUFBTTtJQUFFO0lBQ25DLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssR0FBRztNQUMzQixJQUFJLENBQUMsT0FBTztJQUNkO0lBQ0EsT0FBTztFQUNUO0VBRUEsUUFBYztJQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSztFQUN2QjtFQUVRLFVBQWdCO0lBQ3RCLE1BQU0sQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUs7SUFDdEIsSUFBSSxDQUFDLEdBQUc7SUFDUixZQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFDdEIsRUFBRSxPQUFPLEtBQ04sRUFBRSxJQUFJLEVBRVIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFDaEIsS0FBSyxDQUFDLE9BQU87TUFDWixJQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxHQUFHLEtBQ2hDLHlGQUF5RjtNQUN6RixrR0FBa0c7TUFDbEcsQ0FBQyxBQUFDLGlCQUFpQixLQUFLLE1BQU0sQ0FBQyxXQUFXLElBQ3hDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLElBQ3pCLGlCQUFpQixLQUFLLE1BQU0sQ0FBQyxVQUFVLElBQ3ZDLGlCQUFpQixLQUFLLE1BQU0sQ0FBQyxpQkFBaUIsSUFDOUMsaUJBQWlCLEtBQUssTUFBTSxDQUFDLGlCQUFpQixJQUM5QyxpQkFBaUIsS0FBSyxNQUFNLENBQUMsZUFBZSxJQUM1QyxpQkFBaUIsUUFBUSxHQUMzQjtRQUNBLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTO01BQ2pDLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3BCLEdBQ0MsT0FBTyxDQUFDO01BQ1AsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLO01BQ2hCLElBQUksQ0FBQyxPQUFPO0lBQ2Q7RUFDSjtBQUNGIn0=
// denoCacheMetadata=14156265526944562023,3611647201273195171