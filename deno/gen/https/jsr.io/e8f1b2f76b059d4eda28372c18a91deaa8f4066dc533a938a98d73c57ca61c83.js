/**
 * Curries a function, allowing it to be called with a single argument at a time and returning a new function that takes the next argument.
 * This process continues until all arguments have been provided, at which point the original function is called with all accumulated arguments.
 *
 * Unlike `curry`, this function curries the function from right to left.
 *
 * @param {() => R} func - The function to curry.
 * @returns {() => R} A curried function.
 *
 * @example
 * function noArgFunc() {
 *  return 42;
 * }
 * const curriedNoArgFunc = curryRight(noArgFunc);
 * console.log(curriedNoArgFunc()); // 42
 */ /**
 * Curries a function, allowing it to be called with a single argument at a time and returning a new function that takes the next argument.
 * This process continues until all arguments have been provided, at which point the original function is called with all accumulated arguments.
 *
 * Unlike `curry`, this function curries the function from right to left.
 *
 * @param {(...args: any[]) => any} func - The function to curry.
 * @returns {(...args: any[]) => any} A curried function.
 *
 * @example
 * function sum(a: number, b: number, c: number) {
 *   return a + b + c;
 * }
 *
 * const curriedSum = curryRight(sum);
 *
 * // The parameter `c` should be given the value `10`.
 * const add10 = curriedSum(10);
 *
 * // The parameter `b` should be given the value `15`.
 * const add25 = add10(15);
 *
 * // The parameter `a` should be given the value `5`. The function 'sum' has received all its arguments and will now return a value.
 * const result = add25(5); // 30
 */ export function curryRight(func) {
  if (func.length === 0 || func.length === 1) {
    return func;
  }
  return function(arg) {
    return makeCurryRight(func, func.length, [
      arg
    ]);
  };
}
function makeCurryRight(origin, argsLength, args) {
  if (args.length === argsLength) {
    return origin(...args);
  } else {
    const next = function(arg) {
      return makeCurryRight(origin, argsLength, [
        arg,
        ...args
      ]);
    };
    return next;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9mdW5jdGlvbi9jdXJyeVJpZ2h0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3VycmllcyBhIGZ1bmN0aW9uLCBhbGxvd2luZyBpdCB0byBiZSBjYWxsZWQgd2l0aCBhIHNpbmdsZSBhcmd1bWVudCBhdCBhIHRpbWUgYW5kIHJldHVybmluZyBhIG5ldyBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBuZXh0IGFyZ3VtZW50LlxuICogVGhpcyBwcm9jZXNzIGNvbnRpbnVlcyB1bnRpbCBhbGwgYXJndW1lbnRzIGhhdmUgYmVlbiBwcm92aWRlZCwgYXQgd2hpY2ggcG9pbnQgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFsbCBhY2N1bXVsYXRlZCBhcmd1bWVudHMuXG4gKlxuICogVW5saWtlIGBjdXJyeWAsIHRoaXMgZnVuY3Rpb24gY3VycmllcyB0aGUgZnVuY3Rpb24gZnJvbSByaWdodCB0byBsZWZ0LlxuICpcbiAqIEBwYXJhbSB7KCkgPT4gUn0gZnVuYyAtIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm5zIHsoKSA9PiBSfSBBIGN1cnJpZWQgZnVuY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGZ1bmN0aW9uIG5vQXJnRnVuYygpIHtcbiAqICByZXR1cm4gNDI7XG4gKiB9XG4gKiBjb25zdCBjdXJyaWVkTm9BcmdGdW5jID0gY3VycnlSaWdodChub0FyZ0Z1bmMpO1xuICogY29uc29sZS5sb2coY3VycmllZE5vQXJnRnVuYygpKTsgLy8gNDJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1cnJ5UmlnaHQ8Uj4oZnVuYzogKCkgPT4gUik6ICgpID0+IFI7XG4vKipcbiAqIEN1cnJpZXMgYSBmdW5jdGlvbiwgYWxsb3dpbmcgaXQgdG8gYmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgYXQgYSB0aW1lIGFuZCByZXR1cm5pbmcgYSBuZXcgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgbmV4dCBhcmd1bWVudC5cbiAqIFRoaXMgcHJvY2VzcyBjb250aW51ZXMgdW50aWwgYWxsIGFyZ3VtZW50cyBoYXZlIGJlZW4gcHJvdmlkZWQsIGF0IHdoaWNoIHBvaW50IHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCBhbGwgYWNjdW11bGF0ZWQgYXJndW1lbnRzLlxuICpcbiAqIFVubGlrZSBgY3VycnlgLCB0aGlzIGZ1bmN0aW9uIGN1cnJpZXMgdGhlIGZ1bmN0aW9uIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqXG4gKiBAcGFyYW0geyhwOiBQKSA9PiBSfSBmdW5jIC0gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICogQHJldHVybnMgeyhwOiBQKSA9PiBSfSBBIGN1cnJpZWQgZnVuY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGZ1bmN0aW9uIG9uZUFyZ0Z1bmMoYTogbnVtYmVyKSB7XG4gKiAgIHJldHVybiBhICogMjtcbiAqIH1cbiAqIGNvbnN0IGN1cnJpZWRPbmVBcmdGdW5jID0gY3VycnlSaWdodChvbmVBcmdGdW5jKTtcbiAqIGNvbnNvbGUubG9nKGN1cnJpZWRPbmVBcmdGdW5jKDUpKTsgLy8gMTBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1cnJ5UmlnaHQ8UCwgUj4oZnVuYzogKHA6IFApID0+IFIpOiAocDogUCkgPT4gUjtcbi8qKlxuICogQ3VycmllcyBhIGZ1bmN0aW9uLCBhbGxvd2luZyBpdCB0byBiZSBjYWxsZWQgd2l0aCBhIHNpbmdsZSBhcmd1bWVudCBhdCBhIHRpbWUgYW5kIHJldHVybmluZyBhIG5ldyBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBuZXh0IGFyZ3VtZW50LlxuICogVGhpcyBwcm9jZXNzIGNvbnRpbnVlcyB1bnRpbCBhbGwgYXJndW1lbnRzIGhhdmUgYmVlbiBwcm92aWRlZCwgYXQgd2hpY2ggcG9pbnQgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFsbCBhY2N1bXVsYXRlZCBhcmd1bWVudHMuXG4gKlxuICogVW5saWtlIGBjdXJyeWAsIHRoaXMgZnVuY3Rpb24gY3VycmllcyB0aGUgZnVuY3Rpb24gZnJvbSByaWdodCB0byBsZWZ0LlxuICpcbiAqIEBwYXJhbSB7KHAxOiBQMSwgcDI6IFAyKSA9PiBSfSBmdW5jIC0gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICogQHJldHVybnMgeyhwMjogUDIpID0+IChwMTogUDEpID0+IFJ9IEEgY3VycmllZCBmdW5jdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogZnVuY3Rpb24gdHdvQXJnRnVuYyhhOiBudW1iZXIsIGI6IG51bWJlcikge1xuICogIHJldHVybiBbYSwgYl07XG4gKiB9XG4gKiBjb25zdCBjdXJyaWVkVHdvQXJnRnVuYyA9IGN1cnJ5UmlnaHQodHdvQXJnRnVuYyk7XG4gKiBjb25zdCBmdW5jID0gY3VycmllZFR3b0FyZ0Z1bmMoMSk7XG4gKiBjb25zb2xlLmxvZyhmdW5jKDIpKTsgLy8gWzIsIDFdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjdXJyeVJpZ2h0PFAxLCBQMiwgUj4oZnVuYzogKHAxOiBQMSwgcDI6IFAyKSA9PiBSKTogKHAyOiBQMikgPT4gKHAxOiBQMSkgPT4gUjtcbi8qKlxuICogQ3VycmllcyBhIGZ1bmN0aW9uLCBhbGxvd2luZyBpdCB0byBiZSBjYWxsZWQgd2l0aCBhIHNpbmdsZSBhcmd1bWVudCBhdCBhIHRpbWUgYW5kIHJldHVybmluZyBhIG5ldyBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBuZXh0IGFyZ3VtZW50LlxuICogVGhpcyBwcm9jZXNzIGNvbnRpbnVlcyB1bnRpbCBhbGwgYXJndW1lbnRzIGhhdmUgYmVlbiBwcm92aWRlZCwgYXQgd2hpY2ggcG9pbnQgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFsbCBhY2N1bXVsYXRlZCBhcmd1bWVudHMuXG4gKlxuICogVW5saWtlIGBjdXJyeWAsIHRoaXMgZnVuY3Rpb24gY3VycmllcyB0aGUgZnVuY3Rpb24gZnJvbSByaWdodCB0byBsZWZ0LlxuICpcbiAqIEBwYXJhbSB7KHAxOiBQMSwgcDI6IFAyLCBwMzogUDMpID0+IFJ9IGZ1bmMgLSBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcmV0dXJucyB7KHAzOiBQMykgPT4gKHAyOiBQMikgPT4gKHAxOiBQMSkgPT4gUn0gQSBjdXJyaWVkIGZ1bmN0aW9uLlxuICpcbiAqIEBleGFtcGxlXG4gKiBmdW5jdGlvbiB0aHJlZUFyZ0Z1bmMoYTogbnVtYmVyLCBiOiBudW1iZXIsIGM6IG51bWJlcikge1xuICogICByZXR1cm4gW2EsIGIsIGNdO1xuICogfVxuICogY29uc3QgY3VycmllZFRocmVlQXJnRnVuYyA9IGN1cnJ5UmlnaHQodGhyZWVBcmdGdW5jKTtcbiAqIGNvbnN0IGZ1bmMgPSBjdXJyaWVkVGhyZWVBcmdGdW5jKDEpO1xuICogY29uc3QgZnVuYzIgPSBmdW5jKDIpO1xuICogY29uc29sZS5sb2coZnVuYzIoMykpOyAvLyBbMywgMiwgMV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGN1cnJ5UmlnaHQ8UDEsIFAyLCBQMywgUj4oZnVuYzogKHAxOiBQMSwgcDI6IFAyLCBwMzogUDMpID0+IFIpOiAocDM6IFAzKSA9PiAocDI6IFAyKSA9PiAocDE6IFAxKSA9PiBSO1xuLyoqXG4gKiBDdXJyaWVzIGEgZnVuY3Rpb24sIGFsbG93aW5nIGl0IHRvIGJlIGNhbGxlZCB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50IGF0IGEgdGltZSBhbmQgcmV0dXJuaW5nIGEgbmV3IGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIG5leHQgYXJndW1lbnQuXG4gKiBUaGlzIHByb2Nlc3MgY29udGludWVzIHVudGlsIGFsbCBhcmd1bWVudHMgaGF2ZSBiZWVuIHByb3ZpZGVkLCBhdCB3aGljaCBwb2ludCB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYWxsIGFjY3VtdWxhdGVkIGFyZ3VtZW50cy5cbiAqXG4gKiBVbmxpa2UgYGN1cnJ5YCwgdGhpcyBmdW5jdGlvbiBjdXJyaWVzIHRoZSBmdW5jdGlvbiBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKlxuICogQHBhcmFtIHsocDE6IFAxLCBwMjogUDIsIHAzOiBQMywgcDQ6IFA0KSA9PiBSfSBmdW5jIC0gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICogQHJldHVybnMgeyhwNDogUDQpID0+IChwMzogUDMpID0+IChwMjogUDIpID0+IChwMTogUDEpID0+IFJ9IEEgY3VycmllZCBmdW5jdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogZnVuY3Rpb24gZm91ckFyZ0Z1bmMoYTogbnVtYmVyLCBiOiBudW1iZXIsIGM6IG51bWJlciwgZDogbnVtYmVyKSB7XG4gKiAgcmV0dXJuIFthLCBiLCBjLCBkXTtcbiAqIH1cbiAqIGNvbnN0IGN1cnJpZWRGb3VyQXJnRnVuYyA9IGN1cnJ5UmlnaHQoZm91ckFyZ0Z1bmMpO1xuICogY29uc3QgZnVuYyA9IGN1cnJpZWRGb3VyQXJnRnVuYygxKTtcbiAqIGNvbnN0IGZ1bmMyID0gZnVuYygyKTtcbiAqIGNvbnN0IGZ1bmMzID0gZnVuYzIoMyk7XG4gKiBjb25zb2xlLmxvZyhmdW5jMyg0KSk7IC8vIFs0LCAzLCAyLCAxXVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3VycnlSaWdodDxQMSwgUDIsIFAzLCBQNCwgUj4oXG4gIGZ1bmM6IChwMTogUDEsIHAyOiBQMiwgcDM6IFAzLCBwNDogUDQpID0+IFJcbik6IChwNDogUDQpID0+IChwMzogUDMpID0+IChwMjogUDIpID0+IChwMTogUDEpID0+IFI7XG4vKipcbiAqIEN1cnJpZXMgYSBmdW5jdGlvbiwgYWxsb3dpbmcgaXQgdG8gYmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgYXQgYSB0aW1lIGFuZCByZXR1cm5pbmcgYSBuZXcgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgbmV4dCBhcmd1bWVudC5cbiAqIFRoaXMgcHJvY2VzcyBjb250aW51ZXMgdW50aWwgYWxsIGFyZ3VtZW50cyBoYXZlIGJlZW4gcHJvdmlkZWQsIGF0IHdoaWNoIHBvaW50IHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCBhbGwgYWNjdW11bGF0ZWQgYXJndW1lbnRzLlxuICpcbiAqIFVubGlrZSBgY3VycnlgLCB0aGlzIGZ1bmN0aW9uIGN1cnJpZXMgdGhlIGZ1bmN0aW9uIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqXG4gKiBAcGFyYW0geyhwMTogUDEsIHAyOiBQMiwgcDM6IFAzLCBwNDogUDQsIHA1OiBQNSkgPT4gUn0gZnVuYyAtIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm5zIHsocDU6IFA1KSA9PiAocDQ6IFA0KSA9PiAocDM6IFAzKSA9PiAocDI6IFAyKSA9PiAocDE6IFAxKSA9PiBSfSBBIGN1cnJpZWQgZnVuY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGZ1bmN0aW9uIGZpdmVBcmdGdW5jKGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIsIGQ6IG51bWJlciwgZTogbnVtYmVyKSB7XG4gKiAgIHJldHVybiBbYSwgYiwgYywgZCwgZV07XG4gKiB9XG4gKiBjb25zdCBjdXJyaWVkRml2ZUFyZ0Z1bmMgPSBjdXJyeVJpZ2h0KGZpdmVBcmdGdW5jKTtcbiAqIGNvbnN0IGZ1bmMgPSBjdXJyaWVkRml2ZUFyZ0Z1bmMoMSk7XG4gKiBjb25zdCBmdW5jMiA9IGZ1bmMoMik7XG4gKiBjb25zdCBmdW5jMyA9IGZ1bmMyKDMpO1xuICogY29uc3QgZnVuYzQgPSBmdW5jMyg0KTtcbiAqIGNvbnNvbGUubG9nKGZ1bmM0KDUpKTsgLy8gWzUsIDQsIDMsIDIsIDFdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjdXJyeVJpZ2h0PFAxLCBQMiwgUDMsIFA0LCBQNSwgUj4oXG4gIGZ1bmM6IChwMTogUDEsIHAyOiBQMiwgcDM6IFAzLCBwNDogUDQsIHA1OiBQNSkgPT4gUlxuKTogKHA1OiBQNSkgPT4gKHA0OiBQNCkgPT4gKHAzOiBQMykgPT4gKHAyOiBQMikgPT4gKHAxOiBQMSkgPT4gUjtcbi8qKlxuICogQ3VycmllcyBhIGZ1bmN0aW9uLCBhbGxvd2luZyBpdCB0byBiZSBjYWxsZWQgd2l0aCBhIHNpbmdsZSBhcmd1bWVudCBhdCBhIHRpbWUgYW5kIHJldHVybmluZyBhIG5ldyBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBuZXh0IGFyZ3VtZW50LlxuICogVGhpcyBwcm9jZXNzIGNvbnRpbnVlcyB1bnRpbCBhbGwgYXJndW1lbnRzIGhhdmUgYmVlbiBwcm92aWRlZCwgYXQgd2hpY2ggcG9pbnQgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFsbCBhY2N1bXVsYXRlZCBhcmd1bWVudHMuXG4gKlxuICogVW5saWtlIGBjdXJyeWAsIHRoaXMgZnVuY3Rpb24gY3VycmllcyB0aGUgZnVuY3Rpb24gZnJvbSByaWdodCB0byBsZWZ0LlxuICpcbiAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiBhbnl9IGZ1bmMgLSBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcmV0dXJucyB7KC4uLmFyZ3M6IGFueVtdKSA9PiBhbnl9IEEgY3VycmllZCBmdW5jdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogZnVuY3Rpb24gc3VtKGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIpIHtcbiAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAqIH1cbiAqXG4gKiBjb25zdCBjdXJyaWVkU3VtID0gY3VycnlSaWdodChzdW0pO1xuICpcbiAqIC8vIFRoZSBwYXJhbWV0ZXIgYGNgIHNob3VsZCBiZSBnaXZlbiB0aGUgdmFsdWUgYDEwYC5cbiAqIGNvbnN0IGFkZDEwID0gY3VycmllZFN1bSgxMCk7XG4gKlxuICogLy8gVGhlIHBhcmFtZXRlciBgYmAgc2hvdWxkIGJlIGdpdmVuIHRoZSB2YWx1ZSBgMTVgLlxuICogY29uc3QgYWRkMjUgPSBhZGQxMCgxNSk7XG4gKlxuICogLy8gVGhlIHBhcmFtZXRlciBgYWAgc2hvdWxkIGJlIGdpdmVuIHRoZSB2YWx1ZSBgNWAuIFRoZSBmdW5jdGlvbiAnc3VtJyBoYXMgcmVjZWl2ZWQgYWxsIGl0cyBhcmd1bWVudHMgYW5kIHdpbGwgbm93IHJldHVybiBhIHZhbHVlLlxuICogY29uc3QgcmVzdWx0ID0gYWRkMjUoNSk7IC8vIDMwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjdXJyeVJpZ2h0KGZ1bmM6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55KTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG4vKipcbiAqIEN1cnJpZXMgYSBmdW5jdGlvbiwgYWxsb3dpbmcgaXQgdG8gYmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgYXQgYSB0aW1lIGFuZCByZXR1cm5pbmcgYSBuZXcgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgbmV4dCBhcmd1bWVudC5cbiAqIFRoaXMgcHJvY2VzcyBjb250aW51ZXMgdW50aWwgYWxsIGFyZ3VtZW50cyBoYXZlIGJlZW4gcHJvdmlkZWQsIGF0IHdoaWNoIHBvaW50IHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCBhbGwgYWNjdW11bGF0ZWQgYXJndW1lbnRzLlxuICpcbiAqIFVubGlrZSBgY3VycnlgLCB0aGlzIGZ1bmN0aW9uIGN1cnJpZXMgdGhlIGZ1bmN0aW9uIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqXG4gKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSkgPT4gYW55fSBmdW5jIC0gVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICogQHJldHVybnMgeyguLi5hcmdzOiBhbnlbXSkgPT4gYW55fSBBIGN1cnJpZWQgZnVuY3Rpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGZ1bmN0aW9uIHN1bShhOiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyKSB7XG4gKiAgIHJldHVybiBhICsgYiArIGM7XG4gKiB9XG4gKlxuICogY29uc3QgY3VycmllZFN1bSA9IGN1cnJ5UmlnaHQoc3VtKTtcbiAqXG4gKiAvLyBUaGUgcGFyYW1ldGVyIGBjYCBzaG91bGQgYmUgZ2l2ZW4gdGhlIHZhbHVlIGAxMGAuXG4gKiBjb25zdCBhZGQxMCA9IGN1cnJpZWRTdW0oMTApO1xuICpcbiAqIC8vIFRoZSBwYXJhbWV0ZXIgYGJgIHNob3VsZCBiZSBnaXZlbiB0aGUgdmFsdWUgYDE1YC5cbiAqIGNvbnN0IGFkZDI1ID0gYWRkMTAoMTUpO1xuICpcbiAqIC8vIFRoZSBwYXJhbWV0ZXIgYGFgIHNob3VsZCBiZSBnaXZlbiB0aGUgdmFsdWUgYDVgLiBUaGUgZnVuY3Rpb24gJ3N1bScgaGFzIHJlY2VpdmVkIGFsbCBpdHMgYXJndW1lbnRzIGFuZCB3aWxsIG5vdyByZXR1cm4gYSB2YWx1ZS5cbiAqIGNvbnN0IHJlc3VsdCA9IGFkZDI1KDUpOyAvLyAzMFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jOiAoLi4uYXJnczogYW55W10pID0+IGFueSk6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55IHtcbiAgaWYgKGZ1bmMubGVuZ3RoID09PSAwIHx8IGZ1bmMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFyZzogYW55KSB7XG4gICAgcmV0dXJuIG1ha2VDdXJyeVJpZ2h0KGZ1bmMsIGZ1bmMubGVuZ3RoLCBbYXJnXSk7XG4gIH0gYXMgYW55O1xufVxuXG5mdW5jdGlvbiBtYWtlQ3VycnlSaWdodDxGIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gYW55PihvcmlnaW46IEYsIGFyZ3NMZW5ndGg6IG51bWJlciwgYXJnczogYW55W10pIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSBhcmdzTGVuZ3RoKSB7XG4gICAgcmV0dXJuIG9yaWdpbiguLi5hcmdzKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBuZXh0ID0gZnVuY3Rpb24gKGFyZzogUGFyYW1ldGVyczxGPlswXSkge1xuICAgICAgcmV0dXJuIG1ha2VDdXJyeVJpZ2h0KG9yaWdpbiwgYXJnc0xlbmd0aCwgW2FyZywgLi4uYXJnc10pO1xuICAgIH07XG4gICAgcmV0dXJuIG5leHQgYXMgYW55O1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBK0hEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0F3QkMsR0FDRCxPQUFPLFNBQVMsV0FBVyxJQUE2QjtFQUN0RCxJQUFJLEtBQUssTUFBTSxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUssR0FBRztJQUMxQyxPQUFPO0VBQ1Q7RUFFQSxPQUFPLFNBQVUsR0FBUTtJQUN2QixPQUFPLGVBQWUsTUFBTSxLQUFLLE1BQU0sRUFBRTtNQUFDO0tBQUk7RUFDaEQ7QUFDRjtBQUVBLFNBQVMsZUFBZ0QsTUFBUyxFQUFFLFVBQWtCLEVBQUUsSUFBVztFQUNqRyxJQUFJLEtBQUssTUFBTSxLQUFLLFlBQVk7SUFDOUIsT0FBTyxVQUFVO0VBQ25CLE9BQU87SUFDTCxNQUFNLE9BQU8sU0FBVSxHQUFxQjtNQUMxQyxPQUFPLGVBQWUsUUFBUSxZQUFZO1FBQUM7V0FBUTtPQUFLO0lBQzFEO0lBQ0EsT0FBTztFQUNUO0FBQ0YifQ==
// denoCacheMetadata=5514061949013518539,7555925157511049671