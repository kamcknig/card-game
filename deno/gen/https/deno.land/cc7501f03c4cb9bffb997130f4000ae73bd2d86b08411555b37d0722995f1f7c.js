import { decodeFromBase64, encodeToBase64 } from "./base64-arraybuffer.ts";
const SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text
const PACKET_TYPES = new Map();
const PACKET_TYPES_REVERSE = new Map();
[
  "open",
  "close",
  "ping",
  "pong",
  "message",
  "upgrade",
  "noop"
].forEach((type, index)=>{
  PACKET_TYPES.set(type, "" + index);
  PACKET_TYPES_REVERSE.set("" + index, type);
});
const ERROR_PACKET = {
  type: "error",
  data: "parser error"
};
export const Parser = {
  encodePacket ({ type, data }, supportsBinary, callback) {
    if (data instanceof Blob) {
      return supportsBinary ? callback(data) : encodeBlobAsBase64(data, callback);
    } else if (data instanceof ArrayBuffer) {
      return callback(supportsBinary ? data : "b" + encodeToBase64(data));
    } else if (ArrayBuffer.isView(data)) {
      if (supportsBinary) {
        return callback(data);
      } else {
        const array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
        return callback("b" + encodeToBase64(array));
      }
    }
    // plain string
    return callback(PACKET_TYPES.get(type) + (data || ""));
  },
  decodePacket (encodedPacket, binaryType) {
    if (typeof encodedPacket !== "string") {
      return {
        type: "message",
        data: mapBinary(encodedPacket, binaryType)
      };
    }
    const typeChar = encodedPacket.charAt(0);
    if (typeChar === "b") {
      const buffer = decodeFromBase64(encodedPacket.substring(1));
      return {
        type: "message",
        data: mapBinary(buffer, binaryType)
      };
    }
    if (!PACKET_TYPES_REVERSE.has(typeChar)) {
      return ERROR_PACKET;
    }
    const type = PACKET_TYPES_REVERSE.get(typeChar);
    return encodedPacket.length > 1 ? {
      type,
      data: encodedPacket.substring(1)
    } : {
      type
    };
  },
  encodePayload (packets, callback) {
    // some packets may be added to the array while encoding, so the initial length must be saved
    const length = packets.length;
    const encodedPackets = new Array(length);
    let count = 0;
    packets.forEach((packet, i)=>{
      // force base64 encoding for binary packets
      this.encodePacket(packet, false, (encodedPacket)=>{
        encodedPackets[i] = encodedPacket;
        if (++count === length) {
          callback(encodedPackets.join(SEPARATOR));
        }
      });
    });
  },
  decodePayload (encodedPayload, binaryType) {
    const encodedPackets = encodedPayload.split(SEPARATOR);
    const packets = [];
    for(let i = 0; i < encodedPackets.length; i++){
      const decodedPacket = this.decodePacket(encodedPackets[i], binaryType);
      packets.push(decodedPacket);
      if (decodedPacket.type === "error") {
        break;
      }
    }
    return packets;
  }
};
function encodeBlobAsBase64(data, callback) {
  const fileReader = new FileReader();
  fileReader.onload = function() {
    const content = fileReader.result.split(",")[1];
    callback("b" + content);
  };
  return fileReader.readAsDataURL(data);
}
function mapBinary(data, binaryType) {
  switch(binaryType){
    case "blob":
      return new Blob([
        data
      ]);
    case "arraybuffer":
    default:
      return data; // assuming the data is already an ArrayBuffer
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=3579665943120649422,13976070778558829433