var _computedKey, _computedKey1;
export const TurnPhaseOrderValues = [
  'action',
  'buy',
  'cleanup'
];
const MatValues = [
  'island',
  'native-village',
  'set-aside',
  'tavern'
];
export const isLocationMat = (location)=>{
  return !!location && MatValues.indexOf(location) !== -1;
};
const CardLocationValues = [
  'nonSupplyCards',
  'activeDuration',
  'playerDiscard',
  'playerHand',
  'trash',
  'playArea',
  'playerDeck',
  'basicSupply',
  'kingdomSupply'
];
_computedKey = Symbol.for('Deno.customInspect');
export class Player {
  id;
  name;
  sessionId;
  socketId;
  connected;
  ready;
  color;
  constructor({ color, id, name, sessionId, socketId, connected, ready }){
    this.id = id;
    this.name = name;
    this.sessionId = sessionId;
    this.socketId = socketId;
    this.connected = connected;
    this.ready = ready;
    this.color = color;
  }
  toString() {
    return `[PLAYER ${this.id} - ${this.name}]`;
  }
  // @ts-ignore
  [_computedKey]() {
    return this.toString();
  }
}
export class CardLike {
  id;
  cardKey;
  cardName;
  cost;
  fullImagePath;
  detailImagePath;
  /**
   * If null, this card is not used during kingdom selection as part of the pool. If undefined, the cardKey is used.
   *
   * This is used in cases where a kingdom supply might contain different cards in one supply such as Knights from
   * Dark Ages. We set a randomizer of "knights" on it so that it's only gets one vote but it has 10 different knight
   * cards in the supply
   */ randomizer;
  constructor(args){
    this.id = args.id;
    this.cardKey = args.cardKey ?? '';
    this.cardName = args.cardName ?? '';
    this.fullImagePath = args.fullImagePath ?? '';
    this.detailImagePath = args.detailImagePath ?? '';
    this.randomizer = args.randomizer ?? null;
    this.cost = args.cost ?? {
      treasure: 0
    };
  }
}
export class Event extends CardLike {
  constructor(args){
    super(args);
    this.id = args.id;
    this.cardName = args.cardName;
    this.fullImagePath = args.fullImagePath;
    this.detailImagePath = args.detailImagePath;
  }
  toString() {
    return `[EVENT ${this.id} - ${this.cardKey}]`;
  }
}
_computedKey1 = Symbol.for('Deno.customInspect');
export class Card extends CardLike {
  /**
   * This indicates if the card is part of the supply or not. shelters, rewards, etc. are not part of the supply.
   *
   * @default true
   */ partOfSupply;
  tags = [];
  kingdom;
  facing;
  isBasic = false;
  type;
  mat;
  victoryPoints;
  abilityText;
  targetScheme;
  expansionName;
  halfImagePath;
  owner;
  constructor(args){
    super(args);
    this.tags = args.tags ?? [];
    this.facing = args.facing ?? 'front';
    this.isBasic = args.isBasic ?? false;
    this.id = args.id;
    this.type = args.type;
    this.cost = args.cost;
    this.abilityText = args.abilityText;
    this.cardKey = args.cardKey;
    this.cardName = args.cardName;
    this.victoryPoints = args.victoryPoints ?? 0;
    this.targetScheme = args.targetScheme;
    this.expansionName = args.expansionName;
    this.fullImagePath = args.fullImagePath;
    this.halfImagePath = args.halfImagePath;
    this.detailImagePath = args.detailImagePath;
    this.owner = args.owner ?? null;
    this.mat = args.mat;
    this.kingdom = args.kingdom;
    this.partOfSupply = args.partOfSupply ?? true;
    this.randomizer = args.randomizer;
  }
  toString() {
    return `[CARD ${this.id} - ${this.cardKey}]`;
  }
  // @ts-ignore
  [_computedKey1]() {
    return this.toString();
  }
}
const EffectTargetValues = [
  'ANY',
  'ALL_OTHER',
  'ALL'
];
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=2193715181494111116,800158112198103118