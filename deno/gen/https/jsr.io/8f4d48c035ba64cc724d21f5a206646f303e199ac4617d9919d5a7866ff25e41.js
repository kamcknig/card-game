import { dropRightWhile as dropRightWhileToolkit } from '../../array/dropRightWhile.ts';
import { property } from '../object/property.ts';
import { isArrayLike } from '../predicate/isArrayLike.ts';
import { matches } from '../predicate/matches.ts';
import { matchesProperty } from '../predicate/matchesProperty.ts';
/**
 * Removes elements from the end of an array until the predicate returns false.
 *
 * This function iterates over an array and drops elements from the end until the provided
 * predicate function returns false. It then returns a new array with the remaining elements.
 *
 * @template T - The type of elements in the array.
 * @param {ArrayLike<T> | null | undefined} arr - The array from which to drop elements.
 * @param {(item: T, index: number, arr: T[]) => unknown} predicate - A predicate function that determines
 * whether to continue dropping elements. The function is called with each element, index, and array, and dropping
 * continues as long as it returns true.
 * @returns {T[]} A new array with the elements remaining after the predicate returns false.
 *
 * @example
 * const array = [3, 2, 1];
 * const result = dropRightWhile(array, (item, index, arr) => index >= 1);
 * // Returns: [3]
 */ export function dropRightWhile(arr, predicate) {
  if (!isArrayLike(arr)) {
    return [];
  }
  return dropRightWhileImpl(Array.from(arr), predicate);
}
function dropRightWhileImpl(arr, predicate) {
  switch(typeof predicate){
    case 'function':
      {
        return dropRightWhileToolkit(arr, (item, index, arr)=>Boolean(predicate(item, index, arr)));
      }
    case 'object':
      {
        if (Array.isArray(predicate) && predicate.length === 2) {
          const key = predicate[0];
          const value = predicate[1];
          return dropRightWhileToolkit(arr, matchesProperty(key, value));
        } else {
          return dropRightWhileToolkit(arr, matches(predicate));
        }
      }
    case 'symbol':
    case 'number':
    case 'string':
      {
        return dropRightWhileToolkit(arr, property(predicate));
      }
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=16119984725374635770,3854403793701944987