import { EOFError, ErrorReplyError, InvalidStateError } from "../errors.ts";
import { decoder, encoder } from "./_util.ts";
const IntegerReplyCode = ":".charCodeAt(0);
const BulkReplyCode = "$".charCodeAt(0);
const SimpleStringCode = "+".charCodeAt(0);
const ArrayReplyCode = "*".charCodeAt(0);
const ErrorReplyCode = "-".charCodeAt(0);
export async function readReply(reader) {
  const res = await reader.peek(1);
  if (res == null) {
    throw new EOFError();
  }
  const code = res[0];
  if (code === ErrorReplyCode) {
    await tryReadErrorReply(reader);
  }
  switch(code){
    case IntegerReplyCode:
      return IntegerReply.decode(reader);
    case SimpleStringCode:
      return SimpleStringReply.decode(reader);
    case BulkReplyCode:
      return BulkReply.decode(reader);
    case ArrayReplyCode:
      return ArrayReply.decode(reader);
    default:
      throw new InvalidStateError(`unknown code: '${String.fromCharCode(code)}' (${code})`);
  }
}
class BaseReply {
  code;
  constructor(code){
    this.code = code;
  }
  buffer() {
    throw createDecodeError(this.code, "buffer");
  }
  string() {
    throw createDecodeError(this.code, "string");
  }
  bulk() {
    throw createDecodeError(this.code, "bulk");
  }
  integer() {
    throw createDecodeError(this.code, "integer");
  }
  array() {
    throw createDecodeError(this.code, "array");
  }
}
class SimpleStringReply extends BaseReply {
  static async decode(reader) {
    const body = await readSimpleStringReplyBody(reader);
    return new SimpleStringReply(body);
  }
  #body;
  constructor(body){
    super(SimpleStringCode);
    this.#body = body;
  }
  bulk() {
    return this.string();
  }
  buffer() {
    return this.#body;
  }
  string() {
    return decoder.decode(this.#body);
  }
  value() {
    return this.string();
  }
}
class BulkReply extends BaseReply {
  static async decode(reader) {
    const body = await readBulkReplyBody(reader);
    return new BulkReply(body);
  }
  #body;
  constructor(body){
    super(BulkReplyCode);
    this.#body = body;
  }
  bulk() {
    return this.#body ? decoder.decode(this.#body) : null;
  }
  buffer() {
    return this.#body ?? new Uint8Array();
  }
  string() {
    return decoder.decode(this.#body ?? new Uint8Array());
  }
  value() {
    return this.bulk();
  }
}
class IntegerReply extends BaseReply {
  static async decode(reader) {
    const body = await readIntegerReplyBody(reader);
    return new IntegerReply(body);
  }
  #body;
  constructor(body){
    super(IntegerReplyCode);
    this.#body = body;
  }
  integer() {
    return parseInt(decoder.decode(this.#body));
  }
  string() {
    return this.integer().toString();
  }
  value() {
    return this.integer();
  }
}
class ArrayReply extends BaseReply {
  static async decode(reader) {
    const body = await readArrayReplyBody(reader);
    return new ArrayReply(body);
  }
  #body;
  constructor(body){
    super(ArrayReplyCode);
    this.#body = body;
  }
  array() {
    return this.#body;
  }
  value() {
    return this.array();
  }
}
async function readIntegerReplyBody(reader) {
  const line = await readLine(reader);
  if (line == null) {
    throw new InvalidStateError();
  }
  return line.subarray(1, line.length);
}
async function readBulkReplyBody(reader) {
  const line = await readLine(reader);
  if (line == null) {
    throw new InvalidStateError();
  }
  if (line[0] !== BulkReplyCode) {
    tryParseErrorReply(line);
  }
  const size = parseSize(line);
  if (size < 0) {
    // nil bulk reply
    return null;
  }
  const dest = new Uint8Array(size + 2);
  await reader.readFull(dest);
  return dest.subarray(0, dest.length - 2); // Strip CR and LF
}
async function readSimpleStringReplyBody(reader) {
  const line = await readLine(reader);
  if (line == null) {
    throw new InvalidStateError();
  }
  if (line[0] !== SimpleStringCode) {
    tryParseErrorReply(line);
  }
  return line.subarray(1, line.length);
}
export async function readArrayReplyBody(reader) {
  const line = await readLine(reader);
  if (line == null) {
    throw new InvalidStateError();
  }
  const argCount = parseSize(line);
  if (argCount === -1) {
    // `-1` indicates a null array
    return null;
  }
  const array = [];
  for(let i = 0; i < argCount; i++){
    const res = await reader.peek(1);
    if (res === null) {
      throw new EOFError();
    }
    const code = res[0];
    switch(code){
      case SimpleStringCode:
        {
          const reply = await SimpleStringReply.decode(reader);
          array.push(reply.string());
          break;
        }
      case BulkReplyCode:
        {
          const reply = await BulkReply.decode(reader);
          array.push(i === argCount - 1 ? reply.buffer() : reply.bulk());
          break;
        }
      case IntegerReplyCode:
        {
          const reply = await IntegerReply.decode(reader);
          array.push(reply.integer());
          break;
        }
      case ArrayReplyCode:
        {
          const reply = await ArrayReply.decode(reader);
          array.push(reply.value());
          break;
        }
    }
  }
  return array;
}
export const okReply = new SimpleStringReply(encoder.encode("OK"));
function tryParseErrorReply(line) {
  const code = line[0];
  if (code === ErrorReplyCode) {
    throw new ErrorReplyError(decoder.decode(line));
  }
  throw new Error(`invalid line: ${line}`);
}
async function tryReadErrorReply(reader) {
  const line = await readLine(reader);
  if (line == null) {
    throw new InvalidStateError();
  }
  tryParseErrorReply(line);
}
async function readLine(reader) {
  const result = await reader.readLine();
  if (result == null) {
    throw new InvalidStateError();
  }
  const { line } = result;
  return line;
}
function parseSize(line) {
  const sizeStr = line.subarray(1, line.length);
  const size = parseInt(decoder.decode(sizeStr));
  return size;
}
function createDecodeError(code, expectedType) {
  return new InvalidStateError(`cannot decode '${String.fromCharCode(code)}' type as \`${expectedType}\` value`);
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=18432136480392922459,11096550951658537079