/**
 * Returns an empty array when the input is a tuple containing exactly one element.
 *
 * @template T The type of the single element.
 * @param {[T]} arr - A tuple containing exactly one element.
 * @returns {[]} An empty array since there is only one element.
 *
 * @example
 * const array = [100] as const;
 * const result = initial(array);
 * // result will be []
 */ /**
 * Returns a new array containing all elements except the last one from the input array.
 * If the input array is empty or has only one element, the function returns an empty array.
 *
 * @template T The type of elements in the array.
 * @param {T[]} arr - The input array.
 * @returns {T[]} A new array containing all but the last element of the input array.
 *
 * @example
 * const arr = [1, 2, 3, 4];
 * const result = initial(arr);
 * // result will be [1, 2, 3]
 */ export function initial(arr) {
  return arr.slice(0, -1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9hcnJheS9pbml0aWFsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmV0dXJucyBhbiBlbXB0eSBhcnJheSB3aGVuIHRoZSBpbnB1dCBpcyBhIHR1cGxlIGNvbnRhaW5pbmcgZXhhY3RseSBvbmUgZWxlbWVudC5cbiAqXG4gKiBAdGVtcGxhdGUgVCBUaGUgdHlwZSBvZiB0aGUgc2luZ2xlIGVsZW1lbnQuXG4gKiBAcGFyYW0ge1tUXX0gYXJyIC0gQSB0dXBsZSBjb250YWluaW5nIGV4YWN0bHkgb25lIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7W119IEFuIGVtcHR5IGFycmF5IHNpbmNlIHRoZXJlIGlzIG9ubHkgb25lIGVsZW1lbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFycmF5ID0gWzEwMF0gYXMgY29uc3Q7XG4gKiBjb25zdCByZXN1bHQgPSBpbml0aWFsKGFycmF5KTtcbiAqIC8vIHJlc3VsdCB3aWxsIGJlIFtdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsPFQ+KGFycjogcmVhZG9ubHkgW1RdKTogW107XG5cbi8qKlxuICogUmV0dXJucyBhbiBlbXB0eSBhcnJheSB3aGVuIHRoZSBpbnB1dCBhcnJheSBpcyBlbXB0eS5cbiAqXG4gKiBAcmV0dXJucyB7W119IEFsd2F5cyByZXR1cm5zIGFuIGVtcHR5IGFycmF5IGZvciBhbiBlbXB0eSBpbnB1dC5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYXJyYXkgPSBbXSBhcyBjb25zdDtcbiAqIGNvbnN0IHJlc3VsdCA9IGluaXRpYWwoYXJyYXkpO1xuICogLy8gcmVzdWx0IHdpbGwgYmUgW11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWwoYXJyOiByZWFkb25seSBbXSk6IFtdO1xuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgYXJyYXkgY29udGFpbmluZyBhbGwgZWxlbWVudHMgZXhjZXB0IHRoZSBsYXN0IG9uZSBmcm9tIGEgdHVwbGUgd2l0aCBtdWx0aXBsZSBlbGVtZW50cy5cbiAqXG4gKiBAdGVtcGxhdGUgVCBUaGUgdHlwZXMgb2YgdGhlIGluaXRpYWwgZWxlbWVudHMuXG4gKiBAdGVtcGxhdGUgVSBUaGUgdHlwZSBvZiB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSB0dXBsZS5cbiAqIEBwYXJhbSB7Wy4uLlRbXSwgVV19IGFyciAtIEEgdHVwbGUgd2l0aCBvbmUgb3IgbW9yZSBlbGVtZW50cy5cbiAqIEByZXR1cm5zIHtUW119IEEgbmV3IGFycmF5IGNvbnRhaW5pbmcgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSB0dXBsZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYXJyYXkgPSBbJ2FwcGxlJywgJ2JhbmFuYScsICdjaGVycnknXSBhcyBjb25zdDtcbiAqIGNvbnN0IHJlc3VsdCA9IGluaXRpYWwoYXJyYXkpO1xuICogLy8gcmVzdWx0IHdpbGwgYmUgWydhcHBsZScsICdiYW5hbmEnXVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbDxULCBVPihhcnI6IHJlYWRvbmx5IFsuLi5UW10sIFVdKTogVFtdO1xuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgYXJyYXkgY29udGFpbmluZyBhbGwgZWxlbWVudHMgZXhjZXB0IHRoZSBsYXN0IG9uZSBmcm9tIHRoZSBpbnB1dCBhcnJheS5cbiAqIElmIHRoZSBpbnB1dCBhcnJheSBpcyBlbXB0eSBvciBoYXMgb25seSBvbmUgZWxlbWVudCwgdGhlIGZ1bmN0aW9uIHJldHVybnMgYW4gZW1wdHkgYXJyYXkuXG4gKlxuICogQHRlbXBsYXRlIFQgVGhlIHR5cGUgb2YgZWxlbWVudHMgaW4gdGhlIGFycmF5LlxuICogQHBhcmFtIHtUW119IGFyciAtIFRoZSBpbnB1dCBhcnJheS5cbiAqIEByZXR1cm5zIHtUW119IEEgbmV3IGFycmF5IGNvbnRhaW5pbmcgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSBpbnB1dCBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYXJyID0gWzEsIDIsIDMsIDRdO1xuICogY29uc3QgcmVzdWx0ID0gaW5pdGlhbChhcnIpO1xuICogLy8gcmVzdWx0IHdpbGwgYmUgWzEsIDIsIDNdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsPFQ+KGFycjogcmVhZG9ubHkgVFtdKTogVFtdO1xuXG4vKipcbiAqIFJldHVybnMgYSBuZXcgYXJyYXkgY29udGFpbmluZyBhbGwgZWxlbWVudHMgZXhjZXB0IHRoZSBsYXN0IG9uZSBmcm9tIHRoZSBpbnB1dCBhcnJheS5cbiAqIElmIHRoZSBpbnB1dCBhcnJheSBpcyBlbXB0eSBvciBoYXMgb25seSBvbmUgZWxlbWVudCwgdGhlIGZ1bmN0aW9uIHJldHVybnMgYW4gZW1wdHkgYXJyYXkuXG4gKlxuICogQHRlbXBsYXRlIFQgVGhlIHR5cGUgb2YgZWxlbWVudHMgaW4gdGhlIGFycmF5LlxuICogQHBhcmFtIHtUW119IGFyciAtIFRoZSBpbnB1dCBhcnJheS5cbiAqIEByZXR1cm5zIHtUW119IEEgbmV3IGFycmF5IGNvbnRhaW5pbmcgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSBpbnB1dCBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgYXJyID0gWzEsIDIsIDMsIDRdO1xuICogY29uc3QgcmVzdWx0ID0gaW5pdGlhbChhcnIpO1xuICogLy8gcmVzdWx0IHdpbGwgYmUgWzEsIDIsIDNdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsPFQ+KGFycjogcmVhZG9ubHkgVFtdKTogVFtdIHtcbiAgcmV0dXJuIGFyci5zbGljZSgwLCAtMSk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0NBV0MsR0E2Q0Q7Ozs7Ozs7Ozs7OztDQVlDLEdBQ0QsT0FBTyxTQUFTLFFBQVcsR0FBaUI7RUFDMUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDdkIifQ==
// denoCacheMetadata=2993550549761011556,16560299039405867137