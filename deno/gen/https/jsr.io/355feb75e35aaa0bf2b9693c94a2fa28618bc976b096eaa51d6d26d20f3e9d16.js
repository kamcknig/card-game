import { identity } from '../../function/identity.ts';
import { range } from '../../math/range.ts';
import { isArrayLike } from '../predicate/isArrayLike.ts';
import { iteratee as iterateeToolkit } from '../util/iteratee.ts';
/**
 * Maps each element in a collection to a new array of values using an iteratee.
 *
 * @param {T[] | ArrayLike<T> | Record<string, T> | null | undefined} collection - The collection to iterate over.
 * @param {((value: any, index: PropertyKey, collection: any) => any) | PropertyKey | object} iteratee - The function invoked per iteration or the key to map over.
 * @returns {any[]} - Returns the new mapped array.
 *
 * @example
 * // Using a transformation function
 * const array = [1, 2, 3];
 * map(array, value => value * 2); // => [2, 4, 6]
 *
 * @example
 * // Using a property key as the iteratee
 * const objects = [{ a: 1 }, { a: 2 }, { a: 3 }];
 * map(objects, 'a'); // => [1, 2, 3]
 *
 * @example
 * // Using an object as the iteratee
 * const objects = [{ a: 1 }, { a: 2 }, { a: 3 }];
 * map(objects, { a: 1 }); // => [true, false, false]
 *
 * @example
 * // No iteratee
 * const numbers = [1, 2, 3];
 * map(numbers); // => [1, 2, 3]
 *
 * @example
 * // Using an object as the collection
 * const obj = { a: 1, b: 2, c: 3 };
 * map(obj, (value, key) => `${key}: ${value}`); // => ['a: 1', 'b: 2', 'c: 3']
 */ export function map(collection, _iteratee) {
  if (!collection) {
    return [];
  }
  const keys = isArrayLike(collection) || Array.isArray(collection) ? range(0, collection.length) : Object.keys(collection);
  const iteratee = iterateeToolkit(_iteratee ?? identity);
  const result = new Array(keys.length);
  for(let i = 0; i < keys.length; i++){
    const key = keys[i];
    const value = collection[key];
    result[i] = iteratee(value, key, collection);
  }
  return result;
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=2433753002073874495,5559331550848963753