import { inRange as inRangeToolkit } from '../../math/inRange.ts';
/**
 * Checks if the value is within a specified range.
 *
 * @param {number} value The value to check.
 * @param {number} minimum The lower bound of the range (inclusive).
 * @param {number} maximum The upper bound of the range (exclusive).
 * @returns {boolean} `true` if the value is within the specified range, otherwise `false`.
 * @throws {Error} Throws an error if the `minimum` is greater or equal than the `maximum`.
 *
 * @example
 * const result1 = inRange(3, 5); // result1 will be true.
 * const result2 = inRange(1, 2, 5); // result2 will be false.
 * const result3 = inRange(1, 5, 2); // If the minimum is greater or equal than the maximum, an error is thrown.
 */ export function inRange(value, minimum, maximum) {
  if (!minimum) {
    minimum = 0;
  }
  if (maximum != null && !maximum) {
    maximum = 0;
  }
  if (minimum != null && typeof minimum !== 'number') {
    minimum = Number(minimum);
  }
  if (maximum == null && minimum === 0) {
    return false;
  }
  if (maximum != null && typeof maximum !== 'number') {
    maximum = Number(maximum);
  }
  if (maximum != null && minimum > maximum) {
    [minimum, maximum] = [
      maximum,
      minimum
    ];
  }
  if (minimum === maximum) {
    return false;
  }
  return inRangeToolkit(value, minimum, maximum);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvbWF0aC9pblJhbmdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluUmFuZ2UgYXMgaW5SYW5nZVRvb2xraXQgfSBmcm9tICcuLi8uLi9tYXRoL2luUmFuZ2UudHMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdmFsdWUgaXMgbGVzcyB0aGFuIHRoZSBtYXhpbXVtLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4aW11bSBUaGUgdXBwZXIgYm91bmQgb2YgdGhlIHJhbmdlIChleGNsdXNpdmUpLlxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgbGVzcyB0aGFuIHRoZSBtYXhpbXVtLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgcmVzdWx0ID0gaW5SYW5nZSgzLCA1KTsgLy8gcmVzdWx0IHdpbGwgYmUgdHJ1ZS5cbiAqIGNvbnN0IHJlc3VsdDIgPSBpblJhbmdlKDUsIDUpOyAvLyByZXN1bHQyIHdpbGwgYmUgZmFsc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpblJhbmdlKHZhbHVlOiBudW1iZXIsIG1heGltdW06IG51bWJlcik6IGJvb2xlYW47XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSB2YWx1ZSBpcyB3aXRoaW4gdGhlIHJhbmdlIGRlZmluZWQgYnkgbWluaW11bSAoaW5jbHVzaXZlKSBhbmQgbWF4aW11bSAoZXhjbHVzaXZlKS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IG1pbmltdW0gVGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZSAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhpbXVtIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UgKGV4Y2x1c2l2ZSkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyB3aXRoaW4gdGhlIHNwZWNpZmllZCByYW5nZSwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJlc3VsdCA9IGluUmFuZ2UoMywgMiwgNSk7IC8vIHJlc3VsdCB3aWxsIGJlIHRydWUuXG4gKiBjb25zdCByZXN1bHQyID0gaW5SYW5nZSgxLCAyLCA1KTsgLy8gcmVzdWx0MiB3aWxsIGJlIGZhbHNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5SYW5nZSh2YWx1ZTogbnVtYmVyLCBtaW5pbXVtOiBudW1iZXIsIG1heGltdW06IG51bWJlcik6IGJvb2xlYW47XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSB2YWx1ZSBpcyB3aXRoaW4gYSBzcGVjaWZpZWQgcmFuZ2UuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW5pbXVtIFRoZSBsb3dlciBib3VuZCBvZiB0aGUgcmFuZ2UgKGluY2x1c2l2ZSkuXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4aW11bSBUaGUgdXBwZXIgYm91bmQgb2YgdGhlIHJhbmdlIChleGNsdXNpdmUpLlxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgd2l0aGluIHRoZSBzcGVjaWZpZWQgcmFuZ2UsIG90aGVyd2lzZSBgZmFsc2VgLlxuICogQHRocm93cyB7RXJyb3J9IFRocm93cyBhbiBlcnJvciBpZiB0aGUgYG1pbmltdW1gIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdGhhbiB0aGUgYG1heGltdW1gLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCByZXN1bHQxID0gaW5SYW5nZSgzLCA1KTsgLy8gcmVzdWx0MSB3aWxsIGJlIHRydWUuXG4gKiBjb25zdCByZXN1bHQyID0gaW5SYW5nZSgxLCAyLCA1KTsgLy8gcmVzdWx0MiB3aWxsIGJlIGZhbHNlLlxuICogY29uc3QgcmVzdWx0MyA9IGluUmFuZ2UoMSwgNSwgMik7IC8vIElmIHRoZSBtaW5pbXVtIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdGhhbiB0aGUgbWF4aW11bSwgYW4gZXJyb3IgaXMgdGhyb3duLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5SYW5nZSh2YWx1ZTogbnVtYmVyLCBtaW5pbXVtOiBudW1iZXIsIG1heGltdW0/OiBudW1iZXIpOiBib29sZWFuIHtcbiAgaWYgKCFtaW5pbXVtKSB7XG4gICAgbWluaW11bSA9IDA7XG4gIH1cblxuICBpZiAobWF4aW11bSAhPSBudWxsICYmICFtYXhpbXVtKSB7XG4gICAgbWF4aW11bSA9IDA7XG4gIH1cblxuICBpZiAobWluaW11bSAhPSBudWxsICYmIHR5cGVvZiBtaW5pbXVtICE9PSAnbnVtYmVyJykge1xuICAgIG1pbmltdW0gPSBOdW1iZXIobWluaW11bSk7XG4gIH1cblxuICBpZiAobWF4aW11bSA9PSBudWxsICYmIG1pbmltdW0gPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAobWF4aW11bSAhPSBudWxsICYmIHR5cGVvZiBtYXhpbXVtICE9PSAnbnVtYmVyJykge1xuICAgIG1heGltdW0gPSBOdW1iZXIobWF4aW11bSk7XG4gIH1cblxuICBpZiAobWF4aW11bSAhPSBudWxsICYmIG1pbmltdW0gPiBtYXhpbXVtKSB7XG4gICAgW21pbmltdW0sIG1heGltdW1dID0gW21heGltdW0sIG1pbmltdW1dO1xuICB9XG5cbiAgaWYgKG1pbmltdW0gPT09IG1heGltdW0pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaW5SYW5nZVRvb2xraXQodmFsdWUsIG1pbmltdW0sIG1heGltdW0hKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFdBQVcsY0FBYyxRQUFRLHdCQUF3QjtBQTZCbEU7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNELE9BQU8sU0FBUyxRQUFRLEtBQWEsRUFBRSxPQUFlLEVBQUUsT0FBZ0I7RUFDdEUsSUFBSSxDQUFDLFNBQVM7SUFDWixVQUFVO0VBQ1o7RUFFQSxJQUFJLFdBQVcsUUFBUSxDQUFDLFNBQVM7SUFDL0IsVUFBVTtFQUNaO0VBRUEsSUFBSSxXQUFXLFFBQVEsT0FBTyxZQUFZLFVBQVU7SUFDbEQsVUFBVSxPQUFPO0VBQ25CO0VBRUEsSUFBSSxXQUFXLFFBQVEsWUFBWSxHQUFHO0lBQ3BDLE9BQU87RUFDVDtFQUVBLElBQUksV0FBVyxRQUFRLE9BQU8sWUFBWSxVQUFVO0lBQ2xELFVBQVUsT0FBTztFQUNuQjtFQUVBLElBQUksV0FBVyxRQUFRLFVBQVUsU0FBUztJQUN4QyxDQUFDLFNBQVMsUUFBUSxHQUFHO01BQUM7TUFBUztLQUFRO0VBQ3pDO0VBRUEsSUFBSSxZQUFZLFNBQVM7SUFDdkIsT0FBTztFQUNUO0VBRUEsT0FBTyxlQUFlLE9BQU8sU0FBUztBQUN4QyJ9
// denoCacheMetadata=9523414360806411629,7840385643996909862