import { isArguments } from './isArguments.ts';
import { isArrayLike } from './isArrayLike.ts';
import { isTypedArray } from './isTypedArray.ts';
import { isPrototype } from '../_internal/isPrototype.ts';
/**
 * Checks if a given value is empty.
 *
 * - If the given value is a string, checks if it is an empty string.
 * - If the given value is an array, `Map`, or `Set`, checks if its size is 0.
 * - If the given value is an [array-like object](../predicate/isArrayLike.md), checks if its length is 0.
 * - If the given value is an object, checks if it is an empty object with no properties.
 * - Primitive values (strings, booleans, numbers, or bigints) are considered empty.
 *
 * @param {unknown} [value] - The value to check.
 * @returns {boolean} `true` if the value is empty, `false` otherwise.
 *
 * @example
 * isEmpty(); // true
 * isEmpty(null); // true
 * isEmpty(""); // true
 * isEmpty([]); // true
 * isEmpty({}); // true
 * isEmpty(new Map()); // true
 * isEmpty(new Set()); // true
 * isEmpty("hello"); // false
 * isEmpty([1, 2, 3]); // false
 * isEmpty({ a: 1 }); // false
 * isEmpty(new Map([["key", "value"]])); // false
 * isEmpty(new Set([1, 2, 3])); // false
 */ export function isEmpty(value) {
  if (value == null) {
    return true;
  }
  // Objects like { "length": 0 } are not empty in lodash
  if (isArrayLike(value)) {
    if (typeof value.splice !== 'function' && typeof value !== 'string' && (typeof Buffer === 'undefined' || !Buffer.isBuffer(value)) && !isTypedArray(value) && !isArguments(value)) {
      return false;
    }
    return value.length === 0;
  }
  if (typeof value === 'object') {
    if (value instanceof Map || value instanceof Set) {
      return value.size === 0;
    }
    const keys = Object.keys(value);
    if (isPrototype(value)) {
      return keys.filter((x)=>x !== 'constructor').length === 0;
    }
    return keys.length === 0;
  }
  return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvcHJlZGljYXRlL2lzRW1wdHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNBcmd1bWVudHMgfSBmcm9tICcuL2lzQXJndW1lbnRzLnRzJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi9pc0FycmF5TGlrZS50cyc7XG5pbXBvcnQgeyBpc1R5cGVkQXJyYXkgfSBmcm9tICcuL2lzVHlwZWRBcnJheS50cyc7XG5pbXBvcnQgeyBpc1Byb3RvdHlwZSB9IGZyb20gJy4uL19pbnRlcm5hbC9pc1Byb3RvdHlwZS50cyc7XG5cbmRlY2xhcmUgbGV0IEJ1ZmZlcjpcbiAgfCB7XG4gICAgICBpc0J1ZmZlcjogKGE6IGFueSkgPT4gYm9vbGVhbjtcbiAgICB9XG4gIHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIHZhbHVlIGlzIGVtcHR5LlxuICpcbiAqIEByZXR1cm5zIHt0cnVlfSBBbHdheXMgcmV0dXJucyB0cnVlIHdoZW4gbm8gYXJndW1lbnRzIGFyZSBwcm92aWRlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogaXNFbXB0eSgpOyAvLyB0cnVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KCk6IHRydWU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gc3RyaW5nIGlzIGVtcHR5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBzdHJpbmcgaXMgZW1wdHksIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpc0VtcHR5KFwiXCIpOyAvLyB0cnVlXG4gKiBpc0VtcHR5KFwiaGVsbG9cIik7IC8vIGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlOiBzdHJpbmcpOiB2YWx1ZSBpcyAnJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBNYXAgaXMgZW1wdHkuXG4gKlxuICogQHBhcmFtIHtNYXA8YW55LCBhbnk+fSB2YWx1ZSAtIFRoZSBNYXAgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBNYXAgaXMgZW1wdHksIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpc0VtcHR5KG5ldyBNYXAoKSk7IC8vIHRydWVcbiAqIGlzRW1wdHkobmV3IE1hcChbW1wia2V5XCIsIFwidmFsdWVcIl1dKSk7IC8vIGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlOiBNYXA8YW55LCBhbnk+KTogYm9vbGVhbjtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBTZXQgaXMgZW1wdHkuXG4gKlxuICogQHBhcmFtIHtTZXQ8YW55Pn0gdmFsdWUgLSBUaGUgU2V0IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgU2V0IGlzIGVtcHR5LCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaXNFbXB0eShuZXcgU2V0KCkpOyAvLyB0cnVlXG4gKiBpc0VtcHR5KG5ldyBTZXQoWzEsIDIsIDNdKSk7IC8vIGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlOiBTZXQ8YW55Pik6IGJvb2xlYW47XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gYXJyYXkgaXMgZW1wdHkuXG4gKlxuICogQHBhcmFtIHthbnlbXX0gdmFsdWUgLSBUaGUgYXJyYXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBhcnJheSBpcyBlbXB0eSwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIGlzRW1wdHkoW10pOyAvLyB0cnVlXG4gKiBpc0VtcHR5KFsxLCAyLCAzXSk7IC8vIGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlOiBhbnlbXSk6IHZhbHVlIGlzIFtdO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIG9iamVjdCBpcyBlbXB0eS5cbiAqXG4gKiBAcGFyYW0ge1QgfCBudWxsIHwgdW5kZWZpbmVkfSB2YWx1ZSAtIFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBvYmplY3QgaXMgZW1wdHksIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpc0VtcHR5KHt9KTsgLy8gdHJ1ZVxuICogaXNFbXB0eSh7IGE6IDEgfSk7IC8vIGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5PFQgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+PihcbiAgdmFsdWU6IFQgfCBudWxsIHwgdW5kZWZpbmVkXG4pOiB2YWx1ZSBpcyBSZWNvcmQ8a2V5b2YgVCwgbmV2ZXI+IHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiB2YWx1ZSBpcyBlbXB0eS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgdmFsdWUgaXMgZW1wdHksIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpc0VtcHR5KG51bGwpOyAvLyB0cnVlXG4gKiBpc0VtcHR5KHVuZGVmaW5lZCk7IC8vIHRydWVcbiAqIGlzRW1wdHkoNDIpOyAvLyB0cnVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlOiB1bmtub3duKTogYm9vbGVhbjtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiB2YWx1ZSBpcyBlbXB0eS5cbiAqXG4gKiAtIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHN0cmluZywgY2hlY2tzIGlmIGl0IGlzIGFuIGVtcHR5IHN0cmluZy5cbiAqIC0gSWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGFycmF5LCBgTWFwYCwgb3IgYFNldGAsIGNoZWNrcyBpZiBpdHMgc2l6ZSBpcyAwLlxuICogLSBJZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gW2FycmF5LWxpa2Ugb2JqZWN0XSguLi9wcmVkaWNhdGUvaXNBcnJheUxpa2UubWQpLCBjaGVja3MgaWYgaXRzIGxlbmd0aCBpcyAwLlxuICogLSBJZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gb2JqZWN0LCBjaGVja3MgaWYgaXQgaXMgYW4gZW1wdHkgb2JqZWN0IHdpdGggbm8gcHJvcGVydGllcy5cbiAqIC0gUHJpbWl0aXZlIHZhbHVlcyAoc3RyaW5ncywgYm9vbGVhbnMsIG51bWJlcnMsIG9yIGJpZ2ludHMpIGFyZSBjb25zaWRlcmVkIGVtcHR5LlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gW3ZhbHVlXSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGVtcHR5LCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaXNFbXB0eSgpOyAvLyB0cnVlXG4gKiBpc0VtcHR5KG51bGwpOyAvLyB0cnVlXG4gKiBpc0VtcHR5KFwiXCIpOyAvLyB0cnVlXG4gKiBpc0VtcHR5KFtdKTsgLy8gdHJ1ZVxuICogaXNFbXB0eSh7fSk7IC8vIHRydWVcbiAqIGlzRW1wdHkobmV3IE1hcCgpKTsgLy8gdHJ1ZVxuICogaXNFbXB0eShuZXcgU2V0KCkpOyAvLyB0cnVlXG4gKiBpc0VtcHR5KFwiaGVsbG9cIik7IC8vIGZhbHNlXG4gKiBpc0VtcHR5KFsxLCAyLCAzXSk7IC8vIGZhbHNlXG4gKiBpc0VtcHR5KHsgYTogMSB9KTsgLy8gZmFsc2VcbiAqIGlzRW1wdHkobmV3IE1hcChbW1wia2V5XCIsIFwidmFsdWVcIl1dKSk7IC8vIGZhbHNlXG4gKiBpc0VtcHR5KG5ldyBTZXQoWzEsIDIsIDNdKSk7IC8vIGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlPzogdW5rbm93bik6IGJvb2xlYW4ge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gT2JqZWN0cyBsaWtlIHsgXCJsZW5ndGhcIjogMCB9IGFyZSBub3QgZW1wdHkgaW4gbG9kYXNoXG4gIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgKHZhbHVlIGFzIGFueSkuc3BsaWNlICE9PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAgICAodHlwZW9mIEJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgfHwgIUJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpICYmXG4gICAgICAhaXNUeXBlZEFycmF5KHZhbHVlKSAmJlxuICAgICAgIWlzQXJndW1lbnRzKHZhbHVlKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPT09IDA7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1hcCB8fCB2YWx1ZSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnNpemUgPT09IDA7XG4gICAgfVxuXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcblxuICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBrZXlzLmZpbHRlcih4ID0+IHggIT09ICdjb25zdHJ1Y3RvcicpLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cy5sZW5ndGggPT09IDA7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFdBQVcsUUFBUSxtQkFBbUI7QUFDL0MsU0FBUyxXQUFXLFFBQVEsbUJBQW1CO0FBQy9DLFNBQVMsWUFBWSxRQUFRLG9CQUFvQjtBQUNqRCxTQUFTLFdBQVcsUUFBUSw4QkFBOEI7QUE2RjFEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBeUJDLEdBQ0QsT0FBTyxTQUFTLFFBQVEsS0FBZTtFQUNyQyxJQUFJLFNBQVMsTUFBTTtJQUNqQixPQUFPO0VBQ1Q7RUFFQSx1REFBdUQ7RUFDdkQsSUFBSSxZQUFZLFFBQVE7SUFDdEIsSUFDRSxPQUFPLEFBQUMsTUFBYyxNQUFNLEtBQUssY0FDakMsT0FBTyxVQUFVLFlBQ2pCLENBQUMsT0FBTyxXQUFXLGVBQWUsQ0FBQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLEtBQ3pELENBQUMsYUFBYSxVQUNkLENBQUMsWUFBWSxRQUNiO01BQ0EsT0FBTztJQUNUO0lBRUEsT0FBTyxNQUFNLE1BQU0sS0FBSztFQUMxQjtFQUVBLElBQUksT0FBTyxVQUFVLFVBQVU7SUFDN0IsSUFBSSxpQkFBaUIsT0FBTyxpQkFBaUIsS0FBSztNQUNoRCxPQUFPLE1BQU0sSUFBSSxLQUFLO0lBQ3hCO0lBRUEsTUFBTSxPQUFPLE9BQU8sSUFBSSxDQUFDO0lBRXpCLElBQUksWUFBWSxRQUFRO01BQ3RCLE9BQU8sS0FBSyxNQUFNLENBQUMsQ0FBQSxJQUFLLE1BQU0sZUFBZSxNQUFNLEtBQUs7SUFDMUQ7SUFFQSxPQUFPLEtBQUssTUFBTSxLQUFLO0VBQ3pCO0VBRUEsT0FBTztBQUNUIn0=
// denoCacheMetadata=741535229751436450,18173953879673249775