import { difference as differenceToolkit } from '../../array/difference.ts';
import { toArray } from '../_internal/toArray.ts';
import { isArrayLikeObject } from '../predicate/isArrayLikeObject.ts';

/**
 * Computes the difference between an array and multiple arrays.
 *
 * @template T
 * @param {ArrayLike<T> | undefined | null} arr - The primary array from which to derive the difference. This is the main array
 * from which elements will be compared and filtered.
 * @param {Array<ArrayLike<T>>} values - Multiple arrays containing elements to be excluded from the primary array.
 * These arrays will be flattened into a single array, and each element in this array will be checked against the primary array.
 * If a match is found, that element will be excluded from the result.
 * @returns {T[]} A new array containing the elements that are present in the primary array but not
 * in the flattened array.
 *
 * @example
 * const array1 = [1, 2, 3, 4, 5];
 * const array2 = [2, 4];
 * const array3 = [5, 6];
 * const result = difference(array1, array2, array3);
 * // result will be [1, 3] since 2, 4, and 5 are in the other arrays and are excluded from the result.
 *
 * @example
 * const arrayLike1 = { 0: 1, 1: 2, 2: 3, length: 3 };
 * const arrayLike2 = { 0: 2, 1: 4, length: 2 };
 * const result = difference(arrayLike1, arrayLike2);
 * // result will be [1, 3] since 2 is in both array-like objects and is excluded from the result.
 */
export function difference<T>(arr: ArrayLike<T> | undefined | null, ...values: Array<ArrayLike<T>>): T[] {
  if (!isArrayLikeObject(arr)) {
    return [];
  }

  const arr1 = toArray(arr);
  const arr2 = [];

  for (let i = 0; i < values.length; i++) {
    const value = values[i];
    if (isArrayLikeObject(value)) {
      arr2.push(...Array.from(value));
    }
  }

  return differenceToolkit(arr1, arr2);
}

// denoCacheMetadata={"headers":{"x-jsr-cache-status":"revalidated","x-guploader-uploadid":"ABgVH8-4ODnk2GsqK6gByospbFJnWWIrFOkmk2vz-0mwJ6vUkXkTjpax8R1WSp6xeFcH0LRyPV_qP0M","x-goog-stored-content-length":"1858","cross-origin-resource-policy":"cross-origin","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","x-robots-tag":"noindex","cache-control":"public, max-age=31536000, immutable","access-control-expose-headers":"*","x-goog-storage-class":"STANDARD","access-control-allow-origin":"*","x-goog-stored-content-encoding":"identity","x-goog-hash":"crc32c=W6ygqQ==,md5=AOU0xdyMHR+uKMza+jD0Iw==","server":"UploadServer","expires":"Fri, 26 Jun 2026 21:45:35 GMT","age":"0","x-jsr-cache-id":"ATL","date":"Thu, 26 Jun 2025 21:45:35 GMT","etag":"\"00e534c5dc8c1d1fae28ccdafa30f423\"","x-goog-metageneration":"1","x-goog-generation":"1741509575559662","via":"1.1 google","content-length":"1858","content-type":"text/typescript","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","accept-ranges":"bytes","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/array/difference.ts","time":1750974334}