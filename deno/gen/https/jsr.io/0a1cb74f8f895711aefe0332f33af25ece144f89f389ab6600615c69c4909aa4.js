import { iteratee } from '../util/iteratee.ts';
/**
 * Finds the first item in an object that has a specific property, where the property name is provided as a PropertyKey.
 *
 * @template T
 * @param {ArrayLike<T> | Record<any, any> | null | undefined} source - The source array or object to search through.
 * @param {((item: T, index: number, arr: any) => unknown) | Partial<T> | [keyof T, unknown] | PropertyKey} doesMatch - The criteria to match. It can be a function, a partial object, a key-value pair, or a property name.
 * @param {number} [fromIndex=0] - The index to start the search from, defaults to 0.
 * @returns {T | undefined} - The first property value that has the specified property, or `undefined` if no match is found.
 *
 * @example
 * // Using a property name
 * const obj = { a: { id: 1, name: 'Alice' }, b: { id: 2, name: 'Bob' } };
 * const result = find(obj, 'name');
 * console.log(result); // { id: 1, name: 'Alice' }
 */ export function find(source, _doesMatch, fromIndex = 0) {
  if (!source) {
    return undefined;
  }
  if (fromIndex < 0) {
    fromIndex = Math.max(source.length + fromIndex, 0);
  }
  const doesMatch = iteratee(_doesMatch);
  const values = Array.isArray(source) ? source.slice(fromIndex) : Object.values(source).slice(fromIndex);
  if (typeof doesMatch === 'function' && !Array.isArray(source)) {
    const keys = Object.keys(source).slice(fromIndex);
    for(let i = 0; i < keys.length; i++){
      const key = keys[i];
      const value = source[key];
      if (doesMatch(value, key, source)) {
        return value;
      }
    }
    return undefined;
  }
  return values.find(doesMatch);
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=9076138978743326585,13109006749686308695