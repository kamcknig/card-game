/**
 * Creates a new array filled with the specified value from the start position up to, but not including, the end position.
 * This function does not mutate the original array.
 *
 * @template T - The type of elements in the original array.
 * @template U - The type of the value to fill the new array with.
 * @param {Array<T>} arr - The array to base the new array on.
 * @param {U} value - The value to fill the new array with.
 * @returns {Array<T | U>} The new array with the filled values.
 *
 * @example
 * const array = [1, 2, 3, 4, 5];
 * let result = toFilled(array, '*', 2);
 * console.log(result); // [1, 2, '*', '*', '*']
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*', 1, 4);
 * console.log(result); // [1, '*', '*', '*', 5]
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*');
 * console.log(result); // ['*', '*', '*', '*', '*']
 * console.log(array); // [1, 2, 3, 4, 5]
 *
 * result = toFilled(array, '*', -4, -1);
 * console.log(result); // [1, '*', '*', '*', 5]
 * console.log(array); // [1, 2, 3, 4, 5]
 */ /**
 * Creates a new array filled with the specified value from the start position up to, but not including, the end position.
 * This function does not mutate the original array.
 *
 * @template T - The type of elements in the original array.
 * @template U - The type of the value to fill the new array with.
 * @param {Array<T>} arr - The array to base the new array on.
 * @param {U} value - The value to fill the new array with.
 * @param {number} [start=0] - The start position. Defaults to 0.
 * @param {number} [end=arr.length] - The end position. Defaults to the array's length.
 * @returns {Array<T | U>} The new array with the filled values.
 */ export function toFilled(arr, value, start = 0, end = arr.length) {
  const length = arr.length;
  const finalStart = Math.max(start >= 0 ? start : length + start, 0);
  const finalEnd = Math.min(end >= 0 ? end : length + end, length);
  const newArr = arr.slice();
  for(let i = finalStart; i < finalEnd; i++){
    newArr[i] = value;
  }
  return newArr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9hcnJheS90b0ZpbGxlZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgZmlsbGVkIHdpdGggdGhlIHNwZWNpZmllZCB2YWx1ZSBmcm9tIHRoZSBzdGFydCBwb3NpdGlvbiB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIHRoZSBlbmQgcG9zaXRpb24uXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IG11dGF0ZSB0aGUgb3JpZ2luYWwgYXJyYXkuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiBlbGVtZW50cyBpbiB0aGUgb3JpZ2luYWwgYXJyYXkuXG4gKiBAdGVtcGxhdGUgVSAtIFRoZSB0eXBlIG9mIHRoZSB2YWx1ZSB0byBmaWxsIHRoZSBuZXcgYXJyYXkgd2l0aC5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGFyciAtIFRoZSBhcnJheSB0byBiYXNlIHRoZSBuZXcgYXJyYXkgb24uXG4gKiBAcGFyYW0ge1V9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbGwgdGhlIG5ldyBhcnJheSB3aXRoLlxuICogQHJldHVybnMge0FycmF5PFQgfCBVPn0gVGhlIG5ldyBhcnJheSB3aXRoIHRoZSBmaWxsZWQgdmFsdWVzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBhcnJheSA9IFsxLCAyLCAzLCA0LCA1XTtcbiAqIGxldCByZXN1bHQgPSB0b0ZpbGxlZChhcnJheSwgJyonLCAyKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFsxLCAyLCAnKicsICcqJywgJyonXVxuICogY29uc29sZS5sb2coYXJyYXkpOyAvLyBbMSwgMiwgMywgNCwgNV1cbiAqXG4gKiByZXN1bHQgPSB0b0ZpbGxlZChhcnJheSwgJyonLCAxLCA0KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFsxLCAnKicsICcqJywgJyonLCA1XVxuICogY29uc29sZS5sb2coYXJyYXkpOyAvLyBbMSwgMiwgMywgNCwgNV1cbiAqXG4gKiByZXN1bHQgPSB0b0ZpbGxlZChhcnJheSwgJyonKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFsnKicsICcqJywgJyonLCAnKicsICcqJ11cbiAqIGNvbnNvbGUubG9nKGFycmF5KTsgLy8gWzEsIDIsIDMsIDQsIDVdXG4gKlxuICogcmVzdWx0ID0gdG9GaWxsZWQoYXJyYXksICcqJywgLTQsIC0xKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFsxLCAnKicsICcqJywgJyonLCA1XVxuICogY29uc29sZS5sb2coYXJyYXkpOyAvLyBbMSwgMiwgMywgNCwgNV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRmlsbGVkPFQsIFU+KGFycjogcmVhZG9ubHkgVFtdLCB2YWx1ZTogVSk6IEFycmF5PFQgfCBVPjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5IGZpbGxlZCB3aXRoIHRoZSBzcGVjaWZpZWQgdmFsdWUgZnJvbSB0aGUgc3RhcnQgcG9zaXRpb24gdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCB0aGUgZW5kIHBvc2l0aW9uLlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBtdXRhdGUgdGhlIG9yaWdpbmFsIGFycmF5LlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIHR5cGUgb2YgZWxlbWVudHMgaW4gdGhlIG9yaWdpbmFsIGFycmF5LlxuICogQHRlbXBsYXRlIFUgLSBUaGUgdHlwZSBvZiB0aGUgdmFsdWUgdG8gZmlsbCB0aGUgbmV3IGFycmF5IHdpdGguXG4gKiBAcGFyYW0ge0FycmF5PFQ+fSBhcnIgLSBUaGUgYXJyYXkgdG8gYmFzZSB0aGUgbmV3IGFycmF5IG9uLlxuICogQHBhcmFtIHtVfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBmaWxsIHRoZSBuZXcgYXJyYXkgd2l0aC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gLSBUaGUgc3RhcnQgcG9zaXRpb24uIERlZmF1bHRzIHRvIDAuXG4gKiBAcmV0dXJucyB7QXJyYXk8VCB8IFU+fSBUaGUgbmV3IGFycmF5IHdpdGggdGhlIGZpbGxlZCB2YWx1ZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFycmF5ID0gWzEsIDIsIDMsIDQsIDVdO1xuICogbGV0IHJlc3VsdCA9IHRvRmlsbGVkKGFycmF5LCAnKicsIDIpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8gWzEsIDIsICcqJywgJyonLCAnKiddXG4gKiBjb25zb2xlLmxvZyhhcnJheSk7IC8vIFsxLCAyLCAzLCA0LCA1XVxuICpcbiAqIHJlc3VsdCA9IHRvRmlsbGVkKGFycmF5LCAnKicsIDEsIDQpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8gWzEsICcqJywgJyonLCAnKicsIDVdXG4gKiBjb25zb2xlLmxvZyhhcnJheSk7IC8vIFsxLCAyLCAzLCA0LCA1XVxuICpcbiAqIHJlc3VsdCA9IHRvRmlsbGVkKGFycmF5LCAnKicpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8gWycqJywgJyonLCAnKicsICcqJywgJyonXVxuICogY29uc29sZS5sb2coYXJyYXkpOyAvLyBbMSwgMiwgMywgNCwgNV1cbiAqXG4gKiByZXN1bHQgPSB0b0ZpbGxlZChhcnJheSwgJyonLCAtNCwgLTEpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8gWzEsICcqJywgJyonLCAnKicsIDVdXG4gKiBjb25zb2xlLmxvZyhhcnJheSk7IC8vIFsxLCAyLCAzLCA0LCA1XVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9GaWxsZWQ8VCwgVT4oYXJyOiByZWFkb25seSBUW10sIHZhbHVlOiBVLCBzdGFydDogbnVtYmVyKTogQXJyYXk8VCB8IFU+O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgZmlsbGVkIHdpdGggdGhlIHNwZWNpZmllZCB2YWx1ZSBmcm9tIHRoZSBzdGFydCBwb3NpdGlvbiB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIHRoZSBlbmQgcG9zaXRpb24uXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IG11dGF0ZSB0aGUgb3JpZ2luYWwgYXJyYXkuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiBlbGVtZW50cyBpbiB0aGUgb3JpZ2luYWwgYXJyYXkuXG4gKiBAdGVtcGxhdGUgVSAtIFRoZSB0eXBlIG9mIHRoZSB2YWx1ZSB0byBmaWxsIHRoZSBuZXcgYXJyYXkgd2l0aC5cbiAqIEBwYXJhbSB7QXJyYXk8VD59IGFyciAtIFRoZSBhcnJheSB0byBiYXNlIHRoZSBuZXcgYXJyYXkgb24uXG4gKiBAcGFyYW0ge1V9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbGwgdGhlIG5ldyBhcnJheSB3aXRoLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSAtIFRoZSBzdGFydCBwb3NpdGlvbi4gRGVmYXVsdHMgdG8gMC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFyci5sZW5ndGhdIC0gVGhlIGVuZCBwb3NpdGlvbi4gRGVmYXVsdHMgdG8gdGhlIGFycmF5J3MgbGVuZ3RoLlxuICogQHJldHVybnMge0FycmF5PFQgfCBVPn0gVGhlIG5ldyBhcnJheSB3aXRoIHRoZSBmaWxsZWQgdmFsdWVzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBhcnJheSA9IFsxLCAyLCAzLCA0LCA1XTtcbiAqIGxldCByZXN1bHQgPSB0b0ZpbGxlZChhcnJheSwgJyonLCAyKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFsxLCAyLCAnKicsICcqJywgJyonXVxuICogY29uc29sZS5sb2coYXJyYXkpOyAvLyBbMSwgMiwgMywgNCwgNV1cbiAqXG4gKiByZXN1bHQgPSB0b0ZpbGxlZChhcnJheSwgJyonLCAxLCA0KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFsxLCAnKicsICcqJywgJyonLCA1XVxuICogY29uc29sZS5sb2coYXJyYXkpOyAvLyBbMSwgMiwgMywgNCwgNV1cbiAqXG4gKiByZXN1bHQgPSB0b0ZpbGxlZChhcnJheSwgJyonKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFsnKicsICcqJywgJyonLCAnKicsICcqJ11cbiAqIGNvbnNvbGUubG9nKGFycmF5KTsgLy8gWzEsIDIsIDMsIDQsIDVdXG4gKlxuICogcmVzdWx0ID0gdG9GaWxsZWQoYXJyYXksICcqJywgLTQsIC0xKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFsxLCAnKicsICcqJywgJyonLCA1XVxuICogY29uc29sZS5sb2coYXJyYXkpOyAvLyBbMSwgMiwgMywgNCwgNV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRmlsbGVkPFQsIFU+KGFycjogcmVhZG9ubHkgVFtdLCB2YWx1ZTogVSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBBcnJheTxUIHwgVT47XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBhcnJheSBmaWxsZWQgd2l0aCB0aGUgc3BlY2lmaWVkIHZhbHVlIGZyb20gdGhlIHN0YXJ0IHBvc2l0aW9uIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgdGhlIGVuZCBwb3NpdGlvbi5cbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3QgbXV0YXRlIHRoZSBvcmlnaW5hbCBhcnJheS5cbiAqXG4gKiBAdGVtcGxhdGUgVCAtIFRoZSB0eXBlIG9mIGVsZW1lbnRzIGluIHRoZSBvcmlnaW5hbCBhcnJheS5cbiAqIEB0ZW1wbGF0ZSBVIC0gVGhlIHR5cGUgb2YgdGhlIHZhbHVlIHRvIGZpbGwgdGhlIG5ldyBhcnJheSB3aXRoLlxuICogQHBhcmFtIHtBcnJheTxUPn0gYXJyIC0gVGhlIGFycmF5IHRvIGJhc2UgdGhlIG5ldyBhcnJheSBvbi5cbiAqIEBwYXJhbSB7VX0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gZmlsbCB0aGUgbmV3IGFycmF5IHdpdGguXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIC0gVGhlIHN0YXJ0IHBvc2l0aW9uLiBEZWZhdWx0cyB0byAwLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyLmxlbmd0aF0gLSBUaGUgZW5kIHBvc2l0aW9uLiBEZWZhdWx0cyB0byB0aGUgYXJyYXkncyBsZW5ndGguXG4gKiBAcmV0dXJucyB7QXJyYXk8VCB8IFU+fSBUaGUgbmV3IGFycmF5IHdpdGggdGhlIGZpbGxlZCB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0ZpbGxlZDxULCBVPihhcnI6IHJlYWRvbmx5IFRbXSwgdmFsdWU6IFUsIHN0YXJ0ID0gMCwgZW5kID0gYXJyLmxlbmd0aCk6IEFycmF5PFQgfCBVPiB7XG4gIGNvbnN0IGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gIGNvbnN0IGZpbmFsU3RhcnQgPSBNYXRoLm1heChzdGFydCA+PSAwID8gc3RhcnQgOiBsZW5ndGggKyBzdGFydCwgMCk7XG4gIGNvbnN0IGZpbmFsRW5kID0gTWF0aC5taW4oZW5kID49IDAgPyBlbmQgOiBsZW5ndGggKyBlbmQsIGxlbmd0aCk7XG5cbiAgY29uc3QgbmV3QXJyOiBBcnJheTxUIHwgVT4gPSBhcnIuc2xpY2UoKTtcblxuICBmb3IgKGxldCBpID0gZmluYWxTdGFydDsgaSA8IGZpbmFsRW5kOyBpKyspIHtcbiAgICBuZXdBcnJbaV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBuZXdBcnI7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTJCQyxHQWtFRDs7Ozs7Ozs7Ozs7Q0FXQyxHQUNELE9BQU8sU0FBUyxTQUFlLEdBQWlCLEVBQUUsS0FBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFLE1BQU0sSUFBSSxNQUFNO0VBQ3JGLE1BQU0sU0FBUyxJQUFJLE1BQU07RUFDekIsTUFBTSxhQUFhLEtBQUssR0FBRyxDQUFDLFNBQVMsSUFBSSxRQUFRLFNBQVMsT0FBTztFQUNqRSxNQUFNLFdBQVcsS0FBSyxHQUFHLENBQUMsT0FBTyxJQUFJLE1BQU0sU0FBUyxLQUFLO0VBRXpELE1BQU0sU0FBdUIsSUFBSSxLQUFLO0VBRXRDLElBQUssSUFBSSxJQUFJLFlBQVksSUFBSSxVQUFVLElBQUs7SUFDMUMsTUFBTSxDQUFDLEVBQUUsR0FBRztFQUNkO0VBRUEsT0FBTztBQUNUIn0=
// denoCacheMetadata=10476835549421554505,7087851897412101229