/**
 * Creates a new function that executes the given functions in sequence. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * @param {() => R} f The function to invoke.
 * @returns {() => R} Returns the new composite function.
 *
 * @example
 * function noArgFunc() {
 *  return 42;
 * }
 *
 * const combined = flow(noArgFunc);
 * console.log(combined()); // 42
 */
export function flow<R>(f: () => R): () => R;
/**
 * Creates a new function that executes the given functions in sequence. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * @param {(...args: A) => R} f1 The function to invoke.
 * @returns {(...args: A) => R} Returns the new composite function.
 *
 * @example
 * function oneArgFunc(a: number) {
 *   return a * 2;
 * }
 *
 * const combined = flow(oneArgFunc);
 * console.log(combined(5)); // 10
 */
export function flow<A extends any[], R>(f1: (...args: A) => R): (...args: A) => R;
/**
 * Creates a new function that executes the given functions in sequence. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * @param {(...args: A) => R1} f1 The function to invoke.
 * @param {(a: R1) => R2} f2 The function to invoke.
 * @returns {(...args: A) => R2} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 *
 * const combined = flow(add, square);
 * console.log(combined(1, 2)); // 9
 */
export function flow<A extends any[], R1, R2>(f1: (...args: A) => R1, f2: (a: R1) => R2): (...args: A) => R2;
/**
 * Creates a new function that executes the given functions in sequence. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * @param {(...args: A) => R1} f1 The function to invoke.
 * @param {(a: R1) => R2} f2 The function to invoke.
 * @param {(a: R2) => R3} f3 The function to invoke.
 * @returns {(...args: A) => R3} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 * const double = (n: number) => n * 2;
 *
 * const combined = flow(add, square, double);
 * console.log(combined(1, 2)); // 18
 */
export function flow<A extends any[], R1, R2, R3>(
  f1: (...args: A) => R1,
  f2: (a: R1) => R2,
  f3: (a: R2) => R3
): (...args: A) => R3;
/**
 * Creates a new function that executes the given functions in sequence. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * @param {(...args: A) => R1} f1 The function to invoke.
 * @param {(a: R1) => R2} f2 The function to invoke.
 * @param {(a: R2) => R3} f3 The function to invoke.
 * @param {(a: R3) => R4} f4 The function to invoke.
 * @returns {(...args: A) => R4} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 * const double = (n: number) => n * 2;
 * const toStr = (n: number) => n.toString();
 *
 * const combined = flow(add, square, double, toStr);
 * console.log(combined(1, 2)); // '18'
 */
export function flow<A extends any[], R1, R2, R3, R4>(
  f1: (...args: A) => R1,
  f2: (a: R1) => R2,
  f3: (a: R2) => R3,
  f4: (a: R3) => R4
): (...args: A) => R4;
/**
 * Creates a new function that executes the given functions in sequence. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * @param {(...args: A) => R1} f1 The function to invoke.
 * @param {(a: R1) => R2} f2 The function to invoke.
 * @param {(a: R2) => R3} f3 The function to invoke.
 * @param {(a: R3) => R4} f4 The function to invoke.
 * @param {(a: R4) => R5} f5 The function to invoke.
 * @returns {(...args: A) => R5} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 * const double = (n: number) => n * 2;
 * const toStr = (n: number) => n.toString();
 * const split = (s: string) => s.split('');
 *
 * const combined = flow(add, square, double, toStr, split);
 * console.log(combined(1, 2)); // ['1', '8']
 */
export function flow<A extends any[], R1, R2, R3, R4, R5>(
  f1: (...args: A) => R1,
  f2: (a: R1) => R2,
  f3: (a: R2) => R3,
  f4: (a: R3) => R4,
  f5: (a: R4) => R5
): (...args: A) => R5;
/**
 * Creates a new function that executes the given functions in sequence. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * @param {Array<(...args: any[]) => any>} funcs The functions to invoke.
 * @returns {(...args: any[]) => any} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 *
 * const combined = flow(add, square);
 * console.log(combined(1, 2)); // 9
 */
export function flow(...funcs: Array<(...args: any[]) => any>): (...args: any[]) => any;
/**
 * Creates a new function that executes the given functions in sequence. The return value of the previous function is passed as an argument to the next function.
 *
 * The `this` context of the returned function is also passed to the functions provided as parameters.
 *
 * @param {Array<(...args: any[]) => any>} funcs The functions to invoke.
 * @returns {(...args: any[]) => any} Returns the new composite function.
 *
 * @example
 * const add = (x: number, y: number) => x + y;
 * const square = (n: number) => n * n;
 *
 * const combined = flow(add, square);
 * console.log(combined(1, 2)); // 9
 */
export function flow(...funcs: Array<(...args: any[]) => any>): (...args: any[]) => any {
  return function (this: any, ...args: any[]) {
    let result = funcs.length ? funcs[0].apply(this, args) : args[0];

    for (let i = 1; i < funcs.length; i++) {
      result = funcs[i].call(this, result);
    }

    return result;
  };
}

// denoCacheMetadata={"headers":{"last-modified":"Sun, 09 Mar 2025 08:39:34 GMT","access-control-allow-origin":"*","access-control-expose-headers":"*","cross-origin-resource-policy":"cross-origin","x-goog-stored-content-encoding":"identity","x-goog-metageneration":"1","content-length":"6646","x-jsr-cache-status":"revalidated","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-content-type-options":"nosniff","date":"Thu, 26 Jun 2025 21:45:35 GMT","content-type":"text/typescript","age":"0","cache-control":"public, max-age=31536000, immutable","etag":"\"820910ffde2084bb80fcc690f245f0aa\"","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-goog-storage-class":"STANDARD","x-goog-stored-content-length":"6646","x-guploader-uploadid":"ABgVH8_epEUqPutWJeB4YUrkTGrp4y-gBeSDYVr29ItIfbqWwUNwTG0sDhZ19ujNnboT9_GF","x-goog-generation":"1741509574686681","accept-ranges":"bytes","server":"UploadServer","via":"1.1 google","expires":"Fri, 26 Jun 2026 21:45:35 GMT","x-jsr-cache-id":"ATL","x-goog-hash":"crc32c=6LrCjA==,md5=ggkQ/94ghLuA/MaQ8kXwqg==","x-robots-tag":"noindex"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/function/flow.ts","time":1750974334}