import { dropWhile as dropWhileToolkit } from '../../array/dropWhile.ts';
import { toArray } from '../_internal/toArray.ts';
import { property } from '../object/property.ts';
import { isArrayLike } from '../predicate/isArrayLike.ts';
import { matches } from '../predicate/matches.ts';
import { matchesProperty } from '../predicate/matchesProperty.ts';
/**
 * Removes elements from the beginning of an array until the predicate returns false.
 *
 * This function iterates over an array and drops elements from the start until the provided
 * predicate function returns false. It then returns a new array with the remaining elements.
 *
 * @template T - The type of elements in the array.
 * @param {ArrayLike<T> | null | undefined} arr - The array from which to drop elements.
 * @param {(item: T, index: number, arr: T[]) => unknown} predicate - A predicate function that determines
 * whether to continue dropping elements. The function is called with each element, index, and array, and dropping
 * continues as long as it returns true.
 * @returns {T[]} A new array with the elements remaining after the predicate returns false.
 *
 * @example
 * const array = [1, 2, 3];
 * const result = dropWhile(array, (item, index, arr) => index < 2);
 * // Returns: [3]
 */ export function dropWhile(arr, predicate) {
  if (!isArrayLike(arr)) {
    return [];
  }
  return dropWhileImpl(toArray(arr), predicate);
}
function dropWhileImpl(arr, predicate) {
  switch(typeof predicate){
    case 'function':
      {
        return dropWhileToolkit(arr, (item, index, arr)=>Boolean(predicate(item, index, arr)));
      }
    case 'object':
      {
        if (Array.isArray(predicate) && predicate.length === 2) {
          const key = predicate[0];
          const value = predicate[1];
          return dropWhileToolkit(arr, matchesProperty(key, value));
        } else {
          return dropWhileToolkit(arr, matches(predicate));
        }
      }
    case 'number':
    case 'symbol':
    case 'string':
      {
        return dropWhileToolkit(arr, property(predicate));
      }
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=8744515394055336409,4756576159796228452