import { sendCommand } from "./protocol/mod.ts";
import { exponentialBackoff } from "./backoff.ts";
import { ErrorReplyError } from "./errors.ts";
import { BufReader, BufWriter } from "./vendor/https/deno.land/std/io/buffer.ts";
import { delay } from "./vendor/https/deno.land/std/async/delay.ts";
export class RedisConnection {
  options;
  name;
  closer;
  reader;
  writer;
  maxRetryCount;
  hostname;
  port;
  retryCount;
  _isClosed;
  _isConnected;
  backoff;
  get isClosed() {
    return this._isClosed;
  }
  get isConnected() {
    return this._isConnected;
  }
  get isRetriable() {
    return this.maxRetryCount > 0;
  }
  constructor(hostname, port, options){
    this.options = options;
    this.name = null;
    this.maxRetryCount = 10;
    this.retryCount = 0;
    this._isClosed = false;
    this._isConnected = false;
    this.hostname = hostname;
    this.port = port;
    if (options.name) {
      this.name = options.name;
    }
    if (options.maxRetryCount != null) {
      this.maxRetryCount = options.maxRetryCount;
    }
    this.backoff = options.backoff ?? exponentialBackoff();
  }
  async authenticate(username, password) {
    try {
      password && username ? await this.sendCommand("AUTH", username, password) : await this.sendCommand("AUTH", password);
    } catch (error) {
      if (error instanceof ErrorReplyError) {
        throw new AuthenticationError("Authentication failed", {
          cause: error
        });
      } else {
        throw error;
      }
    }
  }
  async selectDb(db = this.options.db) {
    if (!db) throw new Error("The database index is undefined.");
    await this.sendCommand("SELECT", db);
  }
  async sendCommand(command, ...args) {
    const reply = await sendCommand(this.writer, this.reader, command, ...args);
    return reply.value();
  }
  /**
   * Connect to Redis server
   */ async connect() {
    try {
      const dialOpts = {
        hostname: this.hostname,
        port: parsePortLike(this.port)
      };
      const conn = this.options?.tls ? await Deno.connectTls(dialOpts) : await Deno.connect(dialOpts);
      this.closer = conn;
      this.reader = new BufReader(conn);
      this.writer = new BufWriter(conn);
      this._isClosed = false;
      this._isConnected = true;
      try {
        if (this.options.password != null) {
          await this.authenticate(this.options.username, this.options.password);
        }
        if (this.options.db) {
          await this.selectDb(this.options.db);
        }
      } catch (error) {
        this.close();
        throw error;
      }
      this.retryCount = 0;
    } catch (error) {
      if (error instanceof AuthenticationError) {
        this.retryCount = 0;
        throw error.cause ?? error;
      }
      if (this.retryCount++ >= this.maxRetryCount) {
        this.retryCount = 0;
        throw error;
      }
      const backoff = this.backoff(this.retryCount);
      await delay(backoff);
      await this.connect();
    }
  }
  close() {
    this._isClosed = true;
    this._isConnected = false;
    try {
      this.closer.close();
    } catch (error) {
      if (!(error instanceof Deno.errors.BadResource)) throw error;
    }
  }
  async reconnect() {
    if (!this.reader.peek(1)) {
      throw new Error("Client is closed.");
    }
    try {
      await this.sendCommand("PING");
      this._isConnected = true;
    } catch (_error) {
      this.close();
      await this.connect();
      await this.sendCommand("PING");
    }
  }
}
class AuthenticationError extends Error {
}
function parsePortLike(port) {
  let parsedPort;
  if (typeof port === "string") {
    parsedPort = parseInt(port);
  } else if (typeof port === "number") {
    parsedPort = port;
  } else {
    parsedPort = 6379;
  }
  if (!Number.isSafeInteger(parsedPort)) {
    throw new Error("Port is invalid");
  }
  return parsedPort;
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=8897674867618938325,10078373291708205587