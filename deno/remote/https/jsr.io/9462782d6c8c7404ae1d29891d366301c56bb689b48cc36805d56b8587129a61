import { isDeepKey } from '../_internal/isDeepKey.ts';
import { isIndex } from '../_internal/isIndex.ts';
import { isArguments } from '../predicate/isArguments.ts';
import { toPath } from '../util/toPath.ts';

/**
 * Checks if a given path exists within an object.
 *
 * You can provide the path as a single property key, an array of property keys,
 * or a string representing a deep path.
 *
 * If the path is an index and the object is an array or an arguments object, the function will verify
 * if the index is valid and within the bounds of the array or arguments object, even if the array or
 * arguments object is sparse (i.e., not all indexes are defined).
 *
 * @param {object} object - The object to query.
 * @param {PropertyKey | PropertyKey[]} path - The path to check. This can be a single property key,
 *        an array of property keys, or a string representing a deep path.
 * @returns {boolean} Returns `true` if the path exists in the object, `false` otherwise.
 *
 * @example
 *
 * const obj = { a: { b: { c: 3 } } };
 *
 * has(obj, 'a'); // true
 * has(obj, ['a', 'b']); // true
 * has(obj, ['a', 'b', 'c']); // true
 * has(obj, 'a.b.c'); // true
 * has(obj, 'a.b.d'); // false
 * has(obj, ['a', 'b', 'c', 'd']); // false
 * has([], 0); // false
 * has([1, 2, 3], 2); // true
 * has([1, 2, 3], 5); // false
 */
export function has(object: unknown, path: PropertyKey | readonly PropertyKey[]): boolean;

/**
 * Checks if a given path exists within an object.
 *
 * You can provide the path as a single property key, an array of property keys,
 * or a string representing a deep path.
 *
 * If the path is an index and the object is an array or an arguments object, the function will verify
 * if the index is valid and within the bounds of the array or arguments object, even if the array or
 * arguments object is sparse (i.e., not all indexes are defined).
 *
 * @param {object} object - The object to query.
 * @param {PropertyKey | PropertyKey[]} path - The path to check. This can be a single property key,
 *        an array of property keys, or a string representing a deep path.
 * @returns {boolean} Returns `true` if the path exists in the object, `false` otherwise.
 *
 * @example
 *
 * const obj = { a: { b: { c: 3 } } };
 *
 * has(obj, 'a'); // true
 * has(obj, ['a', 'b']); // true
 * has(obj, ['a', 'b', 'c']); // true
 * has(obj, 'a.b.c'); // true
 * has(obj, 'a.b.d'); // false
 * has(obj, ['a', 'b', 'c', 'd']); // false
 * has([], 0); // false
 * has([1, 2, 3], 2); // true
 * has([1, 2, 3], 5); // false
 */
export function has(object: any, path: PropertyKey | readonly PropertyKey[]): boolean {
  let resolvedPath;

  if (Array.isArray(path)) {
    resolvedPath = path;
  } else if (typeof path === 'string' && isDeepKey(path) && object?.[path] == null) {
    resolvedPath = toPath(path);
  } else {
    resolvedPath = [path];
  }

  if (resolvedPath.length === 0) {
    return false;
  }

  let current = object;

  for (let i = 0; i < resolvedPath.length; i++) {
    const key = resolvedPath[i];

    // Check if the current key is a direct property of the current object
    if (current == null || !Object.hasOwn(current, key)) {
      const isSparseIndex = (Array.isArray(current) || isArguments(current)) && isIndex(key) && key < current.length;

      if (!isSparseIndex) {
        return false;
      }
    }

    current = current[key];
  }

  return true;
}

// denoCacheMetadata={"headers":{"x-content-type-options":"nosniff","x-goog-hash":"crc32c=8qOg0w==,md5=4AHl87SESLMkTqPoF6iiuA==","x-guploader-uploadid":"ABgVH88sZ3IqzD2r8Qeo8LevLO-iz54-RILVxLrAIpJuX7iELjwRcuKPeTE6yqX9HC_PwT0-8aJWSIc","x-goog-stored-content-encoding":"identity","x-goog-stored-content-length":"3410","access-control-allow-origin":"*","x-goog-metageneration":"1","expires":"Fri, 26 Jun 2026 21:45:35 GMT","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","via":"1.1 google","cross-origin-resource-policy":"cross-origin","content-length":"3410","x-goog-generation":"1741509575127279","etag":"\"e001e5f3b48448b3244ea3e817a8a2b8\"","date":"Thu, 26 Jun 2025 21:45:35 GMT","content-type":"text/typescript","x-jsr-cache-id":"ATL","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","x-robots-tag":"noindex","x-goog-storage-class":"STANDARD","access-control-expose-headers":"*","cache-control":"public, max-age=31536000, immutable","accept-ranges":"bytes","age":"0","server":"UploadServer","x-jsr-cache-status":"revalidated"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/compat/object/has.ts","time":1750974334}