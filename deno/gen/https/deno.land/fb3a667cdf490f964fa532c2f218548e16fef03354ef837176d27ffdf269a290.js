import { readReply } from "./reply.ts";
import { ErrorReplyError } from "../errors.ts";
import { encoder } from "./_util.ts";
const CRLF = encoder.encode("\r\n");
const ArrayCode = encoder.encode("*");
const BulkCode = encoder.encode("$");
async function writeRequest(writer, command, args) {
  const _args = args.filter((v)=>v !== void 0 && v !== null);
  await writer.write(ArrayCode);
  await writer.write(encoder.encode(String(1 + _args.length)));
  await writer.write(CRLF);
  await writer.write(BulkCode);
  await writer.write(encoder.encode(String(command.length)));
  await writer.write(CRLF);
  await writer.write(encoder.encode(command));
  await writer.write(CRLF);
  for (const arg of _args){
    const bytes = arg instanceof Uint8Array ? arg : encoder.encode(String(arg));
    const bytesLen = bytes.byteLength;
    await writer.write(BulkCode);
    await writer.write(encoder.encode(String(bytesLen)));
    await writer.write(CRLF);
    await writer.write(bytes);
    await writer.write(CRLF);
  }
}
export async function sendCommand(writer, reader, command, ...args) {
  await writeRequest(writer, command, args);
  await writer.flush();
  return readReply(reader);
}
export async function sendCommands(writer, reader, commands) {
  for (const { command, args } of commands){
    await writeRequest(writer, command, args);
  }
  await writer.flush();
  const ret = [];
  for(let i = 0; i < commands.length; i++){
    try {
      const rep = await readReply(reader);
      ret.push(rep.value());
    } catch (e) {
      if (e instanceof ErrorReplyError) {
        ret.push(e);
      } else {
        throw e;
      }
    }
  }
  return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvc29ja2V0X2lvQDAuMi4xL3ZlbmRvci9kZW5vLmxhbmQveC9yZWRpc0B2MC4yNy4xL3Byb3RvY29sL2NvbW1hbmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQnVmUmVhZGVyLFxuICBCdWZXcml0ZXIsXG59IGZyb20gXCIuLi92ZW5kb3IvaHR0cHMvZGVuby5sYW5kL3N0ZC9pby9idWZmZXIudHNcIjtcbmltcG9ydCB7IHJlYWRSZXBseSB9IGZyb20gXCIuL3JlcGx5LnRzXCI7XG5pbXBvcnQgeyBFcnJvclJlcGx5RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3JzLnRzXCI7XG5pbXBvcnQgeyBlbmNvZGVyIH0gZnJvbSBcIi4vX3V0aWwudHNcIjtcbmltcG9ydCB0eXBlIHsgUmF3T3JFcnJvciwgUmVkaXNSZXBseSwgUmVkaXNWYWx1ZSB9IGZyb20gXCIuL3R5cGVzLnRzXCI7XG5cbmNvbnN0IENSTEYgPSBlbmNvZGVyLmVuY29kZShcIlxcclxcblwiKTtcbmNvbnN0IEFycmF5Q29kZSA9IGVuY29kZXIuZW5jb2RlKFwiKlwiKTtcbmNvbnN0IEJ1bGtDb2RlID0gZW5jb2Rlci5lbmNvZGUoXCIkXCIpO1xuXG5hc3luYyBmdW5jdGlvbiB3cml0ZVJlcXVlc3QoXG4gIHdyaXRlcjogQnVmV3JpdGVyLFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIGFyZ3M6IFJlZGlzVmFsdWVbXSxcbikge1xuICBjb25zdCBfYXJncyA9IGFyZ3MuZmlsdGVyKCh2KSA9PiB2ICE9PSB2b2lkIDAgJiYgdiAhPT0gbnVsbCk7XG4gIGF3YWl0IHdyaXRlci53cml0ZShBcnJheUNvZGUpO1xuICBhd2FpdCB3cml0ZXIud3JpdGUoZW5jb2Rlci5lbmNvZGUoU3RyaW5nKDEgKyBfYXJncy5sZW5ndGgpKSk7XG4gIGF3YWl0IHdyaXRlci53cml0ZShDUkxGKTtcbiAgYXdhaXQgd3JpdGVyLndyaXRlKEJ1bGtDb2RlKTtcbiAgYXdhaXQgd3JpdGVyLndyaXRlKGVuY29kZXIuZW5jb2RlKFN0cmluZyhjb21tYW5kLmxlbmd0aCkpKTtcbiAgYXdhaXQgd3JpdGVyLndyaXRlKENSTEYpO1xuICBhd2FpdCB3cml0ZXIud3JpdGUoZW5jb2Rlci5lbmNvZGUoY29tbWFuZCkpO1xuICBhd2FpdCB3cml0ZXIud3JpdGUoQ1JMRik7XG4gIGZvciAoY29uc3QgYXJnIG9mIF9hcmdzKSB7XG4gICAgY29uc3QgYnl0ZXMgPSBhcmcgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gYXJnIDogZW5jb2Rlci5lbmNvZGUoU3RyaW5nKGFyZykpO1xuICAgIGNvbnN0IGJ5dGVzTGVuID0gYnl0ZXMuYnl0ZUxlbmd0aDtcbiAgICBhd2FpdCB3cml0ZXIud3JpdGUoQnVsa0NvZGUpO1xuICAgIGF3YWl0IHdyaXRlci53cml0ZShlbmNvZGVyLmVuY29kZShTdHJpbmcoYnl0ZXNMZW4pKSk7XG4gICAgYXdhaXQgd3JpdGVyLndyaXRlKENSTEYpO1xuICAgIGF3YWl0IHdyaXRlci53cml0ZShieXRlcyk7XG4gICAgYXdhaXQgd3JpdGVyLndyaXRlKENSTEYpO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kQ29tbWFuZChcbiAgd3JpdGVyOiBCdWZXcml0ZXIsXG4gIHJlYWRlcjogQnVmUmVhZGVyLFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIC4uLmFyZ3M6IFJlZGlzVmFsdWVbXVxuKTogUHJvbWlzZTxSZWRpc1JlcGx5PiB7XG4gIGF3YWl0IHdyaXRlUmVxdWVzdCh3cml0ZXIsIGNvbW1hbmQsIGFyZ3MpO1xuICBhd2FpdCB3cml0ZXIuZmx1c2goKTtcbiAgcmV0dXJuIHJlYWRSZXBseShyZWFkZXIpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZENvbW1hbmRzKFxuICB3cml0ZXI6IEJ1ZldyaXRlcixcbiAgcmVhZGVyOiBCdWZSZWFkZXIsXG4gIGNvbW1hbmRzOiB7XG4gICAgY29tbWFuZDogc3RyaW5nO1xuICAgIGFyZ3M6IFJlZGlzVmFsdWVbXTtcbiAgfVtdLFxuKTogUHJvbWlzZTxSYXdPckVycm9yW10+IHtcbiAgZm9yIChjb25zdCB7IGNvbW1hbmQsIGFyZ3MgfSBvZiBjb21tYW5kcykge1xuICAgIGF3YWl0IHdyaXRlUmVxdWVzdCh3cml0ZXIsIGNvbW1hbmQsIGFyZ3MpO1xuICB9XG4gIGF3YWl0IHdyaXRlci5mbHVzaCgpO1xuICBjb25zdCByZXQ6IFJhd09yRXJyb3JbXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbW1hbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcCA9IGF3YWl0IHJlYWRSZXBseShyZWFkZXIpO1xuICAgICAgcmV0LnB1c2gocmVwLnZhbHVlKCkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3JSZXBseUVycm9yKSB7XG4gICAgICAgIHJldC5wdXNoKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxTQUFTLFNBQVMsUUFBUSxhQUFhO0FBQ3ZDLFNBQVMsZUFBZSxRQUFRLGVBQWU7QUFDL0MsU0FBUyxPQUFPLFFBQVEsYUFBYTtBQUdyQyxNQUFNLE9BQU8sUUFBUSxNQUFNLENBQUM7QUFDNUIsTUFBTSxZQUFZLFFBQVEsTUFBTSxDQUFDO0FBQ2pDLE1BQU0sV0FBVyxRQUFRLE1BQU0sQ0FBQztBQUVoQyxlQUFlLGFBQ2IsTUFBaUIsRUFDakIsT0FBZSxFQUNmLElBQWtCO0VBRWxCLE1BQU0sUUFBUSxLQUFLLE1BQU0sQ0FBQyxDQUFDLElBQU0sTUFBTSxLQUFLLEtBQUssTUFBTTtFQUN2RCxNQUFNLE9BQU8sS0FBSyxDQUFDO0VBQ25CLE1BQU0sT0FBTyxLQUFLLENBQUMsUUFBUSxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sTUFBTTtFQUN6RCxNQUFNLE9BQU8sS0FBSyxDQUFDO0VBQ25CLE1BQU0sT0FBTyxLQUFLLENBQUM7RUFDbkIsTUFBTSxPQUFPLEtBQUssQ0FBQyxRQUFRLE1BQU0sQ0FBQyxPQUFPLFFBQVEsTUFBTTtFQUN2RCxNQUFNLE9BQU8sS0FBSyxDQUFDO0VBQ25CLE1BQU0sT0FBTyxLQUFLLENBQUMsUUFBUSxNQUFNLENBQUM7RUFDbEMsTUFBTSxPQUFPLEtBQUssQ0FBQztFQUNuQixLQUFLLE1BQU0sT0FBTyxNQUFPO0lBQ3ZCLE1BQU0sUUFBUSxlQUFlLGFBQWEsTUFBTSxRQUFRLE1BQU0sQ0FBQyxPQUFPO0lBQ3RFLE1BQU0sV0FBVyxNQUFNLFVBQVU7SUFDakMsTUFBTSxPQUFPLEtBQUssQ0FBQztJQUNuQixNQUFNLE9BQU8sS0FBSyxDQUFDLFFBQVEsTUFBTSxDQUFDLE9BQU87SUFDekMsTUFBTSxPQUFPLEtBQUssQ0FBQztJQUNuQixNQUFNLE9BQU8sS0FBSyxDQUFDO0lBQ25CLE1BQU0sT0FBTyxLQUFLLENBQUM7RUFDckI7QUFDRjtBQUVBLE9BQU8sZUFBZSxZQUNwQixNQUFpQixFQUNqQixNQUFpQixFQUNqQixPQUFlLEVBQ2YsR0FBRyxJQUFrQjtFQUVyQixNQUFNLGFBQWEsUUFBUSxTQUFTO0VBQ3BDLE1BQU0sT0FBTyxLQUFLO0VBQ2xCLE9BQU8sVUFBVTtBQUNuQjtBQUVBLE9BQU8sZUFBZSxhQUNwQixNQUFpQixFQUNqQixNQUFpQixFQUNqQixRQUdHO0VBRUgsS0FBSyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLFNBQVU7SUFDeEMsTUFBTSxhQUFhLFFBQVEsU0FBUztFQUN0QztFQUNBLE1BQU0sT0FBTyxLQUFLO0VBQ2xCLE1BQU0sTUFBb0IsRUFBRTtFQUM1QixJQUFLLElBQUksSUFBSSxHQUFHLElBQUksU0FBUyxNQUFNLEVBQUUsSUFBSztJQUN4QyxJQUFJO01BQ0YsTUFBTSxNQUFNLE1BQU0sVUFBVTtNQUM1QixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUs7SUFDcEIsRUFBRSxPQUFPLEdBQUc7TUFDVixJQUFJLGFBQWEsaUJBQWlCO1FBQ2hDLElBQUksSUFBSSxDQUFDO01BQ1gsT0FBTztRQUNMLE1BQU07TUFDUjtJQUNGO0VBQ0Y7RUFDQSxPQUFPO0FBQ1QifQ==
// denoCacheMetadata=17645665832894579432,11084062256408234056