/**
 * Curries a function, allowing it to be called with a single argument at a time and returning a new function that takes the next argument.
 * This process continues until all arguments have been provided, at which point the original function is called with all accumulated arguments.
 *
 * @param {() => R} func - The function to curry.
 * @returns {() => R} A curried function.
 *
 * @example
 * function noArgFunc() {
 *   return 42;
 * }
 * const curriedNoArgFunc = curry(noArgFunc);
 * console.log(curriedNoArgFunc()); // 42
 */ /**
 * Curries a function, allowing it to be called with a single argument at a time and returning a new function that takes the next argument.
 * This process continues until all arguments have been provided, at which point the original function is called with all accumulated arguments.
 *
 * @param {(...args: any[]) => any} func - The function to curry.
 * @returns {(...args: any[]) => any} A curried function that can be called with a single argument at a time.
 *
 * @example
 * function sum(a: number, b: number, c: number) {
 *   return a + b + c;
 * }
 *
 * const curriedSum = curry(sum);
 *
 * // The parameter `a` should be given the value `10`.
 * const add10 = curriedSum(10);
 *
 * // The parameter `b` should be given the value `15`.
 * const add25 = add10(15);
 *
 * // The parameter `c` should be given the value `5`. The function 'sum' has received all its arguments and will now return a value.
 * const result = add25(5);
 */ export function curry(func) {
  if (func.length === 0 || func.length === 1) {
    return func;
  }
  return function(arg) {
    return makeCurry(func, func.length, [
      arg
    ]);
  };
}
function makeCurry(origin, argsLength, args) {
  if (args.length === argsLength) {
    return origin(...args);
  } else {
    const next = function(arg) {
      return makeCurry(origin, argsLength, [
        ...args,
        arg
      ]);
    };
    return next;
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=514322109727254079,14912271688882558132