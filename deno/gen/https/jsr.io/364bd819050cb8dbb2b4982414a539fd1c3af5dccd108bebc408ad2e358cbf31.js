import { iteratee } from '../util/iteratee.ts';
import { toInteger } from '../util/toInteger.ts';
/**
 * Finds the last item in an object that has a specific property, where the property name is provided as a PropertyKey.
 *
 * @template T
 * @param {ArrayLike<T> | Record<any, any> | null | undefined} source - The source array or object to search through.
 * @param {((item: T, index: number, arr: any) => unknown) | Partial<T> | [keyof T, unknown] | PropertyKey} doesMatch - The criteria to match. It can be a function, a partial object, a key-value pair, or a property name.
 * @param {number} [fromIndex] - The index to start the search from, defaults to source.length-1 for arrays or Object.keys(source).length-1 for objects.
 * @returns {T | undefined} - The last property value that has the specified property, or `undefined` if no match is found.
 *
 * @example
 * // Using a property name
 * const obj = { a: { id: 1, name: 'Alice' }, b: { id: 2 }, c: { id: 3, name: 'Bob' } };
 * const result = findLast(obj, 'name');
 * console.log(result); // { id: 3, name: 'Bob' }
 */ export function findLast(source, _doesMatch, fromIndex) {
  if (!source) {
    return undefined;
  }
  const length = Array.isArray(source) ? source.length : Object.keys(source).length;
  fromIndex = toInteger(fromIndex ?? length - 1);
  if (fromIndex < 0) {
    fromIndex = Math.max(length + fromIndex, 0);
  } else {
    fromIndex = Math.min(fromIndex, length - 1);
  }
  const doesMatch = iteratee(_doesMatch);
  const values = Array.isArray(source) ? source.slice(0, fromIndex + 1) : Object.values(source).slice(0, fromIndex + 1);
  if (typeof doesMatch === 'function' && !Array.isArray(source)) {
    const keys = Object.keys(source).slice(0, fromIndex + 1);
    for(let i = fromIndex; i >= 0; i--){
      const key = keys[i];
      const value = source[key];
      if (doesMatch(value, key, source)) {
        return value;
      }
    }
    return undefined;
  }
  return values.findLast(doesMatch);
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=1215696690517099816,5989525445208164106