import { iteratee } from '../util/iteratee.ts';
/**
 * Removes all specified values from an array using an iteratee function.
 *
 * This function changes `arr` in place.
 * If you want to remove values without modifying the original array, use `differenceBy`.
 *
 * @template T
 * @param {T[]} arr - The array to modify.
 * @param {ArrayLike<T>} valuesToRemove - The values to remove from the array.
 * @param {keyof T} getValue - The key of the property to match against each element.
 * @returns {T[]} The modified array with the specified values removed.
 *
 * @example
 * // Using a iteratee function
 * const items = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 1 }];
 * const result = pullAllBy(items, [{ value: 1 }, { value: 3 }], obj => obj.value);
 * console.log(result); // [{ value: 2 }]
 *
 * // Using a property name
 * const items = [{ value: 1 }, { value: 2 }, { value: 3 }, { value: 1 }];
 * const result = pullAllBy(items, [{ value: 1 }, { value: 3 }], 'value');
 * console.log(result); // [{ value: 2 }]
 */ export function pullAllBy(arr, valuesToRemove, _getValue) {
  const getValue = iteratee(_getValue);
  const valuesSet = new Set(Array.from(valuesToRemove).map((x)=>getValue(x)));
  let resultIndex = 0;
  for(let i = 0; i < arr.length; i++){
    const value = getValue(arr[i]);
    if (valuesSet.has(value)) {
      continue;
    }
    // For handling sparse arrays
    if (!Object.hasOwn(arr, i)) {
      delete arr[resultIndex++];
      continue;
    }
    arr[resultIndex++] = arr[i];
  }
  arr.length = resultIndex;
  return arr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0Blcy10b29sa2l0L2VzLXRvb2xraXQvMS4zMy4wL3NyYy9jb21wYXQvYXJyYXkvcHVsbEFsbEJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGl0ZXJhdGVlIH0gZnJvbSAnLi4vdXRpbC9pdGVyYXRlZS50cyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgc3BlY2lmaWVkIHZhbHVlcyBmcm9tIGFuIGFycmF5IHVzaW5nIGFuIGl0ZXJhdGVlIGZ1bmN0aW9uLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gY2hhbmdlcyBgYXJyYCBpbiBwbGFjZS5cbiAqIElmIHlvdSB3YW50IHRvIHJlbW92ZSB2YWx1ZXMgd2l0aG91dCBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsIGFycmF5LCB1c2UgYGRpZmZlcmVuY2VCeWAuXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VFtdfSBhcnIgLSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheUxpa2U8VD59IHZhbHVlc1RvUmVtb3ZlIC0gVGhlIHZhbHVlcyB0byByZW1vdmUgZnJvbSB0aGUgYXJyYXkuXG4gKiBAcGFyYW0geyh2YWx1ZTogVCkgPT4gdW5rbm93bn0gZ2V0VmFsdWUgLSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtUW119IFRoZSBtb2RpZmllZCBhcnJheSB3aXRoIHRoZSBzcGVjaWZpZWQgdmFsdWVzIHJlbW92ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGl0ZW1zID0gW3sgdmFsdWU6IDEgfSwgeyB2YWx1ZTogMiB9LCB7IHZhbHVlOiAzIH0sIHsgdmFsdWU6IDEgfV07XG4gKiBjb25zdCByZXN1bHQgPSBwdWxsQWxsQnkoaXRlbXMsIFt7IHZhbHVlOiAxIH0sIHsgdmFsdWU6IDMgfV0sIG9iaiA9PiBvYmoudmFsdWUpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8gW3sgdmFsdWU6IDIgfV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1bGxBbGxCeTxUPihhcnI6IFRbXSwgdmFsdWVzVG9SZW1vdmU6IEFycmF5TGlrZTxUPiwgZ2V0VmFsdWU6ICh2YWx1ZTogVCkgPT4gdW5rbm93bik6IFRbXTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBzcGVjaWZpZWQgdmFsdWVzIGZyb20gYW4gYXJyYXkgdXNpbmcgYW4gaXRlcmF0ZWUgZnVuY3Rpb24uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBjaGFuZ2VzIGBhcnJgIGluIHBsYWNlLlxuICogSWYgeW91IHdhbnQgdG8gcmVtb3ZlIHZhbHVlcyB3aXRob3V0IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwgYXJyYXksIHVzZSBgZGlmZmVyZW5jZUJ5YC5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUW119IGFyciAtIFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5TGlrZTxUPn0gdmFsdWVzVG9SZW1vdmUgLSBUaGUgdmFsdWVzIHRvIHJlbW92ZSBmcm9tIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB7UGFydGlhbDxUPn0gZ2V0VmFsdWUgLSBUaGUgcGFydGlhbCBvYmplY3QgdG8gbWF0Y2ggYWdhaW5zdCBlYWNoIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7VFtdfSBUaGUgbW9kaWZpZWQgYXJyYXkgd2l0aCB0aGUgc3BlY2lmaWVkIHZhbHVlcyByZW1vdmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHVsbEFsbEJ5PFQ+KGFycjogVFtdLCB2YWx1ZXNUb1JlbW92ZTogQXJyYXlMaWtlPFQ+LCBnZXRWYWx1ZTogUGFydGlhbDxUPik6IFRbXTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBzcGVjaWZpZWQgdmFsdWVzIGZyb20gYW4gYXJyYXkgdXNpbmcgYW4gaXRlcmF0ZWUgZnVuY3Rpb24uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBjaGFuZ2VzIGBhcnJgIGluIHBsYWNlLlxuICogSWYgeW91IHdhbnQgdG8gcmVtb3ZlIHZhbHVlcyB3aXRob3V0IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwgYXJyYXksIHVzZSBgZGlmZmVyZW5jZUJ5YC5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUW119IGFyciAtIFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5TGlrZTxUPn0gdmFsdWVzVG9SZW1vdmUgLSBUaGUgdmFsdWVzIHRvIHJlbW92ZSBmcm9tIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB7W2tleW9mIFQsIHVua25vd25dfSBnZXRWYWx1ZSAtIFRoZSBwcm9wZXJ0eS12YWx1ZSBwYWlyIHRvIG1hdGNoIGFnYWluc3QgZWFjaCBlbGVtZW50LlxuICogQHJldHVybnMge1RbXX0gVGhlIG1vZGlmaWVkIGFycmF5IHdpdGggdGhlIHNwZWNpZmllZCB2YWx1ZXMgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1bGxBbGxCeTxUPihhcnI6IFRbXSwgdmFsdWVzVG9SZW1vdmU6IEFycmF5TGlrZTxUPiwgZ2V0VmFsdWU6IFtrZXlvZiBULCB1bmtub3duXSk6IFRbXTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBzcGVjaWZpZWQgdmFsdWVzIGZyb20gYW4gYXJyYXkgdXNpbmcgYW4gaXRlcmF0ZWUgZnVuY3Rpb24uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBjaGFuZ2VzIGBhcnJgIGluIHBsYWNlLlxuICogSWYgeW91IHdhbnQgdG8gcmVtb3ZlIHZhbHVlcyB3aXRob3V0IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwgYXJyYXksIHVzZSBgZGlmZmVyZW5jZUJ5YC5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUW119IGFyciAtIFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5TGlrZTxUPn0gdmFsdWVzVG9SZW1vdmUgLSBUaGUgdmFsdWVzIHRvIHJlbW92ZSBmcm9tIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB7a2V5b2YgVH0gZ2V0VmFsdWUgLSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtYXRjaCBhZ2FpbnN0IGVhY2ggZWxlbWVudC5cbiAqIEByZXR1cm5zIHtUW119IFRoZSBtb2RpZmllZCBhcnJheSB3aXRoIHRoZSBzcGVjaWZpZWQgdmFsdWVzIHJlbW92ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGl0ZW1zID0gW3sgdmFsdWU6IDEgfSwgeyB2YWx1ZTogMiB9LCB7IHZhbHVlOiAzIH0sIHsgdmFsdWU6IDEgfV07XG4gKiBjb25zdCByZXN1bHQgPSBwdWxsQWxsQnkoaXRlbXMsIFt7IHZhbHVlOiAxIH0sIHsgdmFsdWU6IDMgfV0sICd2YWx1ZScpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTsgLy8gW3sgdmFsdWU6IDIgfV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1bGxBbGxCeTxUPihhcnI6IFRbXSwgdmFsdWVzVG9SZW1vdmU6IEFycmF5TGlrZTxUPiwgZ2V0VmFsdWU6IGtleW9mIFQpOiBUW107XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgc3BlY2lmaWVkIHZhbHVlcyBmcm9tIGFuIGFycmF5IHVzaW5nIGFuIGl0ZXJhdGVlIGZ1bmN0aW9uLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gY2hhbmdlcyBgYXJyYCBpbiBwbGFjZS5cbiAqIElmIHlvdSB3YW50IHRvIHJlbW92ZSB2YWx1ZXMgd2l0aG91dCBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsIGFycmF5LCB1c2UgYGRpZmZlcmVuY2VCeWAuXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VFtdfSBhcnIgLSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheUxpa2U8VD59IHZhbHVlc1RvUmVtb3ZlIC0gVGhlIHZhbHVlcyB0byByZW1vdmUgZnJvbSB0aGUgYXJyYXkuXG4gKiBAcGFyYW0ge2tleW9mIFR9IGdldFZhbHVlIC0gVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gbWF0Y2ggYWdhaW5zdCBlYWNoIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7VFtdfSBUaGUgbW9kaWZpZWQgYXJyYXkgd2l0aCB0aGUgc3BlY2lmaWVkIHZhbHVlcyByZW1vdmVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBVc2luZyBhIGl0ZXJhdGVlIGZ1bmN0aW9uXG4gKiBjb25zdCBpdGVtcyA9IFt7IHZhbHVlOiAxIH0sIHsgdmFsdWU6IDIgfSwgeyB2YWx1ZTogMyB9LCB7IHZhbHVlOiAxIH1dO1xuICogY29uc3QgcmVzdWx0ID0gcHVsbEFsbEJ5KGl0ZW1zLCBbeyB2YWx1ZTogMSB9LCB7IHZhbHVlOiAzIH1dLCBvYmogPT4gb2JqLnZhbHVlKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFt7IHZhbHVlOiAyIH1dXG4gKlxuICogLy8gVXNpbmcgYSBwcm9wZXJ0eSBuYW1lXG4gKiBjb25zdCBpdGVtcyA9IFt7IHZhbHVlOiAxIH0sIHsgdmFsdWU6IDIgfSwgeyB2YWx1ZTogMyB9LCB7IHZhbHVlOiAxIH1dO1xuICogY29uc3QgcmVzdWx0ID0gcHVsbEFsbEJ5KGl0ZW1zLCBbeyB2YWx1ZTogMSB9LCB7IHZhbHVlOiAzIH1dLCAndmFsdWUnKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7IC8vIFt7IHZhbHVlOiAyIH1dXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwdWxsQWxsQnk8VD4oXG4gIGFycjogVFtdLFxuICB2YWx1ZXNUb1JlbW92ZTogQXJyYXlMaWtlPFQ+LFxuICBfZ2V0VmFsdWU6ICgodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGFycjogQXJyYXlMaWtlPFQ+KSA9PiBib29sZWFuKSB8IFBhcnRpYWw8VD4gfCBba2V5b2YgVCwgdW5rbm93bl0gfCBrZXlvZiBUXG4pOiBUW10ge1xuICBjb25zdCBnZXRWYWx1ZSA9IGl0ZXJhdGVlKF9nZXRWYWx1ZSk7XG4gIGNvbnN0IHZhbHVlc1NldCA9IG5ldyBTZXQoQXJyYXkuZnJvbSh2YWx1ZXNUb1JlbW92ZSkubWFwKHggPT4gZ2V0VmFsdWUoeCkpKTtcblxuICBsZXQgcmVzdWx0SW5kZXggPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmFsdWUgPSBnZXRWYWx1ZShhcnJbaV0pO1xuXG4gICAgaWYgKHZhbHVlc1NldC5oYXModmFsdWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBGb3IgaGFuZGxpbmcgc3BhcnNlIGFycmF5c1xuICAgIGlmICghT2JqZWN0Lmhhc093bihhcnIsIGkpKSB7XG4gICAgICBkZWxldGUgYXJyW3Jlc3VsdEluZGV4KytdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgYXJyW3Jlc3VsdEluZGV4KytdID0gYXJyW2ldO1xuICB9XG5cbiAgYXJyLmxlbmd0aCA9IHJlc3VsdEluZGV4O1xuXG4gIHJldHVybiBhcnI7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxRQUFRLFFBQVEsc0JBQXNCO0FBb0UvQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCQyxHQUNELE9BQU8sU0FBUyxVQUNkLEdBQVEsRUFDUixjQUE0QixFQUM1QixTQUFnSDtFQUVoSCxNQUFNLFdBQVcsU0FBUztFQUMxQixNQUFNLFlBQVksSUFBSSxJQUFJLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQSxJQUFLLFNBQVM7RUFFdkUsSUFBSSxjQUFjO0VBRWxCLElBQUssSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLE1BQU0sRUFBRSxJQUFLO0lBQ25DLE1BQU0sUUFBUSxTQUFTLEdBQUcsQ0FBQyxFQUFFO0lBRTdCLElBQUksVUFBVSxHQUFHLENBQUMsUUFBUTtNQUN4QjtJQUNGO0lBRUEsNkJBQTZCO0lBQzdCLElBQUksQ0FBQyxPQUFPLE1BQU0sQ0FBQyxLQUFLLElBQUk7TUFDMUIsT0FBTyxHQUFHLENBQUMsY0FBYztNQUN6QjtJQUNGO0lBRUEsR0FBRyxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsRUFBRTtFQUM3QjtFQUVBLElBQUksTUFBTSxHQUFHO0VBRWIsT0FBTztBQUNUIn0=
// denoCacheMetadata=15339314127583307697,14447522247770828002