/**
 * Computes the difference between two arrays based on a custom equality function.
 *
 * This function takes two arrays and a custom comparison function. It returns a new array containing
 * the elements that are present in the first array but not in the second array. The comparison to determine
 * if elements are equal is made using the provided custom function.
 *
 * @template T, U
 * @param {T[]} firstArr - The array from which to get the difference.
 * @param {U[]} secondArr - The array containing elements to exclude from the first array.
 * @param {(x: T, y: U) => boolean} areItemsEqual - A function to determine if two items are equal.
 * @returns {T[]} A new array containing the elements from the first array that do not match any elements in the second array
 * according to the custom equality function.
 *
 * @example
 * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];
 * const array2 = [{ id: 2 }, { id: 4 }];
 * const areItemsEqual = (a, b) => a.id === b.id;
 * const result = differenceWith(array1, array2, areItemsEqual);
 * // result will be [{ id: 1 }, { id: 3 }] since the elements with id 2 are considered equal and are excluded from the result.
 *
 * @example
 * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }];
 * const array2 = [2, 4];
 * const areItemsEqual = (a, b) => a.id === b;
 * const result = differenceWith(array1, array2, areItemsEqual);
 * // result will be [{ id: 1 }, { id: 3 }] since the element with id 2 is considered equal to the second array's element and is excluded from the result.
 */
export function differenceWith<T, U>(
  firstArr: readonly T[],
  secondArr: readonly U[],
  areItemsEqual: (x: T, y: U) => boolean
): T[] {
  return firstArr.filter(firstItem => {
    return secondArr.every(secondItem => {
      return !areItemsEqual(firstItem, secondItem);
    });
  });
}

// denoCacheMetadata={"headers":{"last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","x-goog-stored-content-length":"1835","date":"Thu, 26 Jun 2025 21:45:35 GMT","x-jsr-cache-status":"revalidated","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-hash":"crc32c=wUZIrQ==,md5=MaCr3Ect+yI8pgNWydNtAQ==","via":"1.1 google","cache-control":"public, max-age=31536000, immutable","x-jsr-cache-id":"ATL","access-control-allow-origin":"*","x-goog-stored-content-encoding":"identity","content-length":"1835","expires":"Fri, 26 Jun 2026 21:45:35 GMT","accept-ranges":"bytes","x-goog-generation":"1741509575831182","etag":"\"31a0abdc472dfb223ca60356c9d36d01\"","cross-origin-resource-policy":"cross-origin","x-guploader-uploadid":"ABgVH88qoSkyn3oAYeqdtbZskXYV99uO5VOMg-JMGM-5ErqVyQXAzL7guU2yoh-MG-PpAhTs0SXMfyE","content-type":"text/typescript","server":"UploadServer","access-control-expose-headers":"*","x-content-type-options":"nosniff","x-goog-metageneration":"1","x-robots-tag":"noindex","x-goog-storage-class":"STANDARD","age":"0","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/array/differenceWith.ts","time":1750974334}