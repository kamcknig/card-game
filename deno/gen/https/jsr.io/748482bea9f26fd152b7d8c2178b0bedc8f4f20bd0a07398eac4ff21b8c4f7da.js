import { eq } from '../util/eq.ts';
/**
 * Assigns default values to an `object`, ensuring that certain properties do not remain `undefined`.
 * It sets default values for properties that are either `undefined` or inherited from `Object.prototype`.
 *
 * You can pass in multiple objects to define these default values,
 * and they will be applied in order from left to right.
 * Once a property has been assigned a value, any subsequent values for that property will be ignored.
 *
 * Note: This function modifies the first argument, `object`. If you want to keep `object` unchanged, consider using `toDefaulted` instead.
 *
 * @template T - The type of the object being processed.
 * @template S - The type of the objects that provides default values.
 * @param {T} object - The target object that will receive default values.
 * @param {S[]} source - The objects that specifies the default values to apply.
 * @returns {object} The `object` that has been updated with default values from `sources`, ensuring that all properties are defined and none are left as `undefined`.
 *
 * @example
 * defaults({ a: 1 }, { a: 2, b: 2 }, { c: 3 }); // { a: 1, b: 2, c: 3 }
 * defaults({ a: 1, b: 2 }, { b: 3 }, { c: 3 }); // { a: 1, b: 2, c: 3 }
 * defaults({ a: null }, { a: 1 }); // { a: null }
 * defaults({ a: undefined }, { a: 1 }); // { a: 1 }
 */ export function defaults(object, ...sources) {
  object = Object(object);
  const objectProto = Object.prototype;
  for(let i = 0; i < sources.length; i++){
    const source = sources[i];
    const keys = Object.keys(source);
    for(let j = 0; j < keys.length; j++){
      const key = keys[j];
      const value = object[key];
      if (value === undefined || !Object.hasOwn(object, key) && eq(value, objectProto[key])) {
        object[key] = source[key];
      }
    }
  }
  return object;
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=11586810923658795456,13835471599382120629