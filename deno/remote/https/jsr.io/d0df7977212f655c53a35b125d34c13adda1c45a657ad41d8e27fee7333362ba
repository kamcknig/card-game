/**
 * Checks if a given value is a plain object.
 *
 * @param {object} value - The value to check.
 * @returns {value is Record<PropertyKey, any>} - True if the value is a plain object, otherwise false.
 *
 * @example
 * ```typescript
 * // ‚úÖüëá True
 *
 * isPlainObject({ });                       // ‚úÖ
 * isPlainObject({ key: 'value' });          // ‚úÖ
 * isPlainObject({ key: new Date() });       // ‚úÖ
 * isPlainObject(new Object());              // ‚úÖ
 * isPlainObject(Object.create(null));       // ‚úÖ
 * isPlainObject({ nested: { key: true} });  // ‚úÖ
 * isPlainObject(new Proxy({}, {}));         // ‚úÖ
 * isPlainObject({ [Symbol('tag')]: 'A' });  // ‚úÖ
 *
 * // ‚úÖüëá (cross-realms, node context, workers, ...)
 * const runInNewContext = await import('node:vm').then(
 *     (mod) => mod.runInNewContext
 * );
 * isPlainObject(runInNewContext('({})'));   // ‚úÖ
 *
 * // ‚ùåüëá False
 *
 * class Test { };
 * isPlainObject(new Test())           // ‚ùå
 * isPlainObject(10);                  // ‚ùå
 * isPlainObject(null);                // ‚ùå
 * isPlainObject('hello');             // ‚ùå
 * isPlainObject([]);                  // ‚ùå
 * isPlainObject(new Date());          // ‚ùå
 * isPlainObject(new Uint8Array([1])); // ‚ùå
 * isPlainObject(Buffer.from('ABC'));  // ‚ùå
 * isPlainObject(Promise.resolve({})); // ‚ùå
 * isPlainObject(Object.create({}));   // ‚ùå
 * isPlainObject(new (class Cls {}));  // ‚ùå
 * isPlainObject(globalThis);          // ‚ùå,
 * ```
 */
export function isPlainObject(value: unknown): value is Record<PropertyKey, any> {
  if (!value || typeof value !== 'object') {
    return false;
  }

  const proto = Object.getPrototypeOf(value) as typeof Object.prototype | null;

  const hasObjectPrototype =
    proto === null ||
    proto === Object.prototype ||
    // Required to support node:vm.runInNewContext({})
    Object.getPrototypeOf(proto) === null;

  if (!hasObjectPrototype) {
    return false;
  }

  return Object.prototype.toString.call(value) === '[object Object]';
}

// denoCacheMetadata={"headers":{"server":"UploadServer","last-modified":"Sun, 09 Mar 2025 08:39:35 GMT","x-guploader-uploadid":"ABgVH88gffIusffIhwsJ-5gleBhoxD0usK3FAQmur49fghB63CvPNE1jmKL5eF0AjsepdY-bc9OBGvg","x-goog-storage-class":"STANDARD","x-goog-hash":"crc32c=w3a0Rg==,md5=5cdNwfLgGIhTQjZT1CKyYw==","expires":"Fri, 26 Jun 2026 21:45:36 GMT","cache-control":"public, max-age=31536000, immutable","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","access-control-allow-origin":"*","x-goog-stored-content-length":"2034","date":"Thu, 26 Jun 2025 21:45:36 GMT","x-goog-metageneration":"1","content-length":"2034","x-jsr-cache-id":"ATL","access-control-expose-headers":"*","age":"0","cross-origin-resource-policy":"cross-origin","etag":"\"e5c74dc1f2e0188853423653d422b263\"","x-goog-stored-content-encoding":"identity","x-goog-generation":"1741509575283465","accept-ranges":"bytes","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-jsr-cache-status":"revalidated","via":"1.1 google","content-type":"text/typescript","x-robots-tag":"noindex"},"url":"https://jsr.io/@es-toolkit/es-toolkit/1.33.0/src/predicate/isPlainObject.ts","time":1750974334}